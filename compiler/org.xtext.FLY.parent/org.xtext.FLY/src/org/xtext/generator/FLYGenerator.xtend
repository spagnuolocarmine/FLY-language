/*
 * generated by Xtext 2.13.0
 */
package org.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.HashMap
import org.xtext.fLY.FunctionDefinition
import org.xtext.fLY.Expression
import org.xtext.fLY.VariableDeclaration
import org.xtext.fLY.Assignment
import org.xtext.fLY.PrintExpression
import org.xtext.fLY.IfExpression
import org.xtext.fLY.ForExpression
import org.xtext.fLY.WhileExpression
import org.xtext.fLY.ChannelSend
import org.xtext.fLY.ChannelReceive
import org.xtext.fLY.LocalFunctionCall
import org.xtext.fLY.FunctionReturn
import org.xtext.fLY.BlockExpression
import org.xtext.fLY.ArithmeticExpression
import org.xtext.fLY.BinaryOperation
import org.xtext.fLY.UnaryOperation
import org.xtext.fLY.PostfixOperation
import org.xtext.fLY.ParenthesizedExpression
import org.xtext.fLY.NumberLiteral
import org.xtext.fLY.BooleanLiteral
import org.xtext.fLY.StringLiteral
import org.xtext.fLY.FloatLiteral
import org.xtext.fLY.VariableLiteral
import org.xtext.fLY.NameObject
import org.xtext.fLY.IndexObject
import org.xtext.fLY.DatSingleObject
import org.xtext.fLY.DatTableObject
import org.xtext.fLY.CastExpression
import org.xtext.fLY.MathFunction
import org.xtext.fLY.FunctionInput
import org.xtext.fLY.NameObjectDef
import org.eclipse.emf.ecore.EObject
import org.xtext.fLY.Fly
import org.xtext.fLY.VariableFunction
import org.xtext.fLY.RangeLiteral
import org.xtext.fLY.DeclarationObject
import org.xtext.fLY.DeclarationFeature
import org.xtext.fLY.FlyFunctionCall
import org.xtext.fLY.SortExpression
import org.xtext.fLY.LocalFunctionInput
import org.xtext.fLY.TimeFunction
import com.google.inject.Inject
import org.xtext.fLY.ArrayDefinition
import org.xtext.fLY.ConstantDeclaration
import org.xtext.fLY.ArrayInit
import org.xtext.fLY.ArrayValue
import org.xtext.fLY.ForIndex
import org.xtext.fLY.NativeExpression
import java.util.ArrayList
import javax.lang.model.type.DeclaredType
import java.util.List
import java.util.Arrays
import org.eclipse.xtend.lib.macro.declaration.Declaration
import org.xtext.fLY.EnvironemtLiteral
import org.xtext.fLY.ObjectLiteral
import org.xtext.services.FLYGrammarAccess.VariableDeclarationElements

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FLYGenerator extends AbstractGenerator {
	
	@Inject FLYGeneratorPython pyGen
	@Inject FLYGeneratorJs	jsGen

	private HashMap<String, HashMap<String, String>> typeSystem = new HashMap<String, HashMap<String, String>>(); // memory hash
	var name = ""
	var filenameVmCluster = ""
	var filenameSingleVm = ""
	var vm_cluster_name = ""
	var func_ID = 0
	var file_deploy_id = 0
	var id_execution = System.currentTimeMillis
	var last_func_result = null
	var deployed_function = new HashMap<String,ArrayList<String>>();
	var list_environment = new ArrayList<String>(Arrays.asList("smp","aws","aws-debug","azure","vm-cluster"));
	Resource res = null

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		if(resource.allContents.size >0 ){
			res = resource;
			var name_extension = resource.URI.toString.split('/').last
			name = name_extension.toString.split('.fly').get(0)
			filenameVmCluster = name + "ExecutionOnVMCluster"
			filenameSingleVm = name + "SingleVM"
			typeSystem.put("main", new HashMap<String, String>())

			// generate .js or .py file
			for (element : resource.allContents.toIterable.filter(FlyFunctionCall)) {
				var type_env = ((element.environment.right as DeclarationObject).features.get(0) as DeclarationFeature).value_s;
				var async = element.isAsync;
				if(type_env.equals("smp") && ((element.environment.right as DeclarationObject).features.length==3)){
					// generate .java file (local)
					fsa.generateFile(name + ".java", resource.compileJava)
					if(((element.environment.right as DeclarationObject).features.get(2) as DeclarationFeature).value_s.contains("python")){
						pyGen.generatePython(resource,fsa,context,name,element.target,element.environment,typeSystem,id_execution,true,async);
					}else{
						jsGen.generateJS(resource,fsa,context,name,element.target,element.environment,typeSystem,id_execution,true,async);
					}	
				}else if(type_env.equals("smp")){
					// generate .java file (local)
					fsa.generateFile(name + ".java", resource.compileJava)
				}
				if ( (type_env != "smp") && (type_env != "vm-cluster")) {
					// generate .java file (serverless)
					fsa.generateFile(name + ".java", resource.compileJava)
					var language =""
					switch type_env {
						case "aws":{
							language = ((element.environment.right as DeclarationObject).features.get(5) as DeclarationFeature).value_s;
							
						}
						case "aws-debug":{
							language = ((element.environment.right as DeclarationObject).features.get(5) as DeclarationFeature).value_s;
							
						}
						case "azure":{
							language = ((element.environment.right as DeclarationObject).features.get(6) as DeclarationFeature).value_s;
							
						}
					}
					
					if (language.contains("python")){
						pyGen.generatePython(resource,fsa,context,name,element.target,element.environment,typeSystem,id_execution,false,async); 
					}else if (language.contains("nodejs")) {
						jsGen.generateJS(resource,fsa,context,name,element.target,element.environment,typeSystem,id_execution,false,async);
					}
				}
				if(type_env.equals("vm-cluster")){
					//Generate .java files (VM Cluster)
					vm_cluster_name = element.environment.name
					fsa.generateFile(filenameSingleVm + ".java", resource.compileJavaForSingleVM)
					fsa.generateFile(filenameVmCluster + ".java", resource.compileJavaForVMCluster)
					return
				}
			}
		}
	}
	
	def CharSequence compileJavaForVMCluster(Resource resource) '''
	import java.io.File;
	import java.io.FileInputStream;
	import java.io.InputStreamReader;
	import java.io.FileOutputStream;
	import java.io.OutputStreamWriter;
	import java.io.IOException;
	import java.nio.ByteBuffer;
	import java.nio.channels.FileChannel;
	import java.nio.file.StandardOpenOption;
	import java.io.InputStream;
	import java.net.ServerSocket;
	import java.net.Socket;
	import java.io.BufferedReader;
	import java.util.ArrayList;
	import java.util.Arrays;
	import java.util.List;
	import java.util.zip.ZipEntry;
	import java.util.zip.ZipOutputStream;
	import java.io.BufferedWriter;
	import java.io.FileWriter;
	import java.io.IOException;
	import java.util.HashMap;
	import java.time.LocalDate;
	import tech.tablesaw.api.Table;
	import tech.tablesaw.io.csv.CsvReadOptions;
	import tech.tablesaw.io.csv.CsvWriteOptions;
	import tech.tablesaw.columns.Column;
	import tech.tablesaw.selection.Selection;
	import tech.tablesaw.table.Rows;
	import tech.tablesaw.api.Row;
	import java.util.concurrent.LinkedTransferQueue;
	import java.util.concurrent.ExecutorService;
	import java.util.concurrent.Executors;
	import java.util.concurrent.ExecutionException;
	import java.util.ArrayList;
	import java.util.List;
	import java.util.concurrent.Callable;
	import java.util.concurrent.Future;
	import java.util.concurrent.atomic.AtomicInteger;
	import java.util.Random;
	import java.util.Collections;
	import java.util.Comparator;
	import java.util.Map;
	import java.util.Scanner;
	import org.apache.commons.io.FileUtils;
	import org.apache.commons.io.FileUtils;
	import java.sql.*;

	«IF checkAzure()»
	import isislab.azureclient.AzureClient;
	«ENDIF»
	
	«IF checkAWS()»
	import com.amazonaws.auth.AWSStaticCredentialsProvider;
	import com.amazonaws.auth.BasicAWSCredentials;
	import com.amazonaws.services.ec2.model.Instance;
	import com.amazonaws.services.sqs.AmazonSQS;
	import com.amazonaws.services.sqs.AmazonSQSClientBuilder;
	import com.amazonaws.services.sqs.model.CreateQueueRequest;
	import com.amazonaws.services.sqs.model.DeleteQueueRequest;
	import com.amazonaws.services.sqs.model.GetQueueAttributesRequest;
	import com.amazonaws.services.sqs.model.Message;
	import com.amazonaws.services.sqs.model.QueueAttributeName;
	import com.amazonaws.services.sqs.model.ReceiveMessageRequest;
	import com.amazonaws.services.sqs.model.ReceiveMessageResult;
	import com.amazonaws.services.sqs.model.SendMessageRequest;
	import isislab.awsclient.AWSClient;
	«ENDIF»
		
	public class «filenameVmCluster» {
				
		static HashMap<String,HashMap<String, Object>> __fly_environment = new HashMap<String,HashMap<String,Object>>();
		static long  __id_execution =  System.currentTimeMillis();
		
		«FOR element : (resource.allContents.toIterable.filter(Expression))»
			«IF element instanceof VariableDeclaration»
				«IF element.right instanceof DeclarationObject
					&& (!(element.right as DeclarationObject).features.get(0).value_s.equals("aws")) //all aws usual declarations are not needed
					&& ( (element.right as DeclarationObject).features.get(0).value_s.equals("channel") || list_environment.contains((element.right as DeclarationObject).features.get(0).value_s) )»
					«generateVariableDeclaration(element,"main")»
				«ELSEIF  element.right instanceof DeclarationObject
					&& (element.right as DeclarationObject).features.get(0).value_s.equals("aws")»
					static BasicAWSCredentials creds = new BasicAWSCredentials("«(element.right as DeclarationObject).features.get(2).value_s»", "«(element.right as DeclarationObject).features.get(3).value_s»");
					static AWSClient «element.name» = null;
					
					static AmazonSQS __sqs_«element.name» = AmazonSQSClientBuilder.standard()
									.withRegion("«(element.right as DeclarationObject).features.get(4).value_s»")							 
									.withCredentials(new AWSStaticCredentialsProvider(creds))
									.build();
									
				«ENDIF»
			«ENDIF»
			«IF element instanceof ConstantDeclaration»
				«generateConstantDeclaration(element,"main")»	
			«ENDIF»
		«ENDFOR»
				
		public static void main(String[] args) throws Exception{
				«FOR element : (resource.allContents.toIterable.filter(Expression).filter(ConstantDeclaration))»
					«initialiseConstant(element,"main")»
				«ENDFOR»
				
				«FOR element : resource.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject]
				.filter[list_environment.contains((right as DeclarationObject).features.get(0).value_s)]
				.filter[(right as DeclarationObject).features.get(0).value_s.equals("vm-cluster") ||
					(right as DeclarationObject).features.get(0).value_s.equals("smp")]»
					«setEnvironmentDeclarationInfo(element)»
				«ENDFOR»
				
				
				«FOR element: resource.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
				filter[((right as DeclarationObject).features.get(0).value_s.equals("azure"))]»
					String «element.name»_terminationQueue = "ch-termination-"+__id_execution;

					«element.name» = new AzureClient("«((element.right as DeclarationObject).features.get(1) as DeclarationFeature).value_s»",
						"«((element.right as DeclarationObject).features.get(2) as DeclarationFeature).value_s»",
						"«((element.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s»",
						"«((element.right as DeclarationObject).features.get(4) as DeclarationFeature).value_s»",
						__id_execution+"",
						"«((element.right as DeclarationObject).features.get(5) as DeclarationFeature).value_s»",
						«element.name»_terminationQueue);
					
					«element.name».VMClusterInit();
					«element.name».setupQueue(«element.name»_terminationQueue);
				«ENDFOR»
				
				«FOR element: resource.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
				filter[((right as DeclarationObject).features.get(0).value_s.equals("aws"))]»
					__sqs_«element.name».createQueue(new CreateQueueRequest("ch-termination-"+__id_execution));
					String «element.name»_terminationQueue = __sqs_«element.name».getQueueUrl("ch-termination-"+__id_execution).getQueueUrl();					
					«element.name» = new AWSClient(creds, "«(element.right as DeclarationObject).features.get(4).value_s»", «element.name»_terminationQueue);
				«ENDFOR»
								
				String purchasingOption = (String) __fly_environment.get("«vm_cluster_name»").get("purchasing_option");
				String vmTypeSize = (String) __fly_environment.get("«vm_cluster_name»").get("vm_type_size");
				boolean persistent = Boolean.parseBoolean((String) __fly_environment.get("«vm_cluster_name»").get("persistent"));
				int vmCount = Integer.parseInt((String) __fly_environment.get("«vm_cluster_name»").get("count"));
				
				«FOR element: resource.allContents.toIterable.filter(FlyFunctionCall)»

					«element.environment.environment.get(0).name».zipAndUploadCurrentProject();
					
					int vmsCreatedCount = «element.environment.environment.get(0).name».launchVMCluster(vmTypeSize, purchasingOption, persistent, vmCount);
					
					if ( vmsCreatedCount != 0) {
						System.out.print("\n\u27A4 Waiting for virtual machines boot script to complete...");
						«IF ((element.environment.environment.get(0).right as DeclarationObject).features.get(0) as DeclarationFeature).value_s.equals("azure")»
							while («element.environment.environment.get(0).name».getQueueLength(«element.environment.environment.get(0).name»_terminationQueue) != vmsCreatedCount);
						«ELSEIF ((element.environment.environment.get(0).right as DeclarationObject).features.get(0) as DeclarationFeature).value_s.equals("aws")»
							while ( Long.parseLong(__sqs_«element.environment.environment.get(0).name».getQueueAttributes(new GetQueueAttributesRequest().withQueueUrl(«element.environment.environment.get(0).name»_terminationQueue)
														.withAttributeNames(QueueAttributeName.ApproximateNumberOfMessages.toString())).getAttributes().get("ApproximateNumberOfMessages")) != vmsCreatedCount);
						«ENDIF»
						System.out.println("Done");
					}
					if(vmsCreatedCount != vmCount){
						if ( vmsCreatedCount > 0) «element.environment.environment.get(0).name».downloadFLYProjectonVMCluster();
						
						System.out.print("\n\u27A4 Waiting for download project on VM CLuster to complete...");
						«IF ((element.environment.environment.get(0).right as DeclarationObject).features.get(0) as DeclarationFeature).value_s.equals("azure")»
							while («element.environment.environment.get(0).name».getQueueLength(«element.environment.environment.get(0).name»_terminationQueue) != (vmCount+vmsCreatedCount));
						«ELSEIF ((element.environment.environment.get(0).right as DeclarationObject).features.get(0) as DeclarationFeature).value_s.equals("aws")»
							while ( Long.parseLong(__sqs_«element.environment.environment.get(0).name».getQueueAttributes(new GetQueueAttributesRequest().withQueueUrl(«element.environment.environment.get(0).name»_terminationQueue)
														.withAttributeNames(QueueAttributeName.ApproximateNumberOfMessages.toString())).getAttributes().get("ApproximateNumberOfMessages")) != (vmCount+vmsCreatedCount));
						«ENDIF»
					}
					System.out.println("Done");
					
					«element.environment.environment.get(0).name».buildFLYProjectOnVMCluster();
					
					System.out.print("\n\u27A4 Waiting for building project on VM CLuster to complete...");
					if(vmsCreatedCount != vmCount){
						«IF ((element.environment.environment.get(0).right as DeclarationObject).features.get(0) as DeclarationFeature).value_s.equals("azure")»
							while («element.environment.environment.get(0).name».getQueueLength(«element.environment.environment.get(0).name»_terminationQueue) != ( (vmCount*2)+vmsCreatedCount));
						«ELSEIF ((element.environment.environment.get(0).right as DeclarationObject).features.get(0) as DeclarationFeature).value_s.equals("aws")»
							while ( Long.parseLong(__sqs_«element.environment.environment.get(0).name».getQueueAttributes(new GetQueueAttributesRequest().withQueueUrl(«element.environment.environment.get(0).name»_terminationQueue)
														.withAttributeNames(QueueAttributeName.ApproximateNumberOfMessages.toString())).getAttributes().get("ApproximateNumberOfMessages")) != ( (vmCount*2)+vmsCreatedCount));
						«ENDIF»
					} else {
						«IF ((element.environment.environment.get(0).right as DeclarationObject).features.get(0) as DeclarationFeature).value_s.equals("azure")»
							while («element.environment.environment.get(0).name».getQueueLength(«element.environment.environment.get(0).name»_terminationQueue) != (vmCount*2));
						«ELSEIF ((element.environment.environment.get(0).right as DeclarationObject).features.get(0) as DeclarationFeature).value_s.equals("aws")»
							while ( Long.parseLong(__sqs_«element.environment.environment.get(0).name».getQueueAttributes(new GetQueueAttributesRequest().withQueueUrl(«element.environment.environment.get(0).name»_terminationQueue)
														.withAttributeNames(QueueAttributeName.ApproximateNumberOfMessages.toString())).getAttributes().get("ApproximateNumberOfMessages")) != (vmCount*2));
						«ENDIF»
					}
					System.out.println("Done");
									
					«workloadDistributionOnVMCluster(element,"main", ((element.environment.right as DeclarationObject).features.get(4) as DeclarationFeature).value_t)»
					
					«FOR el: resource.allContents.toIterable.filter(VariableDeclaration).filter[onCloud].filter[right instanceof DeclarationObject].
					filter[(right as DeclarationObject).features.get(0).value_s.equals("channel")]»
						«IF !(el.environment.get(0).right as DeclarationObject).features.get(0).value_s.equals("smp")»
						«generateChannelWaitingResultsForVMCluster(el)»
						«ENDIF»
					«ENDFOR»
										
					«element.environment.environment.get(0).name».executeFLYonVMCluster(dimPortions,
													displ,
													numberOfFunctions,
													__id_execution);

					«FOR el: resource.allContents.toIterable.filter(VariableDeclaration).filter[onCloud].filter[right instanceof DeclarationObject].
					filter[(right as DeclarationObject).features.get(0).value_s.equals("channel")]»
						«IF !(el.environment.get(0).right as DeclarationObject).features.get(0).value_s.equals("smp")»
							System.out.print("\n\u27A4 Waiting for FLY execution to complete...");
							while («el.name».size() != numberOfFunctions);
							__wait_on_«el.name» = false;
							System.out.println("Done");
						«ENDIF»
					«ENDFOR»
					
					«IF element.isIs_thenall»
						«element.thenall.name»();
					«ENDIF»
					
					«element.environment.environment.get(0).name».deleteResourcesAllocated();

				«ENDFOR»
				
				«FOR el: resource.allContents.toIterable.filter(VariableDeclaration).filter[onCloud].filter[right instanceof DeclarationObject].
				filter[(right as DeclarationObject).features.get(0).value_s.equals("channel")]»
					«IF (el.environment.get(0).right as DeclarationObject).features.get(0).value_s.equals("aws")»
					__sqs_«el.environment.get(0).name».deleteQueue(new DeleteQueueRequest(«el.environment.get(0).name»_terminationQueue));
					__sqs_«el.environment.get(0).name».deleteQueue(new DeleteQueueRequest(__sqs_«el.environment.get(0).name».getQueueUrl("«el.name»-"+__id_execution).getQueueUrl()));
					«ENDIF»
				«ENDFOR»
				
				«FOR element: resource.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
				filter[list_environment.contains((right as DeclarationObject).features.get(0).value_s) 
					&& ((right as DeclarationObject).features.get(0).value_s.equals("smp"))]»
					__thread_pool_«element.name».shutdown();
				«ENDFOR»
				
				System.exit(0);
			}
			
			«FOR element : resource.allContents.toIterable.filter(FunctionDefinition)»
				«IF checkBlock(element.eContainer)==false»
					«generateFunctionDefinition(element)»
				«ENDIF»	
			«ENDFOR»
		}
	'''
	
	def generateChannelWaitingResultsForVMCluster(VariableDeclaration dec) {
		var env = ((dec.environment.get(0).right as DeclarationObject).features.get(0)).value_s
		var env_name = dec.environment.get(0).name
		var local_env = res.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
			filter[(right as DeclarationObject).features.get(0).value_s.equals("smp")].get(0)
		var local = local_env.name
		switch env {
			case "aws":
			return '''
				__sqs_«env_name».createQueue(new CreateQueueRequest("«dec.name»-"+__id_execution));
				
				for(int __i=0;__i< (Integer)__fly_environment.get("«local»").get("nthread");__i++){ 
					__thread_pool_«local».submit(new Callable<Object>() {
						@Override
						public Object call() throws Exception {
							while(__wait_on_«dec.name») {
								ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs_«env_name».getQueueUrl("«dec.name»-"+__id_execution).getQueueUrl()).
										withWaitTimeSeconds(1).withMaxNumberOfMessages(10);
								ReceiveMessageResult __res = __sqs_«env_name».receiveMessage(__recmsg);
								for(Message msg : __res.getMessages()) { 
									«dec.name».put(msg.getBody());
									__sqs_«env_name».deleteMessage(__sqs_«env_name».getQueueUrl("«dec.name»-"+__id_execution).getQueueUrl(), msg.getReceiptHandle());
								}
							}
							return null;
						}
					});
				}
			'''
		case "azure":
			return '''
				«env_name».setupQueue("«dec.name»-"+__id_execution);

				for(int __i=0;__i< (Integer)__fly_environment.get("«local»").get("nthread");__i++){ 
					__thread_pool_«local».submit(new Callable<Object>() {
						@Override
						public Object call() throws Exception {
							while(__wait_on_«dec.name») {
								List<String> __recMsgs = «env_name».peeksFromQueue("«dec.name»-"+__id_execution,32);
								for(String msg : __recMsgs) { 
									«dec.name».put(msg);
								}
							}
							return null;
						}
					});
				}
			'''
			}	
	}
	
	def workloadDistributionOnVMCluster(FlyFunctionCall call, String scope, int vmCount) {
		var s = ''''''
		if ((call.input as FunctionInput).is_for_index) { // 'for 'keyword 
			s = '''
				//Workload uniform splitting
				int[] dimPortions = new int[«vmCount»]; //size of each vm's portion
				int[] displ = new int[«vmCount»]; // start index of each vm's portion
				int offset = 0;
			'''

			if ((call.input as FunctionInput).f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name) != null &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name).
					equals("HashMap")) { // f_index is a reference to an object
				s += '''
					TO DO
				'''
			} else if ((call.input as FunctionInput).f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name) !=
					null &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name).
					equals("Table")) { // f_index is a reference to a Table
				s += '''
					TO DO
				'''
			} else if ((call.input as FunctionInput).f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name) !=
					null &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name).
					equals("File")) { // f_index is a txt file	
					s+='''
						TO DO
					'''
						
			} else if(call.input.f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name) !=
					null &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).contains("Directory")){
					s+='''
						TO DO
					'''
			} else if(call.input.f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).contains("Matrix")){
					if(call.input.split.equals("row")){ 
						s+='''
							int rows = «(call.input.f_index as VariableLiteral).variable.name».length;
							
							for(int i=0;i<«vmCount»;i++){
								int __n_rows =  rows/«vmCount»;
								if(rows% «vmCount» !=0 && i< rows%«vmCount» ){
									__n_rows++;
								}
								dimPortions[i]= __n_rows;
								displ[i] = offset;
								offset += dimPortions[i];
								
								
							}
							int numberOfFunctions = rows;
							
						'''
					}
			} else { // f_index is a range
				
				var value2 = if ((((call.input as FunctionInput).f_index as RangeLiteral ).value_l2) != null) ((call.input as FunctionInput).f_index as RangeLiteral ).value_l2.name  else ((call.input as FunctionInput).f_index as RangeLiteral ).value2  ;

				s += '''
					for(int i=0; i<«vmCount»;i++){
					            dimPortions[i] = («value2» / «vmCount») +
					                            ((i < («value2» % «vmCount»)) ? 1 : 0);
					            displ[i] = offset;
					            offset += dimPortions[i];
					}
					int numberOfFunctions = «value2»;
				'''
			}
		} else { // no 'in' keyword

				s += '''
					TO DO
				'''
		}
		return s
	}
	
	def CharSequence compileJavaForSingleVM(Resource resource) '''
	import java.io.File;
	import java.io.FileInputStream;
	import java.io.InputStreamReader;
	import java.io.FileOutputStream;
	import java.io.OutputStreamWriter;
	import java.io.IOException;
	import java.nio.ByteBuffer;
	import java.nio.channels.FileChannel;
	import java.nio.file.StandardOpenOption;
	import java.io.InputStream;
	import java.net.ServerSocket;
	import java.net.Socket;
	import java.io.BufferedReader;
	import java.util.ArrayList;
	import java.util.Arrays;
	import java.util.List;
	import java.util.zip.ZipEntry;
	import java.util.zip.ZipOutputStream;
	import java.io.BufferedWriter;
	import java.io.FileWriter;
	import java.io.IOException;
	import java.util.HashMap;
	import java.time.LocalDate;
	import tech.tablesaw.api.Table;
	import tech.tablesaw.io.csv.CsvReadOptions;
	import tech.tablesaw.io.csv.CsvWriteOptions;
	import tech.tablesaw.columns.Column;
	import tech.tablesaw.selection.Selection;
	import tech.tablesaw.table.Rows;
	import tech.tablesaw.api.Row;
	import java.util.concurrent.LinkedTransferQueue;
	import java.util.concurrent.ExecutorService;
	import java.util.concurrent.Executors;
	import java.util.concurrent.ExecutionException;
	import java.util.ArrayList;
	import java.util.List;
	import java.util.concurrent.Callable;
	import java.util.concurrent.Future;
	import java.util.concurrent.atomic.AtomicInteger;
	import java.util.Random;
	import java.util.Collections;
	import java.util.Comparator;
	import java.util.Map;
	import java.util.Scanner;
	import org.apache.commons.io.FileUtils;
	import org.apache.commons.io.FileUtils;
	import java.sql.*;

		«IF checkAzure()»
		import isislab.azureclient.AzureClient;
		«ENDIF»
		
		«IF checkAWS()»
		import com.amazonaws.auth.AWSStaticCredentialsProvider;
		import com.amazonaws.auth.BasicAWSCredentials;
		import com.amazonaws.services.sqs.AmazonSQS;
		import com.amazonaws.services.sqs.AmazonSQSClientBuilder;
		import com.amazonaws.services.sqs.model.SendMessageRequest;
		import isislab.awsclient.AWSClient;
		«ENDIF»
		
		public class «filenameSingleVm» {
					
			static HashMap<String,HashMap<String, Object>> __fly_environment = new HashMap<String,HashMap<String,Object>>();
			static long  __id_execution;
			
			«FOR element : (resource.allContents.toIterable.filter(Expression))»
				«IF element instanceof VariableDeclaration»
					«IF element.right instanceof DeclarationObject
						&& (!(element.right as DeclarationObject).features.get(0).value_s.equals("aws")) //all aws usual declarations are not needed
						&& ( (element.right as DeclarationObject).features.get(0).value_s.equals("channel") || list_environment.contains((element.right as DeclarationObject).features.get(0).value_s) )»
						«generateVariableDeclaration(element,"main")»
					«ELSEIF  element.right instanceof DeclarationObject
						&& (element.right as DeclarationObject).features.get(0).value_s.equals("aws")»
						static BasicAWSCredentials creds = new BasicAWSCredentials("«(element.right as DeclarationObject).features.get(2).value_s»", "«(element.right as DeclarationObject).features.get(3).value_s»");
						static AWSClient «element.name» = null;
						
						static AmazonSQS __sqs_«element.name» = AmazonSQSClientBuilder.standard()
										.withRegion("«(element.right as DeclarationObject).features.get(4).value_s»")							 
										.withCredentials(new AWSStaticCredentialsProvider(creds))
										.build();
										
					«ENDIF»
				«ENDIF»
				«IF element instanceof ConstantDeclaration»
					«generateConstantDeclaration(element,"main")»	
				«ENDIF»
			«ENDFOR»
					
			public static void main(String[] args) throws Exception{
					__id_execution = Long.parseLong(args[2]);
					«FOR element : (resource.allContents.toIterable.filter(Expression).filter(ConstantDeclaration))»
						«initialiseConstant(element,"main")»
					«ENDFOR»

					«FOR element: resource.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
					filter[((right as DeclarationObject).features.get(0).value_s.equals("azure"))]»
						«element.name» = new AzureClient("«((element.right as DeclarationObject).features.get(1) as DeclarationFeature).value_s»",
							"«((element.right as DeclarationObject).features.get(2) as DeclarationFeature).value_s»",
							"«((element.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s»",
							"«((element.right as DeclarationObject).features.get(4) as DeclarationFeature).value_s»",
							__id_execution+"",
							"«((element.right as DeclarationObject).features.get(5) as DeclarationFeature).value_s»");
							
						«element.name».VMClusterInit();
					«ENDFOR»
					
					«FOR element: resource.allContents.toIterable.filter(VariableDeclaration).filter[onCloud].filter[right instanceof DeclarationObject].
					filter[(right as DeclarationObject).features.get(0).value_s.equals("channel")]»
						«IF ((element.environment.get(0).right as DeclarationObject).features.get(0) as DeclarationFeature).value_s.equals("azure")»
								«element.environment.get(0).name».setupQueue("«element.name»-"+__id_execution);	
						«ENDIF»
					«ENDFOR»
					
					«FOR element : resource.allContents.toIterable.filter(Expression)»
						«IF checkBlock(element.eContainer)==false»
							«generateExpression(element,"main")»
						«ENDIF»
					«ENDFOR»
					
					«FOR element: resource.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
					filter[list_environment.contains((right as DeclarationObject).features.get(0).value_s) 
						&& ( ((right as DeclarationObject).features.get(0).value_s.equals("smp")) ||
							((right as DeclarationObject).features.get(0).value_s.equals("vm-cluster")))]»
						__thread_pool_«element.name».shutdown();
					«ENDFOR»
					System.exit(0);
				}
				
				«FOR element : resource.allContents.toIterable.filter(FunctionDefinition)»
					«IF checkBlock(element.eContainer)==false»
						«generateFunctionDefinition(element)»
					«ENDIF»	
				«ENDFOR»
			}
	'''
		
	
	
		
	def CharSequence compileJava(Resource resource) '''
	import java.io.File;
	import java.io.FileInputStream;
	import java.io.InputStreamReader;
	import java.io.FileOutputStream;
	import java.io.OutputStreamWriter;
	import java.io.IOException;
	import java.nio.ByteBuffer;
	import java.nio.channels.FileChannel;
	import java.nio.file.StandardOpenOption;
	import java.io.InputStream;
	import java.net.ServerSocket;
	import java.net.Socket;
	import java.io.BufferedReader;
	import java.util.ArrayList;
	import java.util.Arrays;
	import java.util.List;
	import java.util.zip.ZipEntry;
	import java.util.zip.ZipOutputStream;
	import java.io.BufferedWriter;
	import java.io.FileWriter;
	import java.io.IOException;
	import java.util.HashMap;
	import java.time.LocalDate;
	import tech.tablesaw.api.Table;
	import tech.tablesaw.io.csv.CsvReadOptions;
	import tech.tablesaw.io.csv.CsvWriteOptions;
	import tech.tablesaw.columns.Column;
	import tech.tablesaw.selection.Selection;
	import tech.tablesaw.table.Rows;
	import tech.tablesaw.api.Row;
	import java.util.concurrent.LinkedTransferQueue;
	import java.util.concurrent.ExecutorService;
	import java.util.concurrent.Executors;
	import java.util.concurrent.ExecutionException;
	import java.util.ArrayList;
	import java.util.List;
	import java.util.concurrent.Callable;
	import java.util.concurrent.Future;
	import java.util.concurrent.atomic.AtomicInteger;
	import java.util.Random;
	import java.util.Collections;
	import java.util.Comparator;
	import java.util.Map;
	import java.util.Scanner;
	import org.apache.commons.io.FileUtils;
	import org.apache.commons.io.FileUtils;
	import java.sql.*;
		«IF checkAWS() || checkAWSDebug()»
	import com.amazonaws.AmazonClientException;
	import com.amazonaws.auth.AWSStaticCredentialsProvider;
	import com.amazonaws.auth.BasicAWSCredentials;
	import com.amazonaws.auth.profile.ProfileCredentialsProvider;
	import com.amazonaws.services.identitymanagement.AmazonIdentityManagement;
	import com.amazonaws.services.identitymanagement.AmazonIdentityManagementClientBuilder;
	import com.amazonaws.services.identitymanagement.model.CreateRoleRequest;
	import com.amazonaws.services.identitymanagement.model.CreateRoleResult;
	import com.amazonaws.services.identitymanagement.model.DeleteRolePolicyRequest;
	import com.amazonaws.services.identitymanagement.model.DeleteRoleRequest;
	import com.amazonaws.services.identitymanagement.model.PutRolePolicyRequest;
	import com.amazonaws.services.lambda.AWSLambda;
	import com.amazonaws.services.lambda.AWSLambdaClientBuilder;
	import com.amazonaws.services.lambda.model.AddPermissionRequest;
	import com.amazonaws.services.lambda.model.AddPermissionResult;
	import com.amazonaws.services.lambda.model.CreateFunctionRequest;
	import com.amazonaws.services.lambda.model.CreateFunctionResult;
	import com.amazonaws.services.lambda.model.DeleteFunctionRequest;
	import com.amazonaws.services.lambda.model.FunctionCode;
	import com.amazonaws.services.lambda.model.InvokeRequest;
	import com.amazonaws.services.sqs.AmazonSQS;
	import com.amazonaws.services.sqs.model.Message;
	import com.amazonaws.services.sqs.AmazonSQSClient;
	import com.amazonaws.services.sqs.model.CreateQueueRequest;
	import com.amazonaws.services.sqs.model.CreateQueueResult;
	import com.amazonaws.services.sqs.model.ReceiveMessageRequest;
	import com.amazonaws.services.sqs.model.ReceiveMessageResult;
	import com.amazonaws.services.sqs.model.SendMessageRequest;
	import com.amazonaws.services.sqs.model.AmazonSQSException;
	import com.amazonaws.services.sqs.model.GetQueueAttributesRequest;
	import com.amazonaws.services.sqs.model.GetQueueUrlResult;
	import com.amazonaws.services.sqs.model.DeleteQueueRequest;
	import com.amazonaws.services.identitymanagement.model.GetRoleRequest;
	import com.amazonaws.services.identitymanagement.model.GetRoleResult;
	import com.amazonaws.services.s3.AmazonS3;
	import com.amazonaws.services.s3.AmazonS3Client;
	import com.amazonaws.services.s3.AmazonS3ClientBuilder;
	import com.amazonaws.services.s3.model.AmazonS3Exception;
	import com.amazonaws.services.s3.model.Bucket;
	import com.amazonaws.services.s3.model.CannedAccessControlList;
	import com.amazonaws.services.s3.model.PutObjectRequest;
	import com.amazonaws.services.s3.model.ListObjectsV2Result;
	import com.amazonaws.services.s3.model.PutObjectRequest;
	import com.amazonaws.services.s3.model.S3ObjectSummary;
	import com.amazonaws.services.rds.AmazonRDS;
	import com.amazonaws.services.rds.AmazonRDSClient;
	import com.amazonaws.services.rds.model.DBInstance;
	import com.amazonaws.services.rds.model.DescribeDBInstancesRequest;
	import com.amazonaws.services.rds.model.DescribeDBInstancesResult;
	import com.amazonaws.services.rds.model.Endpoint;

		«ENDIF»
		«IF checkAWSDebug()»
	import com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration;
		«ENDIF»
	import com.google.gson.Gson;
	import com.google.gson.reflect.TypeToken;
		«IF checkAzure()»
	import com.microsoft.azure.management.resources.fluentcore.arm.Region;
	import isislab.azureclient.AzureClient;
		«ENDIF»
		
		public class «name» {
			
			static HashMap<String,HashMap<String, Object>> __fly_environment = new HashMap<String,HashMap<String,Object>>();
			static HashMap<String,HashMap<String,Integer>> __fly_async_invocation_id = new HashMap<String,HashMap<String,Integer>>();
			static final String __environment = "smp";
			static long  __id_execution =  System.currentTimeMillis();
			«FOR element : (resource.allContents.toIterable.filter(Expression))»
				«IF element instanceof VariableDeclaration»
					«IF element.right instanceof DeclarationObject 
						&& ( (element.right as DeclarationObject).features.get(0).value_s.equals("channel") || list_environment.contains((element.right as DeclarationObject).features.get(0).value_s) )»
						«generateVariableDeclaration(element,"main")»
					«ENDIF»
				«ENDIF»
				«IF element instanceof ConstantDeclaration»
					«generateConstantDeclaration(element,"main")»	
				«ENDIF»
			«ENDFOR»
			«FOR element : resource.allContents.toIterable.filter(FlyFunctionCall).filter[!(environment.right as DeclarationObject).features.get(0).value_s.equals("smp")]»
				static boolean __wait_on_termination_«element.target.name» = true;
			«ENDFOR»
			
			public static void main(String[] args) throws Exception{
				«FOR element : (resource.allContents.toIterable.filter(Expression).filter(ConstantDeclaration))»
					«initialiseConstant(element,"main")»
				«ENDFOR»
				«IF checkAWSDebug()»
				Runtime.getRuntime().exec("chmod +x src-gen/docker-compose-script.sh");
				ProcessBuilder __processBuilder_docker_compose = new ProcessBuilder("/bin/bash", "-c", "src-gen/docker-compose-script.sh");
				Map<String, String> __env_docker_compose = __processBuilder_docker_compose.environment();
				String __path_env_docker_compose = __env_docker_compose.get("PATH");
				if (!__path_env_docker_compose.contains("/usr/local/bin")) {
					 __env_docker_compose.put("PATH", __path_env_docker_compose+":/usr/local/bin");
				}
				Process __p_docker_compose;
				try {
					__p_docker_compose = __processBuilder_docker_compose.start();
					BufferedReader __p_docker_compose_output = new BufferedReader(new InputStreamReader(__p_docker_compose.getInputStream()));
					String __docker_compose_output_line = __p_docker_compose_output.readLine();
					while(__docker_compose_output_line !=null) {
						System.out.println(__docker_compose_output_line);
						if (__docker_compose_output_line.contains("Ready."))
							break;
						__docker_compose_output_line=__p_docker_compose_output.readLine();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}		
				«ENDIF»
				«FOR element : resource.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
				filter[list_environment.contains((right as DeclarationObject).features.get(0).value_s)]»
					«setEnvironmentDeclarationInfo(element)»
				«ENDFOR»
				«FOR element: resource.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
				filter[list_environment.contains((right as DeclarationObject).features.get(0).value_s) 
					&& !((right as DeclarationObject).features.get(0).value_s.equals("smp"))]»
					ExecutorService __thread_pool_«element.name» = Executors.newFixedThreadPool((int) __fly_environment.get("«resource.allContents.toIterable.filter(VariableDeclaration)
					.filter[right instanceof DeclarationObject].filter[list_environment.contains((right as DeclarationObject).features.get(0).value_s) 
					&& ((right as DeclarationObject).features.get(0).value_s.equals("smp"))].get(0).name»").get("nthread"));
				«ENDFOR»
				«FOR element: resource.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
				filter[((right as DeclarationObject).features.get(0).value_s.equals("azure"))]»
					«element.name» = new AzureClient("«((element.right as DeclarationObject).features.get(1) as DeclarationFeature).value_s»",
						"«((element.right as DeclarationObject).features.get(2) as DeclarationFeature).value_s»",
						"«((element.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s»",
						"«((element.right as DeclarationObject).features.get(4) as DeclarationFeature).value_s»",
						__id_execution+"",
						"«((element.right as DeclarationObject).features.get(5) as DeclarationFeature).value_s»");
					«element.name».init();
					«element.name».createFunctionApp("flyapp«element.name»","«(element.right as DeclarationObject).features.get(6).value_s»");
				«ENDFOR»
				«IF resource.allContents.toIterable.filter(FlyFunctionCall)
				.filter[!(environment.right as DeclarationObject).features.get(0).value_s.equals("smp")].length > 0»
					ExecutorService __thread_pool_deploy_on_cloud = Executors.newFixedThreadPool((int) __fly_environment.get("«resource.allContents.toIterable.filter(VariableDeclaration)
					.filter[right instanceof DeclarationObject].filter[list_environment.contains((right as DeclarationObject).features.get(0).value_s) 
					&& ((right as DeclarationObject).features.get(0).value_s.equals("smp"))].get(0).name»").get("nthread"));	
					ArrayList<Future<Object>> __termination_deploy_on_cloud = new ArrayList();		
					«FOR element: resource.allContents.toIterable.filter(FlyFunctionCall)
					.filter[!(environment.right as DeclarationObject).features.get(0).value_s.equals("smp")]»
						«deployFlyFunctionOnCloud(element)»
					«ENDFOR»
					for (Future<Object> f: __termination_deploy_on_cloud){
						try {
							f.get();
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (ExecutionException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					System.out.println("Deploy effettuato");
				«ENDIF»
				«FOR element: resource.allContents.toIterable.filter(VariableDeclaration).filter[onCloud].filter[right instanceof DeclarationObject].
				filter[(right as DeclarationObject).features.get(0).value_s.equals("channel")]»
					«IF !(element.environment.get(0).right as DeclarationObject).features.get(0).equals("smp")»
					«generateChanelDeclarationForCloud(element)»
					«ELSEIF (element.environment.get(0).right as DeclarationObject).features.get(0).equals("smp") &&
						(element.environment.get(0).right as DeclarationObject).features.length==3»
						«generateChannelDeclarationForLanguage(element)»
					«ENDIF»
				«ENDFOR»
				«FOR element: resource.allContents.toIterable.filter(FlyFunctionCall).filter[!(environment.right as DeclarationObject).features.get(0).value_s.equals("smp")]»
						«generateTerminationQueue(element)»
				«ENDFOR»
				
				«FOR element : resource.allContents.toIterable.filter(Expression)»
					«IF checkBlock(element.eContainer)==false»
						«generateExpression(element,"main")»
					«ENDIF»
				«ENDFOR»
				«FOR element: resource.allContents.toIterable.filter(FlyFunctionCall)
				.filter[!(environment.right as DeclarationObject).features.get(0).equals("smp")]»
					«undeployFlyFunctionOnCloud(element)»
				«ENDFOR»
				«FOR element: resource.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
				filter[list_environment.contains((right as DeclarationObject).features.get(0).value_s) 
					&& ((right as DeclarationObject).features.get(0).value_s.equals("smp"))]»
					__thread_pool_«element.name».shutdown();
				«ENDFOR»
				System.exit(0);
			}
				
			«FOR element : resource.allContents.toIterable.filter(FunctionDefinition)»
				«IF checkBlock(element.eContainer)==false»
					«generateFunctionDefinition(element)»
				«ENDIF»	
			«ENDFOR»	

			private static String __generateString(Table t,int id) {
				StringBuilder b = new StringBuilder();
				b.append("{\"id\":\""+id+"\",\"data\":");
				b.append("[");
				int i_r = t.rowCount();
				for(Row r : t) {
					b.append('{');
					for (int i=0;i< r.columnCount();i++) {
						b.append("\""+ r.columnNames().get(i) +"\":\""+r.getObject(i)+ ((i<r.columnCount()-1)?"\",":""));
					}
					b.append("\"}"+(((i_r != 1 ))?",":""));
					i_r--;
				}
				b.append("]}");
				return b.toString();
			}
			
			private static String __generateString(String s,int id) {
				StringBuilder b = new StringBuilder();
				b.append("{\"id\":"+id+",\"data\":");
				b.append("[");
				String[] tmp = s.split("\n");
				for(String t: tmp){
					b.append(t);
					if(t != tmp[tmp.length-1]){
						b.append(",");
					} 
				}
				b.append("]}");
				return b.toString();
			}
		
	}
	'''
		

		

		
		def undeployFlyFunctionOnCloud(FlyFunctionCall call) {
			var env = (call.environment.right as DeclarationObject).features.get(0).value_s
			if(deployed_function.get(env).contains(call.target.name)){
				deployed_function.remove(call.target.name)
				var user = (call.environment.right as DeclarationObject).features.get(1).value_s
				var cred = call.environment.name
				switch env {
					case "aws":{
						return '''
							Runtime.getRuntime().exec("chmod +x src-gen/«call.target.name»_«call.environment.name»_undeploy.sh");
							ProcessBuilder __processBuilder_undeploy_«call.target.name» = new ProcessBuilder("/bin/bash", "-c", "src-gen/«call.target.name»_«call.environment.name»_undeploy.sh «user» «call.target.name» "+__id_execution);
							Map<String, String> __env_undeploy_«call.target.name» = __processBuilder_undeploy_«call.target.name».environment();
							
							__processBuilder_undeploy_«call.target.name».redirectOutput(ProcessBuilder.Redirect.INHERIT);
							__processBuilder_undeploy_«call.target.name».redirectError(ProcessBuilder.Redirect.INHERIT);
							String __path_env_undeploy_«call.target.name» = __env_undeploy_«call.target.name».get("PATH");
							if (!__path_env_undeploy_«call.target.name».contains("/usr/local/bin")) {
								 __env_undeploy_«call.target.name».put("PATH", __path_env_undeploy_«call.target.name»+":/usr/local/bin");
							}
							Process __p_undeploy_«call.target.name»;
							try {
								__p_undeploy_«call.target.name»= __processBuilder_undeploy_«call.target.name».start();
								__p_undeploy_«call.target.name».waitFor();
								if(__p_undeploy_«call.target.name».exitValue()!=0){
									System.out.println("Error in «call.target.name»_«call.environment.name»_undeploy.sh ");
									System.exit(1);
								}
							} catch (Exception e) {
								e.printStackTrace();
							}	
							'''			
					} 
					case "aws-debug":{
						return '''
							Runtime.getRuntime().exec("chmod +x src-gen/«call.target.name»_«call.environment.name»_undeploy.sh");
							ProcessBuilder __processBuilder_undeploy_«call.target.name» = new ProcessBuilder("/bin/bash", "-c", "src-gen/«call.target.name»_«call.environment.name»_undeploy.sh «user» «call.target.name» "+__id_execution);
							Map<String, String> __env_undeploy_«call.target.name» = __processBuilder_undeploy_«call.target.name».environment();
							
							__processBuilder_undeploy_«call.target.name».redirectOutput(ProcessBuilder.Redirect.INHERIT);
							__processBuilder_undeploy_«call.target.name».redirectError(ProcessBuilder.Redirect.INHERIT);
							String __path_env_undeploy_«call.target.name» = __env_undeploy_«call.target.name».get("PATH");
							if (!__path_env_undeploy_«call.target.name».contains("/usr/local/bin")) {
								 __env_undeploy_«call.target.name».put("PATH", __path_env_undeploy_«call.target.name»+":/usr/local/bin");
							}
							Process __p_undeploy_«call.target.name»;
							try {
								__p_undeploy_«call.target.name»= __processBuilder_undeploy_«call.target.name».start();
								__p_undeploy_«call.target.name».waitFor();
								if(__p_undeploy_«call.target.name».exitValue()!=0){
									System.out.println("Error in «call.target.name»_«call.environment.name»_undeploy.sh ");
									System.exit(1);
								}
							} catch (Exception e) {
								e.printStackTrace();
							}	
							'''			
					}
					case "azure":{
						return '''
						«cred».clear("./flyapp«cred»"+__id_execution,"./.env");
						'''
					}
				}

					
			}else
				return ''''''
		}
		
		def deployFlyFunctionOnCloud(FlyFunctionCall call) {
			var environment = (call.environment.right as DeclarationObject).features.get(0).value_s
			var env_name = call.environment.name
			println(deployed_function)
			if (!deployed_function.get(environment).contains(call.target.name)){
				deployed_function.get(environment).add(call.target.name)
				
				if(environment.contains("aws")){
					var user = (call.environment.right as DeclarationObject).features.get(1).value_s
					var cred = call.environment.name
					return '''
						__termination_deploy_on_cloud.add(__thread_pool_deploy_on_cloud.submit( new Callable<Object> (){
							@Override
							public Object call() throws Exception{
								Runtime.getRuntime().exec("chmod +x src-gen/«call.target.name»_«env_name»_deploy.sh");
								ProcessBuilder __processBuilder_deploy_«call.target.name» = new ProcessBuilder("/bin/bash", "-c", "src-gen/«call.target.name»_«env_name»_deploy.sh «user» «call.target.name» "+__id_execution);
								__processBuilder_deploy_«call.target.name».redirectOutput(ProcessBuilder.Redirect.INHERIT);
								Map<String, String> __env_deploy_«call.target.name» = __processBuilder_deploy_«call.target.name».environment();
								__processBuilder_deploy_«call.target.name».redirectError(ProcessBuilder.Redirect.INHERIT);
								String __path_env_deploy_«call.target.name» = __env_deploy_«call.target.name».get("PATH");
								if (!__path_env_deploy_«call.target.name».contains("/usr/local/bin")) {
									 __env_deploy_«call.target.name».put("PATH", __path_env_deploy_«call.target.name»+":/usr/local/bin");
								}
								Process __p_deploy_«call.target.name»;
								try {
									__p_deploy_«call.target.name» = __processBuilder_deploy_«call.target.name».start();
									__p_deploy_«call.target.name».waitFor();
									if(__p_deploy_«call.target.name».exitValue()!=0){
										System.out.println("Error in «call.target.name»_«env_name»_deploy.sh ");
										System.exit(1);
									}
								} catch (Exception e) {
									e.printStackTrace();
								}	
								return null;
							}
						}));
						
						'''	
				}else if((call.environment.right as DeclarationObject).features.get(0).value_s.equals("azure")) {
					return '''
						__termination_deploy_on_cloud.add(__thread_pool_deploy_on_cloud.submit( new Callable<Object> (){
							@Override
							public Object call() throws Exception{
								«call.environment.name».publishFunction("«call.target.name»","src-gen/«call.target.name»_«env_name»_deploy.sh");
								return null;
							}
						}));
						'''	
				}
			}
			else 
			return''''''
		}
		
	def generateExpression(Expression element, String scope) {
		'''
			«IF element  instanceof VariableDeclaration»
				«IF element.right instanceof DeclarationObject»
					«IF ! list_environment.contains((element.right as DeclarationObject).features.get(0).value_s) &&
					!(element.right as DeclarationObject).features.get(0).value_s.equals("channel")	»
						«generateVariableDeclaration(element,scope)»
					«ENDIF»		
				«ELSE»
					«generateVariableDeclaration(element,scope)»
				«ENDIF»
			«ENDIF»
			
			«IF element instanceof Assignment»
				«generateAssignment(element,scope)»
			«ENDIF»
			«IF element instanceof PrintExpression»
				«generatePrintExpression(element,scope)»
			«ENDIF»
			«IF element instanceof IfExpression»
				«generateIfExpression(element,scope)»
			«ENDIF»
			«IF element instanceof ForExpression»
				«generateForExpression(element,scope)»
			«ENDIF»
			«IF element instanceof WhileExpression»
				«generateWhileExpression(element,scope)»
			«ENDIF»
			«IF element instanceof ChannelSend»
				«generateChannelSend(element,scope)»;
			«ENDIF»
			«IF element instanceof ChannelReceive»
				«generateChannelReceive(element,scope)»;
			«ENDIF»
			«IF element instanceof FlyFunctionCall»
				«generateFlyFunctionCall(element,scope)»
			«ENDIF»
			«IF element instanceof LocalFunctionCall»
				«generateLocalFunctionCall(element,scope)»
			«ENDIF»
			«IF element instanceof FunctionReturn»
				«generateFunctionReturn(element,scope)»
			«ENDIF»
			«IF element instanceof BlockExpression»
				«generateBlockExpression(element,scope)»
			«ENDIF»
			«IF element instanceof VariableFunction»
				«generateVariableFunction(element,true,scope)»
			«ENDIF»
			«IF element instanceof SortExpression»
				«generateSortExpression(element,scope)»
			«ENDIF»
			«IF element instanceof PostfixOperation»
				«generatePostfixOperation(element,scope)»
			«ENDIF»
		'''
	}
		
		def generatePostfixOperation(PostfixOperation exp, String scope) {
			return '''
				«generateArithmeticExpression(exp.variable,scope)»«exp.feature»;
			'''
		}

	def generateSortExpression(SortExpression exp, String scope) {
		return '''
			ArrayList<Entry<Object,Object>> __sup = new ArrayList<Entry<Object,Object>>(«exp.target.name».entrySet());
			Collections.sort(__sup, new Comparator<Entry<Object,Object>>() {
			
						public int compare(Entry<Object,Object> o1, Entry<Object,Object> o2) {
							// TODO Auto-generated method stub
							if(o1.getValue() instanceof Integer && o2.getValue() instanceof Integer)
								return Integer.compare((Integer) o1.getValue(),(Integer) o2.getValue());
							else if(o1.getValue() instanceof Double && o2.getValue() instanceof Double)
								return Double.compare((Double) o1.getValue(), (Double) o2.getValue());
							else return 0;
						}
						
					});
					
			«exp.target.name».clear();
			
			«IF exp.type.equals("desc")»
				Collections.reverse(__sup);
			«ENDIF»
			
			for (int __i=0; __i<__sup.size();__i++) {
				«exp.target.name».put(""+__i, __sup.get(__i).getValue());
			}
		'''
	}

	// methods for Variable Declaration 
	def generateVariableDeclaration(VariableDeclaration dec, String scope) {
		if (dec.typeobject.equals('var')) { // var declaration
			println(dec)
			println(dec.right)
			if (dec.right instanceof DeclarationObject){ 
				var type = (dec.right as DeclarationObject).features.get(0).value_s
				switch (type) {
					case "smp": {
						return '''
							static ExecutorService __thread_pool_«dec.name» = Executors.newFixedThreadPool(«((dec.right as DeclarationObject).features.get(1)).value_t»);
							'''
					}
					case "vm-cluster": {
						//Use all threads available in each VM
						return '''
							static ExecutorService __thread_pool_«dec.name» = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
							'''
					}
					case "aws-debug":{
						var access_id_key = ((dec.right as DeclarationObject).features.get(2) as DeclarationFeature).value_s
						var secret_access_key = ((dec.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s
						var region = ((dec.right as DeclarationObject).features.get(4) as DeclarationFeature).value_s
						return '''
							
							static BasicAWSCredentials «dec.name» = new BasicAWSCredentials("«access_id_key»", "«secret_access_key»");
							
							static AmazonSQS __sqs_«dec.name»  = AmazonSQSClient.builder()
								.withCredentials(new AWSStaticCredentialsProvider(«dec.name»))
								.withEndpointConfiguration(new EndpointConfiguration("http://192.168.0.1:4576", "us-east-1"))
								.build();
							
							static AmazonIdentityManagement __iam_«dec.name» = AmazonIdentityManagementClientBuilder.standard()
								.withCredentials(new AWSStaticCredentialsProvider(«dec.name»))
								.withEndpointConfiguration(new EndpointConfiguration("http://192.168.0.1:4593", "us-east-1"))
								.build();
								
							static AWSLambda __lambda_«dec.name» = AWSLambdaClientBuilder.standard()
								.withCredentials(new AWSStaticCredentialsProvider(«dec.name»))
								.withEndpointConfiguration(new EndpointConfiguration("http://192.168.0.1:4574", "us-east-1"))
								.build();
								
							static AmazonS3 __s3_«dec.name» = AmazonS3Client.builder()
								.withCredentials(new AWSStaticCredentialsProvider(«dec.name»))
								.withEndpointConfiguration(new EndpointConfiguration("http://192.168.0.1:4572", "us-east-1"))
								.withPathStyleAccessEnabled(true)
								.build();
						'''
					}
					case "aws": {
						var access_id_key = ((dec.right as DeclarationObject).features.get(2) as DeclarationFeature).value_s
						var secret_access_key = ((dec.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s
						var region = ((dec.right as DeclarationObject).features.get(4) as DeclarationFeature).value_s
						return '''
							
							static BasicAWSCredentials «dec.name» = new BasicAWSCredentials("«access_id_key»", "«secret_access_key»");
							
							static AmazonSQS __sqs_«dec.name»  = AmazonSQSClient.builder()
								.withCredentials(new AWSStaticCredentialsProvider(«dec.name»))
								.withRegion("«region»")
								.build();
							
							static AmazonIdentityManagement __iam_«dec.name» = AmazonIdentityManagementClientBuilder.standard()
								.withCredentials(new AWSStaticCredentialsProvider(«dec.name»))
								.withRegion("«region»")
								.build();
								
							static AWSLambda __lambda_«dec.name» = AWSLambdaClientBuilder.standard()
								.withCredentials(new AWSStaticCredentialsProvider(«dec.name»))
								.withRegion("«region»")
								.build();
								
							static AmazonS3 __s3_«dec.name» = AmazonS3Client.builder()
								.withCredentials(new AWSStaticCredentialsProvider(«dec.name»))
								.withRegion("«region»")
								.build();
								
							static AmazonRDS __rds_«dec.name» = AmazonRDSClient.builder()
								.withCredentials(new AWSStaticCredentialsProvider(«dec.name»))
								.withRegion("«region»")
								.build();
						'''
					}
					case "azure":{
						var client_id = ((dec.right as DeclarationObject).features.get(1) as DeclarationFeature).value_s
						var tenant_id = ((dec.right as DeclarationObject).features.get(2) as DeclarationFeature).value_s
						var secret_key = ((dec.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s
						var subscription_id = ((dec.right as DeclarationObject).features.get(4) as DeclarationFeature).value_s
						var language = ((dec.right as DeclarationObject).features.get(6) as DeclarationFeature).value_s
						var region = ((dec.right as DeclarationObject).features.get(5) as DeclarationFeature).value_s
						return '''
						static AzureClient «dec.name» = null;
						'''
					}
					case "random":{
						return '''
							Random «dec.name» = new Random();
							'''
					}
					case "channel":{
						var env = (dec.environment.get(0).right as DeclarationObject).features.get(0).value_s
						return '''
							static LinkedTransferQueue<Object> «dec.name» = new LinkedTransferQueue<Object>();
							«IF ! env.equals("smp")»
								static Boolean __wait_on_«dec.name» = true;
							«ENDIF»
							«IF (dec.environment.get(0).right as DeclarationObject).features.length == 3 »
								static ServerSocket __socket_server_«dec.name»;
							«ENDIF»
						'''
					}
					case "file":{ //TO-D0: add support to directory
						
						typeSystem.get(scope).put(dec.name, "File")
						if((dec.right as DeclarationObject).features.get(1).value_f == null){
							var path = (dec.right as DeclarationObject).features.get(1).value_s
							var tmp = path.split("/")
							var name = tmp.get(tmp.length-1)
							if(name.split(".").length!=2)
								typeSystem.get(scope).put(dec.name, "Directory")
							return '''
								 «IF dec.onCloud»
								 	«deployFileOnCloud(dec,id_execution)»
								 «ELSE»
								 	File «dec.name» = new File("«path»");
								 «ENDIF»
							'''	
						}else{
							return '''
								«IF dec.onCloud»
								 	«deployFileOnCloud(dec,id_execution)»
								 «ELSE»
								 	File «dec.name» = new File(«(dec.right as DeclarationObject).features.get(1).value_f.name»);
								«ENDIF»
							'''
						}
						
					}
					case "dataframe":{
						var table_name = (dec.right as DeclarationObject).features.get(1).value_s
						var source = (dec.right as DeclarationObject).features.get(2)
						var separator = "";
						var header = "";
						var query = "";
						if(source.value_s.nullOrEmpty){
							if (((dec.right as DeclarationObject).features.size) > 3)
							query = (dec.right as DeclarationObject).features.get(3).value_s
						} else {
							if (((dec.right as DeclarationObject).features.size) > 3)
							separator = (dec.right as DeclarationObject).features.get(3).value_s
							if (((dec.right as DeclarationObject).features.size) > 4)
							header = (dec.right as DeclarationObject).features.get(4).value_s
						}	
						
						typeSystem.get(scope).put(dec.name, "Table")
						if(source.value_s.nullOrEmpty){
							return '''
							«IF dec.onCloud»
							«deployFileOnCloud(dec,id_execution)»
							«ELSE»
							Table «dec.name» = Table.read().db(
							«source.value_f.name».prepareStatement(
							«IF !query.nullOrEmpty»
								"«query»"
							«ELSE»
								"SELECT * FROM «table_name»" «ENDIF» 
							).executeQuery());
							«ENDIF»
							'''
						}else{
							var region = "";
							var uri = "";
							if (dec.onCloud && ! (source.value_s.contains("https://"))){
								region = (dec.environment.get(0).right as DeclarationObject).features.get(4).value_s
								if(((dec.environment.get(0).right as DeclarationObject).features.get(0).value_s).equals("aws")){
									uri = '''"https://«name»"+__id_execution+".s3.«region».amazonaws.com/bucket-"+__id_execution+"/«source.value_s»"'''
								} else if(((dec.environment.get(0).right as DeclarationObject).features.get(0).value_s).equals("azure")){
									uri = '''"https://flysa"+__id_execution+".blob.core.windows.net/bucket-"+__id_execution+"/«source.value_s»"'''
								} else if(((dec.environment.get(0).right as DeclarationObject).features.get(0).value_s).equals("aws-debug")){
									uri = '''"https://«name»"+__id_execution+".s3.«region».amazonaws.com/bucket-"+__id_execution+"/«source.value_s»"'''
								} 
							} else{
									uri = '''"«source.value_s»"'''
							}	
							
							return '''
							Table «dec.name» = Table.read().csv(CsvReadOptions
								.builder(«uri»)
								.tableName("«table_name»")
								«IF !separator.nullOrEmpty»
								.separator('«separator»') «ENDIF»
								«IF !header.nullOrEmpty»
								.header(«header») «ENDIF»
							);
							'''
						}
					}
					case "sql":{
						if (dec.onCloud && (dec.environment.get(0).right as DeclarationObject).features.get(0).value_s.contains("aws")){
							var instance = ((dec.right as DeclarationObject).features.get(1) as DeclarationFeature).value_s
							var db_name = ((dec.right as DeclarationObject).features.get(2) as DeclarationFeature).value_s
							var user_name = ((dec.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s
							var password = ((dec.right as DeclarationObject).features.get(4) as DeclarationFeature).value_s
							return '''
								DescribeDBInstancesRequest __request_«dec.name» = new DescribeDBInstancesRequest().withDBInstanceIdentifier("«instance»");

								DescribeDBInstancesResult __response_«dec.name» = __rds_«dec.environment.get(0).name».describeDBInstances(__request_«dec.name»);

								List<DBInstance> __listInstance_«dec.name» = __response_«dec.name».getDBInstances();

								Endpoint __endpoint_«dec.name» = __listInstance_«dec.name».get(0).getEndpoint();
								
								Class.forName("com.mysql.jdbc.Driver").newInstance();
								Connection «dec.name» = DriverManager.getConnection("jdbc:mysql://" + __endpoint_«dec.name».getAddress() + "/«db_name»?user=«user_name»&password=«password»");
							'''	 					
						}else if (dec.onCloud && (dec.environment.get(0).right as DeclarationObject).features.get(0).value_s.contains("azure")){
							var resource_group = ((dec.right as DeclarationObject).features.get(1) as DeclarationFeature).value_s
							var instance = ((dec.right as DeclarationObject).features.get(2) as DeclarationFeature).value_s
							var db_name = ((dec.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s
							var user_name = ((dec.right as DeclarationObject).features.get(4) as DeclarationFeature).value_s
							var password = ((dec.right as DeclarationObject).features.get(5) as DeclarationFeature).value_s 
							return '''
								
								Class.forName("com.mysql.jdbc.Driver").newInstance();
								Connection «dec.name» = DriverManager.getConnection("jdbc:mysql://" + «dec.environment.get(0).name».getDBEndpoint("«resource_group»", "«instance»")
									+ "/«db_name»?useSSL=true&requireSSL=false&user=«user_name»&password=«password»");

							'''	 					
						} else {
							var db_name = ((dec.right as DeclarationObject).features.get(1) as DeclarationFeature).value_s
							var user_name = ((dec.right as DeclarationObject).features.get(2) as DeclarationFeature).value_s
							var password = ((dec.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s
							var endpoint = ""
							if (((dec.right as DeclarationObject).features.size) > 4)
								endpoint = (dec.right as DeclarationObject).features.get(4).value_s
							else endpoint = "localhost"
							return '''
							Class.forName("com.mysql.jdbc.Driver").newInstance();
							Connection «dec.name» = DriverManager.getConnection("jdbc:mysql://«endpoint»/«db_name»?user=«user_name»&password=«password»");
							'''	 
						}
						
					}
					case "query":{
						var query_type = ((dec.right as DeclarationObject).features.get(1) as DeclarationFeature).value_s
						if (query_type.equals("update")){
							typeSystem.get(scope).put(dec.name, "int")
						}else if (query_type.equals("value")){
							typeSystem.get(scope).put(dec.name, "Table")
						} else {
							typeSystem.get(scope).put(dec.name, "Table")
						}
						var connection = ((dec.right as DeclarationObject).features.get(2) as DeclarationFeature).value_f.name
						return '''
						PreparedStatement «dec.name» = «connection».prepareStatement(
						«IF 
							((dec.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s.nullOrEmpty
						»
						«((dec.right as DeclarationObject).features.get(3) as DeclarationFeature).value_f.name»
						« ELSE » 
							"«((dec.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s»"
						«ENDIF»
						);
						'''	 
					}
					default: {
						return ''''''
					}
				}
			} else if (dec.right instanceof NameObjectDef) { 
				typeSystem.get(scope).put(dec.name, "HashMap")
				var s = '''HashMap<Object,Object> «dec.name» = new HashMap<Object,Object>();
				'''
				var i = 0;
				for (f : (dec.right as NameObjectDef).features) {
					if (f.feature != null) {
						typeSystem.get(scope).put(dec.name + "." + f.feature,
							valuateArithmeticExpression(f.value, scope))
						s = s + '''«dec.name».put("«f.feature»",«generateArithmeticExpression(f.value,scope)»);
						'''
					} else {
						typeSystem.get(scope).put(dec.name + "[" + i + "]", valuateArithmeticExpression(f.value, scope))
						s = s + '''«dec.name».put(«i»,«generateArithmeticExpression(f.value,scope)»);
						'''
						i++
					}

				}
				return s
			} else if(dec.right instanceof ArrayDefinition){
				var type_decl = (dec.right as ArrayDefinition).type
				var real_type = ""
				if(type_decl.equals("Integer")){
					real_type = "int"
				}else if(type_decl.equals("Double")){
					real_type = "double"
				}else if(type_decl.equals("String")){
					real_type = "String"
				}
				if((dec.right as ArrayDefinition).indexes.length==1){ //mono-dimensional
					typeSystem.get(scope).put(dec.name, "Array_"+type_decl)
					var array_len = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(0).value,scope)
					var s = '''«real_type»[] «dec.name» = new «real_type»[«array_len»];'''
					return s
				} else if((dec.right as ArrayDefinition).indexes.length==2){ //bi-dimensional
					var row = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(0).value,scope)
					var col = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(1).value,scope)
					typeSystem.get(scope).put(dec.name, "Matrix_"+type_decl+"_"+col)
					
					var s = '''«real_type»[][] «dec.name» = new «real_type»[«row»][«col»];'''
					return s
				} else if ((dec.right as ArrayDefinition).indexes.length==3) { //three-dimensional
					var row = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(0).value,scope)
					var col = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(1).value,scope)
					var dep = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(2).value,scope)
					typeSystem.get(scope).put(dec.name, "Matrix_"+type_decl+"_"+col+"_"+dep)
					var s = '''«real_type»[][][] «dec.name» = new «real_type»[«row»][«col»][«dep»];'''
					return s
				}
				
				
			}else if(dec.right instanceof ArrayInit){
			
				if(((dec.right as ArrayInit).values.get(0) instanceof NumberLiteral) ||
					((dec.right as ArrayInit).values.get(0) instanceof StringLiteral) ||
					((dec.right as ArrayInit).values.get(0) instanceof FloatLiteral)
				){ //array init
					var real_type = valuateArithmeticExpression((dec.right as ArrayInit).values.get(0) as ArithmeticExpression,scope)

					typeSystem.get(scope).put(dec.name,"Array_"+real_type)
					return '''
						«real_type» [] «dec.name» = {«FOR e: (dec.right as ArrayInit).values»«generateArithmeticExpression(e as ArithmeticExpression,scope)»«IF e != (dec.right as ArrayInit).values.last »,«ENDIF»«ENDFOR»};
					'''
				} else if ((dec.right as ArrayInit).values.get(0) instanceof ArrayValue){ //matrix 2d
					if(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof NumberLiteral ||
						((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof StringLiteral ||
						((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof FloatLiteral){
						var real_type = valuateArithmeticExpression(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArithmeticExpression,scope)
						var col = (((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.length
						typeSystem.get(scope).put(dec.name,"Matrix_"+real_type+"_"+col)
						var ret = '''«real_type» [][] «dec.name» = {'''
						for (e : (dec.right as ArrayInit).values){
							ret+='''{'''
							for(e1: (e as ArrayValue).values){
								ret+=generateArithmeticExpression(e1 as ArithmeticExpression,scope)
								if(e1!= (e as ArrayValue).values.last){
									ret+=''','''
								}
							}
							ret+='''}'''
							if (e !=  (dec.right as ArrayInit).values.last){
								ret+=''','''
							}
						}
						ret+='''};'''
						return ret
					}else if (((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof ArrayValue){ //matrix 3d
						if ((((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) instanceof NumberLiteral ||
							(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) instanceof StringLiteral ||
							(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) instanceof FloatLiteral ){
							var real_type = valuateArithmeticExpression((((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) as ArithmeticExpression,scope)
							var col = (((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.length
							var dep = ((((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.length
							typeSystem.get(scope).put(dec.name,"Matrix_"+real_type+"_"+col+"_"+dep)
							var ret = '''«real_type» [][][] «dec.name» = {'''
							for (e : (dec.right as ArrayInit).values){
								ret+='''{'''
								for(e1: (e as ArrayValue).values){
									ret+='''{'''
									for(e2: ((e1 as ArrayValue).values)){
										ret+=generateArithmeticExpression(e2 as ArithmeticExpression,scope)
										if(e2!= (e1 as ArrayValue).values.last){
											ret+=''','''
										}
									}
									ret+='''}'''
									if(e1!= (e as ArrayValue).values.last){
										ret+=''','''
									}
								}
								ret+='''}'''
								if (e !=  (dec.right as ArrayInit).values.last){
									ret+=''','''
								}
							}
							ret+='''};'''
							return ret	
						}
					}
					
				}
			} else if (dec.right instanceof FlyFunctionCall) {
				var s = '''
					«generateFlyFunctionCall(dec.right as FlyFunctionCall,scope)»
					__fly_async_invocation_id.put("«dec.name»", new HashMap<String,Integer>());
					__fly_async_invocation_id.get("«dec.name»").put("id",«func_ID-1»);
					__fly_async_invocation_id.get("«dec.name»").put("num_invocation",__num_proc_«(dec.right as FlyFunctionCall).target.name»_«func_ID-1»);
					final LinkedTransferQueue<Object> «dec.name» = new LinkedTransferQueue<Object>();
					
				'''
				typeSystem.get(scope).put(dec.name, "FutureList")
				return s
			} else if (dec.right instanceof ChannelReceive) {
				var s = '''
					Object «dec.name» = null;
					try{
						e = «generateChannelReceive(dec.right as ChannelReceive,scope)»
					}catch(InterruptedException e1){
						e1.printStackTrace();
					}
				'''
				return s
			} else if (dec.right instanceof VariableFunction) {
				/* 
				 * if ((dec.right as VariableFunction).feature.equals("split")) {
					typeSystem.get(scope).put(dec.name, "HashMap")
					return '''
						HashMap<Object,Object> «dec.name» = new HashMap<Object,Object>();
						int _«dec.name»_crt=0;
						for(String _«dec.name» : «(dec.right as VariableFunction).target.name».«(dec.right as VariableFunction).feature»(«generateArithmeticExpression((dec.right as VariableFunction).expressions.get(0),scope)»)){
							«dec.name».put(_«dec.name»_crt++,_«dec.name»);
						}
					'''
				} else {
				 */
					typeSystem.get(scope).put(dec.name,
						valuateArithmeticExpression(dec.right as VariableFunction, scope))
					return '''
						«valuateArithmeticExpression(dec.right as VariableFunction,scope)» «dec.name» = «generateArithmeticExpression(dec.right as VariableFunction,scope)»;
					'''
//				}

			} else if (dec.right instanceof CastExpression && ((dec.right as CastExpression).target instanceof ChannelReceive)){
					if((((dec.right as CastExpression).target as ChannelReceive).target.environment.get(0).right as DeclarationObject).features.get(0).value_s.contains("aws")	||
						(((dec.right as CastExpression).target as ChannelReceive).target.environment.get(0).right as DeclarationObject).features.get(0).value_s.contains("aws-debug") ||
						(((dec.right as CastExpression).target as ChannelReceive).target.environment.get(0).right as DeclarationObject).features.get(0).value_s.contains("azure") ||
						((((dec.right as CastExpression).target as ChannelReceive).target.environment.get(0).right as DeclarationObject).features.get(0).value_s.equals("smp") &&
							(((dec.right as CastExpression).target as ChannelReceive).target.environment.get(0).right as DeclarationObject).features.length==3
						)){
						if((dec.right as CastExpression).type.equals("Object")){
							typeSystem.get(scope).put(dec.name, "HashMap")
							return '''
								String __res_«((dec.right as CastExpression).target as ChannelReceive).target.name» = (String) «((dec.right as CastExpression).target as ChannelReceive).target.name».take();

								if (__res_result.contains("&quot;")) {
									String tmp = __res_result.replaceAll("&quot;", "\"");
									__res_result = tmp;
								}
																
								HashMap «dec.name» = new Gson().fromJson(__res_«((dec.right as CastExpression).target as ChannelReceive).target.name»,new TypeToken<HashMap<String, String>>() {}.getType());
							'''
						} else if ((dec.right as CastExpression).type.equals("Integer")) {
							typeSystem.get(scope).put(dec.name, "Integer")
							return '''
								String __res_«((dec.right as CastExpression).target as ChannelReceive).target.name» = (String) «((dec.right as CastExpression).target as ChannelReceive).target.name».take();
								int «dec.name» = Integer.parseInt(__res_«((dec.right as CastExpression).target as ChannelReceive).target.name»);
							'''
						}else if((dec.right as CastExpression).type.equals("Float")){
							typeSystem.get(scope).put(dec.name, "Double")
							return '''
								String __res_«((dec.right as CastExpression).target as ChannelReceive).target.name» = (String) «((dec.right as CastExpression).target as ChannelReceive).target.name».take();
								double «dec.name» = Double.parseDouble(__res_«((dec.right as CastExpression).target as ChannelReceive).target.name»);
							'''
						} else if((dec.right as CastExpression).type.equals("String")){
							typeSystem.get(scope).put(dec.name, "String")
							return '''
								String «dec.name» = (String) «((dec.right as CastExpression).target as ChannelReceive).target.name».take();
							'''
						} else if ((dec.right as CastExpression).type.equals("ArrayList")) {
							typeSystem.get(scope).put(dec.name, "ArrayList")
							return '''
								String __res_«((dec.right as CastExpression).target as ChannelReceive).target.name» = (String) «((dec.right as CastExpression).target as ChannelReceive).target.name».take();
								ArrayList «dec.name» = new Gson().fromJson(__res_«((dec.right as CastExpression).target as ChannelReceive).target.name»,new TypeToken<ArrayList<Object>>() {}.getType());
							'''
						}
					}else if((((dec.right as CastExpression).target as ChannelReceive).target.environment.get(0).right as DeclarationObject).features.get(0).value_s.equals("smp") ){ 
						typeSystem.get(scope).put(dec.name, valuateArithmeticExpression((dec.right as CastExpression),scope))
						println( typeSystem.get(scope))
						return '''
							«valuateArithmeticExpression((dec.right as CastExpression),scope)» «dec.name» = («valuateArithmeticExpression((dec.right as CastExpression),scope)») «((dec.right as CastExpression).target as ChannelReceive).target.name».take(); 
						'''
					}
				}else { // if is an Expression to evaluate
			
				typeSystem.get(scope).put(dec.name,
					valuateArithmeticExpression(dec.right as ArithmeticExpression, scope))
				println(dec.name + " --- " + typeSystem.get(scope).get(dec.name));
				println(typeSystem)
				return '''«valuateArithmeticExpression(dec.right as ArithmeticExpression,scope)» «dec.name» = «generateArithmeticExpression(dec.right as ArithmeticExpression,scope)»;'''
			}
		}
	}
	
	def generateConstantDeclaration(ConstantDeclaration dec, String scope) { // need to be checked and modified
		if (dec.right instanceof NameObjectDef){ 
				typeSystem.get(scope).put(dec.name, "HashMap")
				var s = '''static HashMap<Object,Object> «dec.name» = new HashMap<Object,Object>();
				'''
				var i = 0;
				for (f : (dec.right as NameObjectDef).features) {
					if (f.feature != null) {
						typeSystem.get(scope).put(dec.name + "." + f.feature,
							valuateArithmeticExpression(f.value, scope))
						//s = s + '''«dec.name».put("«f.feature»",«generateArithmeticExpression(f.value,scope)»);
						//'''
					} else {
						typeSystem.get(scope).put(dec.name + "[" + i + "]", valuateArithmeticExpression(f.value, scope))
						//s = s + '''«dec.name».put(«i»,«generateArithmeticExpression(f.value,scope)»);
						//'''
						i++
					}

				}
				return s			
		} else if(dec.right instanceof ArrayDefinition){
			var type_decl = (dec.right as ArrayDefinition).type
				var real_type = ""
				if(type_decl.equals("Integer")){
					real_type = "int"
				}else if(type_decl.equals("Double")){
					real_type = "double"
				}else if(type_decl.equals("String")){
					real_type = "String"
				}
				if((dec.right as ArrayDefinition).indexes.length==1){ //mono-dimensional
					typeSystem.get(scope).put(dec.name, "Array_"+type_decl)
					var array_len = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(0).value,scope)
					var s = '''static «real_type»[] «dec.name» = new «real_type»[«array_len»];'''
					return s
				} else if((dec.right as ArrayDefinition).indexes.length==2){ //bi-dimensional
					var row = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(0).value,scope)
					var col = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(1).value,scope)
					typeSystem.get(scope).put(dec.name, "Matrix_"+type_decl+"_"+col)
					
					var s = '''static «real_type»[][] «dec.name» = new «real_type»[«row»][«col»];'''
					return s
				} else if ((dec.right as ArrayDefinition).indexes.length==3) { //three-dimensional
					var row = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(0).value,scope)
					var col = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(1).value,scope)
					var dep = generateArithmeticExpression((dec.right as ArrayDefinition).indexes.get(2).value,scope)
					typeSystem.get(scope).put(dec.name, "Matrix_"+type_decl+"_"+col+"_"+dep)
					var s = '''static «real_type»[][][] «dec.name» = new «real_type»[«row»][«col»][«dep»];'''
					return s
				}
		}else if(dec.right instanceof ArrayInit){
			
				if(((dec.right as ArrayInit).values.get(0) instanceof NumberLiteral) ||
					((dec.right as ArrayInit).values.get(0) instanceof StringLiteral) ||
					((dec.right as ArrayInit).values.get(0) instanceof FloatLiteral)
				){ //array init
					var real_type = valuateArithmeticExpression((dec.right as ArrayInit).values.get(0) as ArithmeticExpression,scope)

					typeSystem.get(scope).put(dec.name,"Array_"+real_type)
					return '''
						final static «real_type» [] «dec.name» = {«FOR e: (dec.right as ArrayInit).values»«generateArithmeticExpression(e as ArithmeticExpression,scope)»«IF e != (dec.right as ArrayInit).values.last »,«ENDIF»«ENDFOR»};
					'''
				} else if ((dec.right as ArrayInit).values.get(0) instanceof ArrayValue){ //matrix 2d
					if(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof NumberLiteral ||
						((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof StringLiteral ||
						((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof FloatLiteral){
						var real_type = valuateArithmeticExpression(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArithmeticExpression,scope)
						var col = (((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.length
						typeSystem.get(scope).put(dec.name,"Matrix_"+real_type+"_"+col)
						var ret = '''final static «real_type» [][] «dec.name» = {'''
						for (e : (dec.right as ArrayInit).values){
							ret+='''{'''
							for(e1: (e as ArrayValue).values){
								ret+=generateArithmeticExpression(e1 as ArithmeticExpression,scope)
								if(e1!= (e as ArrayValue).values.last){
									ret+=''','''
								}
							}
							ret+='''}'''
							if (e !=  (dec.right as ArrayInit).values.last){
								ret+=''','''
							}
						}
						ret+='''};'''
						return ret
					}else if (((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) instanceof ArrayValue){ //matrix 3d
						if ((((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) instanceof NumberLiteral ||
							(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) instanceof StringLiteral ||
							(((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) instanceof FloatLiteral ){
							var real_type = valuateArithmeticExpression((((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) as ArithmeticExpression,scope)
							var col = (((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.length
							var dep = ((((dec.right as ArrayInit).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.get(0) as ArrayValue).values.length
							typeSystem.get(scope).put(dec.name,"Matrix_"+real_type+"_"+col+"_"+dep)
							var ret = '''final static «real_type» [][][] «dec.name» = {'''
							for (e : (dec.right as ArrayInit).values){
								ret+='''{'''
								for(e1: (e as ArrayValue).values){
									ret+='''{'''
									for(e2: ((e1 as ArrayValue).values)){
										ret+=generateArithmeticExpression(e2 as ArithmeticExpression,scope)
										if(e2!= (e1 as ArrayValue).values.last){
											ret+=''','''
										}
									}
									ret+='''}'''
									if(e1!= (e as ArrayValue).values.last){
										ret+=''','''
									}
								}
								ret+='''}'''
								if (e !=  (dec.right as ArrayInit).values.last){
									ret+=''','''
								}
							}
							ret+='''};'''
							return ret	
						}
					}
					
				}
			} else if(dec.right instanceof ArithmeticExpression){
			typeSystem.get(scope).put(dec.name,
					valuateArithmeticExpression(dec.right as ArithmeticExpression, scope))
				//println(dec.name + " --- " + typeSystem.get(scope).get(dec.name));
				return '''static «valuateArithmeticExpression(dec.right as ArithmeticExpression,scope)» «dec.name» = «generateArithmeticExpression(dec.right as ArithmeticExpression,scope)»;'''
			
		}
	}
		
	def initialiseConstant(ConstantDeclaration dec,String scope) {
		if (dec.right instanceof NameObjectDef){ 
			typeSystem.get(scope).put(dec.name, "HashMap")
			var s = '''
			'''
			var i = 0;
			for (f : (dec.right as NameObjectDef).features) {
				if (f.feature != null) {
					typeSystem.get(scope).put(dec.name + "." + f.feature,
						valuateArithmeticExpression(f.value, scope))
					s = s + '''«dec.name».put("«f.feature»",«generateArithmeticExpression(f.value,scope)»);
					'''
				} else {
					typeSystem.get(scope).put(dec.name + "[" + i + "]", valuateArithmeticExpression(f.value, scope))
					s = s + '''«dec.name».put(«i»,«generateArithmeticExpression(f.value,scope)»);
					'''
					i++
				}
			}
			return s			
		}
	}
	
	def deployFileOnCloud(VariableDeclaration dec,long id) {					
		var env = (dec.environment.get(0).right as DeclarationObject).features.get(0).value_s;
		if((dec.right as DeclarationObject).features.get(1).value_f != null){
			var path = (dec.right as DeclarationObject).features.get(1).value_f
			switch (env) {
				case "aws": 	
					return '''
						if(!__s3_«dec.environment.get(0).name».doesBucketExist("bucket-"+__id_execution)){
							__s3_«dec.environment.get(0).name».createBucket("bucket-"+__id_execution);
						}
						ListObjectsV2Result __result__listObjects_«id» = __s3_«dec.environment.get(0).name».listObjectsV2("bucket-"+__id_execution);
						List<S3ObjectSummary> __result_objects_«id» = __result__listObjects_«id».getObjectSummaries();
						Boolean __exists_«id»=false;
						for (S3ObjectSummary os: __result_objects_«id») {
						    if(os.getKey().equals(«path.name».substring(«path.name».lastIndexOf("/")+1))){
						    	__exists_«id» = true;
						    	break;
						    }
						}
						if(!__exists_«id»){
							PutObjectRequest __putObjectRequest = new PutObjectRequest("bucket-"+__id_execution, «path.name».substring(«path.name».lastIndexOf("/")+1) , new File(«path.name»));
							__putObjectRequest.setCannedAcl(CannedAccessControlList.PublicReadWrite);
							__s3_«dec.environment.get(0).name».putObject(__putObjectRequest);
						}
					'''
				case "aws-debug": 	
					return '''
						if(!__s3_«dec.environment.get(0).name».doesBucketExist("bucket-"+__id_execution)){
							__s3_«dec.environment.get(0).name».createBucket("bucket-"+__id_execution);
						}
						ListObjectsV2Result __result__listObjects_«id» = __s3_«dec.environment.get(0).name».listObjectsV2("bucket-"+__id_execution);
						List<S3ObjectSummary> __result_objects_«id» = __result__listObjects_«id».getObjectSummaries();
						Boolean __exists_«id»=false;
						for (S3ObjectSummary os: __result_objects_«id») {
						    if(os.getKey().equals(«path.name»)){
						    	__exists_«id» = true;
						    	break;
						    }
						}
						if(!__exists_«id»){
							PutObjectRequest __putObjectRequest = new PutObjectRequest("bucket-"+__id_execution, «path.name» , new File(«path.name»));
							__putObjectRequest.setCannedAcl(CannedAccessControlList.PublicReadWrite);
							__s3_«dec.environment.get(0).name».putObject(__putObjectRequest);
						}
					'''
				
				case "azure":
					return '''
						«dec.environment.get(0).name».uploadFile(new File(«path.name»));
					'''
				default: 
					return ''''''
				
				}
		}else{
			var path = (dec.right as DeclarationObject).features.get(1).value_s
			if( !(path.contains("https://") || path.contains("http://")) ){ // local 
				var name_file_ext = path.split("/").last
				var name_file = name_file_ext.substring(0,name_file_ext.indexOf('.')).replaceAll("-","_")
				switch (env) {
				case "aws": 	
					return '''
						ListObjectsV2Result __result__listObjects_«id» = __s3_«dec.environment.get(0).name».listObjectsV2("bucket-"+__id_execution);
						List<S3ObjectSummary> __result_objects_«id» = __result__listObjects_«id».getObjectSummaries();
						Boolean __exists_«name_file»_«id»=false;
						for (S3ObjectSummary os: __result_objects_«id») {
						    if(os.getKey().equals("«name_file_ext»")){
						    	__exists_«name_file»_«id» = true;
						    	break;
						    }
						}
						if(!__exists_«name_file»_«id»){
							PutObjectRequest __putObjectRequest = new PutObjectRequest("bucket-"+__id_execution, "«name_file_ext»" , new File("«path»"));
							__putObjectRequest.setCannedAcl(CannedAccessControlList.PublicReadWrite);
							__s3_«dec.environment.get(0).name».putObject(__putObjectRequest);
						}
					'''
				case "aws-debug": 	
					return '''
						ListObjectsV2Result __result__listObjects_«id» = __s3_«dec.environment.get(0).name».listObjectsV2("bucket-"+__id_execution);
						List<S3ObjectSummary> __result_objects_«id» = __result__listObjects_«id».getObjectSummaries();
						Boolean __exists_«name_file»_«id»=false;
						for (S3ObjectSummary os: __result_objects_«id») {
						    if(os.getKey().equals("«name_file_ext»")){
						    	__exists_«name_file»_«id» = true;
						    	break;
						    }
						}
						if(!__exists_«name_file»_«id»){
							PutObjectRequest __putObjectRequest = new PutObjectRequest("bucket-"+__id_execution, "«name_file_ext»" , new File("«path»"));
							__putObjectRequest.setCannedAcl(CannedAccessControlList.PublicReadWrite);
							__s3_«dec.environment.get(0).name».putObject(__putObjectRequest);
						}
					'''
				
				case "azure":
					return '''
						«dec.environment.get(0).name».uploadFile(new File("«path»"));
					'''
				default: 
					return ''''''
				
				}
			}
		}
	
	}	


	
	def setEnvironmentDeclarationInfo(VariableDeclaration dec){
		var env = ((dec.right as DeclarationObject).features.get(0)).value_s
		var dec_name = dec.name
		deployed_function.put(env,new ArrayList())
		if (env.equals("smp")){
			return '''
				__fly_environment.put("«dec_name»", new HashMap<String,Object>());
				__fly_environment.get("«dec_name»").put("nthread",«((dec.right as DeclarationObject).features.get(1)).value_t»);
				«IF (dec.right as DeclarationObject).features.length==3»
				__fly_environment.get("«dec_name»").put("language","«((dec.right as DeclarationObject).features.get(2)).value_s»");
				«ENDIF»
			'''
		}
		else if (env.contains("aws")) {
			var threads = ((dec.right as DeclarationObject).features.get(6) as DeclarationFeature).value_t
			var memory = ((dec.right as DeclarationObject).features.get(7) as DeclarationFeature).value_t
			var time = ((dec.right as DeclarationObject).features.get(8) as DeclarationFeature).value_t
			var language =  ((dec.right as DeclarationObject).features.get(5) as DeclarationFeature).value_s
			var profile =((dec.right as DeclarationObject).features.get(1) as DeclarationFeature).value_s
			var region=((dec.right as DeclarationObject).features.get(4) as DeclarationFeature).value_s
			return '''
				__fly_environment.put("«dec_name»", new HashMap<String,Object>());
				__fly_environment.get("«dec_name»").put("profile","«profile»");
				__fly_environment.get("«dec_name»").put("nthread",«threads»);
				__fly_environment.get("«dec_name»").put("memory",«memory»);
				__fly_environment.get("«dec_name»").put("time",«time»);
				__fly_environment.get("«dec_name»").put("language","«language»");
				__fly_environment.get("«dec_name»").put("region","«region»");
				
			'''
		}else if (env.equals("azure")){
			var threads = ((dec.right as DeclarationObject).features.get(7) as DeclarationFeature).value_t
//			var memory = ((dec.right as DeclarationObject).features.get(7) as DeclarationFeature).value_t
			var time = ((dec.right as DeclarationObject).features.get(8) as DeclarationFeature).value_t
			var language =  ((dec.right as DeclarationObject).features.get(6) as DeclarationFeature).value_s
			var profile =((dec.right as DeclarationObject).features.get(1) as DeclarationFeature).value_s
			var region = ((dec.right as DeclarationObject).features.get(5) as DeclarationFeature).value_s
			return '''
				__fly_environment.put("«dec_name»", new HashMap<String,Object>());
				__fly_environment.get("«dec_name»").put("profile","«profile»");
				__fly_environment.get("«dec_name»").put("nthread",«threads»);
«««				__fly_environment.get("«dec_name»").put("memory",«memory»);
				__fly_environment.get("«dec_name»").put("time",«time»);
				__fly_environment.get("«dec_name»").put("language","«language»");
				__fly_environment.get("«dec_name»").put("region","«region»");
			'''
		}else if (env.equals("vm-cluster")){
			var vm_type_size = ((dec.right as DeclarationObject).features.get(1) as DeclarationFeature).value_s
			var purchasing_option = ((dec.right as DeclarationObject).features.get(2) as DeclarationFeature).value_s
			var persistent = ((dec.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s
			var count = ((dec.right as DeclarationObject).features.get(4) as DeclarationFeature).value_t
			
			return '''
				__fly_environment.put("«dec_name»", new HashMap<String,Object>());
				__fly_environment.get("«dec_name»").put("purchasing_option","«purchasing_option»");
				__fly_environment.get("«dec_name»").put("vm_type_size","«vm_type_size»");
				__fly_environment.get("«dec_name»").put("persistent","«persistent»");
				__fly_environment.get("«dec_name»").put("count","«count»");	
			'''
		}
		
	}

	def generateChannelDeclarationForLanguage(VariableDeclaration dec){
		var env = ((dec.environment.get(0).right as DeclarationObject).features.get(0)).value_s
		if(env.equals("smp") && (dec.environment.get(0).right as DeclarationObject).features.length==3){
			return '''
				__socket_server_«dec.name»= new ServerSocket(9090);
				__thread_pool_«dec.environment.get(0).name».submit(new Runnable() {
							
					public void run() {
						try {
							while(true) {
				                Socket __socket = __socket_server_«dec.name».accept();
				                InputStreamReader __isr = new InputStreamReader(__socket.getInputStream());
				                BufferedReader __br = new BufferedReader(__isr);
				                String __response = __br.readLine();
				                __socket.close();
							    «dec.name».put(__response);
							}
						}catch (Exception e) {
							
						}
					}
				});
			'''
		}
		return ''''''
	}

	def generateChanelDeclarationForCloud(VariableDeclaration dec) {
		var env = ((dec.environment.get(0).right as DeclarationObject).features.get(0)).value_s
		var env_name = dec.environment.get(0).name
		var local_env = res.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
			filter[(right as DeclarationObject).features.get(0).value_s.equals("smp")].get(0)
		var local = local_env.name
		switch env {
			case "aws":
			return '''
				__sqs_«env_name».createQueue(new CreateQueueRequest("«dec.name»-"+__id_execution));
				
				for(int __i=0;__i< (Integer)__fly_environment.get("«local»").get("nthread");__i++){ 
					__thread_pool_«local».submit(new Callable<Object>() {
						@Override
						public Object call() throws Exception {
							while(__wait_on_«dec.name») {
								ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs_«env_name».getQueueUrl("«dec.name»-"+__id_execution).getQueueUrl()).
										withWaitTimeSeconds(1).withMaxNumberOfMessages(10);
								ReceiveMessageResult __res = __sqs_«env_name».receiveMessage(__recmsg);
								for(Message msg : __res.getMessages()) { 
									«dec.name».put(msg.getBody());
									__sqs_«env_name».deleteMessage(__sqs_«env_name».getQueueUrl("«dec.name»-"+__id_execution).getQueueUrl(), msg.getReceiptHandle());
								}
							}
							return null;
						}
					});
				}
			'''
			case "aws-debug":
			return '''
				__sqs_«env_name».createQueue(new CreateQueueRequest("«dec.name»-"+__id_execution));
				
				for(int __i=0;__i< (Integer)__fly_environment.get("«local»").get("nthread");__i++){ 
					__thread_pool_«local».submit(new Callable<Object>() {
						@Override
						public Object call() throws Exception {
							while(__wait_on_«dec.name») {
								ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs_«env_name».getQueueUrl("«dec.name»-"+__id_execution).getQueueUrl()).
										withWaitTimeSeconds(1).withMaxNumberOfMessages(10);
								ReceiveMessageResult __res = __sqs_«env_name».receiveMessage(__recmsg);
								for(Message msg : __res.getMessages()) { 
									«dec.name».put(msg.getBody());
									__sqs_«env_name».deleteMessage(__sqs_«env_name».getQueueUrl("«dec.name»-"+__id_execution).getQueueUrl(), msg.getReceiptHandle());
								}
							}
							return null;
						}
					});
				}
			'''
		case "azure":
			return '''
				«env_name».createQueue("«dec.name»-"+__id_execution);
				//for(int __i=0;__i< (Integer)__fly_environment.get("«local»").get("nthread");__i++){ 
					__thread_pool_«local».submit(new Callable<Object>() {
						@Override
						public Object call() throws Exception {
							while(__wait_on_«dec.name») {
								List<String> __recMsgs = «env_name».peeksFromQueue("«dec.name»-"+__id_execution,1);
								for(String msg : __recMsgs) { 
									«dec.name».put(msg);
								}
							}
							return null;
						}
					});
				//}
			'''
			}	
	}

		def generateTerminationQueue(FlyFunctionCall element) {
			var local_env = res.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
			filter[(right as DeclarationObject).features.get(0).value_s.equals("smp")].get(0)
			var local = local_env.name
			var env = (element.environment.right as DeclarationObject).features.get(0).value_s
			switch env {
				case "aws":
					return '''
						__sqs_«element.environment.name».createQueue(new CreateQueueRequest("termination-«element.target.name»-"+__id_execution));
						LinkedTransferQueue<String> __termination_«element.target.name»_ch  = new LinkedTransferQueue<String>();
						final String __termination_«element.target.name»_url = __sqs_«element.environment.name».getQueueUrl("termination-«element.target.name»-"+__id_execution).getQueueUrl();
						for(int __i=0;__i< (Integer)__fly_environment.get("«local»").get("nthread");__i++){ 
							__thread_pool_«local».submit(new Callable<Object>() {
								@Override
								public Object call() throws Exception {
									while(__wait_on_termination_«element.target.name») {
										ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__termination_«element.target.name»_url).
												withWaitTimeSeconds(1).withMaxNumberOfMessages(10);
										ReceiveMessageResult __res = __sqs_«element.environment.name».receiveMessage(__recmsg);
										for(Message msg : __res.getMessages()) { 
											__termination_«element.target.name»_ch.put(msg.getBody());
											__sqs_«element.environment.name».deleteMessage(__termination_«element.target.name»_url, msg.getReceiptHandle());
										}
									}
									return null;
								}
							});
						}
						'''
				case "aws-debug":
					return '''
						__sqs_«element.environment.name».createQueue(new CreateQueueRequest("termination-«element.target.name»-"+__id_execution));
						LinkedTransferQueue<String> __termination_«element.target.name»_ch  = new LinkedTransferQueue<String>();
						final String __termination_«element.target.name»_url = __sqs_«element.environment.name».getQueueUrl("termination-«element.target.name»-"+__id_execution).getQueueUrl();
						for(int __i=0;__i< (Integer)__fly_environment.get("«local»").get("nthread");__i++){ 
							__thread_pool_«local».submit(new Callable<Object>() {
								@Override
								public Object call() throws Exception {
									while(__wait_on_termination_«element.target.name») {
										ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__termination_«element.target.name»_url).
												withWaitTimeSeconds(1).withMaxNumberOfMessages(10);
										ReceiveMessageResult __res = __sqs_«element.environment.name».receiveMessage(__recmsg);
										for(Message msg : __res.getMessages()) { 
											__termination_«element.target.name»_ch.put(msg.getBody());
											__sqs_«element.environment.name».deleteMessage(__termination_«element.target.name»_url, msg.getReceiptHandle());
										}
									}
									return null;
								}
							});
						}
						'''
				case "azure":
					return '''
						«element.environment.name».createQueue("termination-«element.target.name»-"+__id_execution);
						LinkedTransferQueue<String> __termination_«element.target.name»_ch  = new LinkedTransferQueue<String>();
						__thread_pool_«local».submit(new Callable<Object>() {
							@Override
							public Object call() throws Exception {
								while(__wait_on_termination_«element.target.name») {
									List<String> __recMsgs = «element.environment.name».peeksFromQueue("termination-«element.target.name»-"+__id_execution,10);
									for(String msg : __recMsgs) { 
										__termination_«element.target.name»_ch.put(msg);
									}
								}
								return null;
							}
						});
					'''
			}
			
	}

	// methods for ArithmeticExpression
	def generateArithmeticExpression(ArithmeticExpression expression, String scope) {
		if (expression instanceof BinaryOperation) {
			if (expression.feature.equals("and"))
				return '''«generateArithmeticExpression(expression.left,scope)» && «generateArithmeticExpression(expression.right,scope)»'''
			else if (expression.feature.equals("or"))
				return '''«generateArithmeticExpression(expression.left,scope)» || «generateArithmeticExpression(expression.right,scope)»'''
			else
				return '''«generateArithmeticExpression(expression.left,scope)» «expression.feature» «generateArithmeticExpression(expression.right,scope)»'''
		} else if (expression instanceof UnaryOperation) {
			if(expression.feature.equals("not"))
				return '''!«generateArithmeticExpression(expression.operand,scope)»'''
			else
				return '''«expression.feature»«generateArithmeticExpression(expression.operand,scope)»'''
		} else if (expression instanceof ParenthesizedExpression) {
			return '''(«generateArithmeticExpression(expression.expression,scope)»)'''
		} else if (expression instanceof NumberLiteral) {
			return '''«expression.value»'''
		} else if (expression instanceof BooleanLiteral) {
			return '''«expression.value»'''
		} else if (expression instanceof StringLiteral) {
			return '''"«expression.value»"'''
		} else if (expression instanceof FloatLiteral) {
			return '''«expression.value»'''
		} else if(expression instanceof EnvironemtLiteral){
			return '''__environment'''
		}else if (expression instanceof VariableLiteral) {
			return '''«expression.variable.name»'''
		} else if (expression instanceof NameObject) {
			println(expression)
			if(expression.name instanceof VariableDeclaration && expression.name.right!=null && expression.name.right instanceof CastExpression){
				if((expression.name.right as CastExpression).type.equals("Object")){
					return '''«expression.name.name».get("«expression.value»")'''
				}
			}else if(expression.name instanceof VariableDeclaration && expression.name.right!=null && expression.name.right instanceof DeclarationObject && list_environment.contains((expression.name.right as DeclarationObject).features.get(0).value_s)){
				return '''__fly_environment.get(«expression.name.name»).get("«expression.value»")'''
			}
			else if (typeSystem.get(scope).get(expression.name.name + "." + expression.value) !== null) {
				return '''(«typeSystem.get(scope).get(expression.name.name+"."+expression.value)») «expression.name.name».get("«expression.value»")'''
			} else {
				return '''«expression.name.name».get("«expression.value»")'''
			}
		} else if (expression instanceof IndexObject) {
			
			if(typeSystem.get(scope).get(expression.name.name).contains("Array")){
				if(expression.indexes.get(0).value2 === null)
					return '''«expression.name.name»[«generateArithmeticExpression(expression.indexes.get(0).value,scope)»]'''
				else
					return '''Arrays.copyOfRange(«expression.name.name», «generateArithmeticExpression(expression.indexes.get(0).value,scope)», «generateArithmeticExpression(expression.indexes.get(0).value2,scope)»)'''
			} else if(typeSystem.get(scope).get(expression.name.name).contains("Matrix")){
				if(expression.indexes.length==2){
					if(expression.indexes.get(0).value2 === null && expression.indexes.get(1).value2 === null ){
						return '''«expression.name.name»[«generateArithmeticExpression(expression.indexes.get(0).value,scope)»][«generateArithmeticExpression(expression.indexes.get(1).value,scope)»]'''
					}else {
						return ''''''
					}
				}else{
					if(expression.indexes.get(0).value2 === null && expression.indexes.get(1).value2 === null && expression.indexes.get(2).value2 === null){
						return '''«expression.name.name»[«generateArithmeticExpression(expression.indexes.get(0).value,scope)»][«generateArithmeticExpression(expression.indexes.get(1).value,scope)»][«generateArithmeticExpression(expression.indexes.get(1).value,scope)»]'''
					}else{
						return ''''''
					}
				}
			} else {
				if (typeSystem.get(scope).get(expression.name.name + "[" + generateArithmeticExpression(expression.indexes.get(0).value,scope) + "]") !== null) {
					return '''(«typeSystem.get(scope).get(expression.name.name+"["+generateArithmeticExpression(expression.indexes.get(0).value,scope)+"]")») «expression.name.name».get(«generateArithmeticExpression(expression.indexes.get(0).value,scope)»)'''
				} else {
					if(typeSystem.get(scope).get(expression.name.name).equals("HashMap"))
						return '''«expression.name.name».get(«generateArithmeticExpression(expression.indexes.get(0).value,scope)»)'''
					else if(typeSystem.get(scope).get(typeSystem.get(scope).get(expression.name.name)).equals("Table")){
						return '''«typeSystem.get(scope).get(expression.name.name)».get(_«typeSystem.get(scope).get(expression.name.name)», «generateArithmeticExpression(expression.indexes.get(0).value,scope)»)'''
					}
				}
			}
		} else if (expression instanceof DatSingleObject) {
			return '''«expression.name.name».get(«generateArithmeticExpression(expression.value1,scope)»,«generateArithmeticExpression(expression.value2,scope)»)'''
		} else if (expression instanceof DatTableObject) {
		} else if (expression instanceof CastExpression) {
			if (expression.op.equals("as")) { // cast
//				if (expression.target instanceof ChannelReceive) {
//					var env_type = (((expression.target as ChannelReceive).target.environment as VariableDeclaration).
//						right as DeclarationObject).features.get(0).value_s
//					var env_name = ((expression.target as ChannelReceive).target.environment as VariableDeclaration).name
//					switch env_type {
//						case "aws":{
//							if (expression.type.equals("Integer")) {
//								return '''
//									ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs_«env_name».getQueueUrl("«(expression.target as ChannelReceive).target.name»"+__id_execution).getQueueUrl());
//									ReceiveMessageResult __res = __sqs_«env_name».receiveMessage(__recmsg);
//									while(__res.getMessages().size() == 0){
//										__res = __sqs_«env_name».receiveMessage(__recmsg);
//									}
//									Integer.parseInt(__res.getMessages().get(0).getBody());
//									__sqs_«env_name».deleteMessage(__sqs_«env_name».getQueueUrl("«(expression.target as ChannelReceive).target.name»"+__id_execution).getQueueUrl(),__res.getMessages().get(0).getReceiptHandle());
//								'''
//							} else if (expression.type.equals("Float")) {
//								return '''
//									ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs_«env_name».getQueueUrl("«(expression.target as ChannelReceive).target.name»"+__id_execution).getQueueUrl());
//									ReceiveMessageResult __res = __sqs_«env_name».receiveMessage(__recmsg);
//									while(__res.getMessages().size() == 0){
//									__res = __sqs_«env_name».receiveMessage(__recmsg);
//									}
//									Double.parseDouble(__res.getMessages().get(0).getBody());
//									__sqs_«env_name».deleteMessage(__sqs_«env_name».getQueueUrl("«(expression.target as ChannelReceive).target.name»"+__id_execution).getQueueUrl(),__res.getMessages().get(0).getReceiptHandle());
//								'''
//							}
//						}
//						case "azure":{
//							if(expression.type.equals("Integer")){
//								
//							}else if(expression.type.equals("Float")){
//								
//							}
//						}
//					}
//
//				}
				if (expression.type.equals("String")) {
					return '''(String) «generateArithmeticExpression(expression.target,scope)»'''
				}
				if (expression.type.equals("Integer")) {
		
					return '''(int)((«generateArithmeticExpression(expression.target,scope)» instanceof Short)? 
					new Integer((Short) «generateArithmeticExpression(expression.target,scope)»):(«generateArithmeticExpression(expression.target,scope)» instanceof String)?
					Integer.parseInt((String)«generateArithmeticExpression(expression.target,scope)») :(Integer) «generateArithmeticExpression(expression.target,scope)»)'''
				}
			
				if (expression.type.equals("Double")) {
					return '''(double)((«generateArithmeticExpression(expression.target,scope)» instanceof Float)? 
					new Double((Float) «generateArithmeticExpression(expression.target,scope)»): («generateArithmeticExpression(expression.target,scope)» instanceof String)? 
					Double.parseDouble((String)«generateArithmeticExpression(expression.target,scope)») :(Double) «generateArithmeticExpression(expression.target,scope)»)'''
				}
				if (expression.type.equals("Dat")) {
					return '''(Table) «generateArithmeticExpression(expression.target,scope)»'''
				}
				if (expression.type.equals("Date")) {
					return '''LocalDate.parse(«generateArithmeticExpression(expression.target,scope)»)'''
				}
				if (expression.type.equals("Object")) {
					return '''((HashMap<Object,Object>) «generateArithmeticExpression(expression.target,scope)»)'''
				}
			} else { // parsing
				if (expression.type.equals("Integer")) {
					return '''Integer.parseInt( «generateArithmeticExpression(expression.target,scope)».toString())'''

				}
				if (expression.type.equals("Double")) {
					return '''Double.parseDouble( «generateArithmeticExpression(expression.target,scope)».toString())'''
				}
			}

		} else if (expression instanceof MathFunction) {
			var s = ""
			if (expression.feature.equals("round")) {
				s += "(int) "
			}
			s += "Math." + expression.feature + "("
			for (exp : expression.expressions) {
				s += generateArithmeticExpression(exp, scope)
				if (exp != expression.expressions.last()) {
					s += ","
				}
			}
			s += ")"
			return s
		}else if(expression instanceof TimeFunction){
			if (expression.value != null){
				return '''( System.currentTimeMillis() - «expression.value.name» )'''
			} else {
				return '''System.currentTimeMillis()'''
			}
		} else if (expression instanceof VariableFunction) {
			return generateVariableFunction(expression, false, scope)
		} else if (expression instanceof ChannelReceive) {
			return generateChannelReceive(expression, scope)
		} else if (expression instanceof ChannelSend) {
			return generateChannelSend(expression, scope)
		} else if (expression instanceof LocalFunctionCall) {
			var s = generateLocalFunctionCall(expression, scope)
			return s.substring(0, s.length - 1)
		}
	}

	def generateVariableFunction(VariableFunction expression, Boolean t, String scope) {
		if (expression.target.right instanceof FlyFunctionCall) {
			var func = expression.target.right as FlyFunctionCall
//			var local = ( res.allContents.toIterable.filter(EnvironmentDeclaration)
//				.filter[(right as DeclarationObject).features.get(0).value_s.equals("smp")].get(0) as EnvironmentDeclaration).name
			var cred = func.environment.name
			var s = ""
			if ((func.environment.right as DeclarationObject).features.get(0).value_s.equals("smp")){
				var feature=""
				if(expression.feature.equals("wait")){
					feature="get"
				}else{
					feature=expression.feature
				}
				
				s += "for(Future _el :" + last_func_result + "){
							_el." +feature+ "("
				for (exp : expression.expressions) {
					s += generateArithmeticExpression(exp, scope)
					if (exp != expression.expressions.last()) {
						s += ","
					}
				}
				s += ");
						}"
			}else{
				var func_name = ((res.allContents.toIterable.filter(VariableDeclaration).filter[it.name==expression.target.name].get(0) as VariableDeclaration).right as FlyFunctionCall).target.name
				if(expression.feature.equals("wait")){
					s+='''
						__thread_pool_«cred».submit(new Callable<Object>() {
							
							@Override
							public Object call() throws Exception{
								int id_invocation = __fly_async_invocation_id.get("«expression.target.name»").get("id");
								while(true){
									ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs_«cred».getQueueUrl("termination-«func_name»-"+__id_execution+"-"+id_invocation).getQueueUrl()).
										withWaitTimeSeconds(1).withMaxNumberOfMessages(10);
									ReceiveMessageResult __res = __sqs_«cred».receiveMessage(__recmsg);
									for(Message msg : __res.getMessages()) { 
										«expression.target.name».put(msg.getBody());
										__sqs_«cred».deleteMessage(__sqs_«cred».getQueueUrl("termination-«func_name»-"+__id_execution+"-"+id_invocation).getQueueUrl(), msg.getReceiptHandle());
									}
								}
							}
							
						});
						
						while(«expression.target.name».size()!=__fly_async_invocation_id.get("«expression.target.name»").get("num_invocation")){
							
						}
					'''
				}
			}	

			return s
		}
		if (expression.target.right instanceof DeclarationObject) {
			var type = (expression.target.right as DeclarationObject).features.get(0).value_s
			switch (type){
				case "query":{
					if(expression.feature.equals("execute")){
						var queryType = (expression.target.right as DeclarationObject).features.get(1).value_s
						if (queryType.equals("update")){
							return '''«(expression.target as VariableDeclaration).name».executeUpdate();'''
						}else if (queryType.equals("value")){
							return '''Table.read().db(
									«(expression.target as VariableDeclaration).name».executeQuery()
									).printAll().replaceAll("[^\\d.]+|\\.(?!\\d)", "");'''
						} else {
							return '''Table.read().db(
									«(expression.target as VariableDeclaration).name».executeQuery()
									);'''
						}
					}
					
				}
				case "dataframe":{
					if(expression.feature.equals("exportHeader")){
						return '''
						«expression.target.name».write().csv(«generateArithmeticExpression(expression.expressions.get(0), scope)»);
					'''
					} else if(expression.feature.equals("export")){
						return '''
						«expression.target.name».write().csv(CsvWriteOptions.builder(«generateArithmeticExpression(expression.expressions.get(0), scope)»).header(false).build());					
					'''
					}
				}
				case "channel":{
					if(expression.feature.equals("close")){
						println("channel on "+((expression.target as VariableDeclaration).environment.get(0).right as DeclarationObject).features.get(0).value_s)
						return '''
							«IF !((expression.target as VariableDeclaration).environment.get(0).right as DeclarationObject).features.get(0).value_s.equals("smp") »
								__wait_on_«expression.target.name» = false;
							«ELSEIF ((expression.target as VariableDeclaration).environment.get(0).right as DeclarationObject).features.get(0).value_s.equals("smp") &&
							((expression.target as VariableDeclaration).environment.get(0).right as DeclarationObject).features.length==3»
								__socket_server_«expression.target.name».close();
							«ENDIF»
						'''
					}
				}
				default :{
					var s = expression.target.name + "." + expression.feature + "("
					for (exp : expression.expressions) {
						s += generateArithmeticExpression(exp, scope)
						if (exp != expression.expressions.last()) {
							s += ","
						}
					}
					s += ")"
					if (t) {
						s += ";"
					}
					return s
				}
			}
		}else if (expression.target.right instanceof ArrayInit ){
					
			if(((expression.target.right as ArrayInit).values.get(0) instanceof NumberLiteral) ||
					((expression.target.right as ArrayInit).values.get(0) instanceof StringLiteral) ||
					((expression.target.right as ArrayInit).values.get(0) instanceof FloatLiteral)
				){ //array mono-dimensional	
					if(expression.feature.equals("length")){
						var s = expression.target.name + "." + expression.feature
						if (t) {
							s += ";"
						}
						return s
					} else {
						var s = expression.target.name + "." + expression.feature + "("
						for (exp : expression.expressions) {
							s += generateArithmeticExpression(exp, scope)
							if (exp != expression.expressions.last()) {
								s += ","
							}
						}
						s += ")"
						if (t) {
							s += ";"
						}
						return s
					}

				} else if ((expression.target.right as ArrayInit).values.get(0) instanceof ArrayValue){ //matrix 2d
					if(expression.feature.equals("length")){ //num of rows
						var s = expression.target.name + "." + expression.feature
						if (t) {
							s += ";"
						}
						return s
					} else {
						var s = expression.target.name + "." + expression.feature + "("
						for (exp : expression.expressions) {
							s += generateArithmeticExpression(exp, scope)
							if (exp != expression.expressions.last()) {
								s += ","
							}
						}
						s += ")"
						if (t) {
							s += ";"
						}
						return s
					}	
				}
				
		} else if (expression.target instanceof VariableDeclaration &&
				(typeSystem.get(scope).get((expression.target as VariableDeclaration).name).contains("Array")
					|| typeSystem.get(scope).get((expression.target as VariableDeclaration).name).contains("Matrix"))) { //Array or Matrix variable
					if(expression.feature.equals("length")){
						var s = expression.target.name + "." + expression.feature
						if (t) {
							s += ";"
						}
						return s
					} else {
						var s = expression.target.name + "." + expression.feature + "("
						for (exp : expression.expressions) {
							s += generateArithmeticExpression(exp, scope)
							if (exp != expression.expressions.last()) {
								s += ","
							}
						}
						s += ")"
						if (t) {
							s += ";"
						}
						return s
					}
		}else{
			var s = expression.target.name + "." + expression.feature + "("
			for (exp : expression.expressions) {
				s += generateArithmeticExpression(exp, scope)
				if (exp != expression.expressions.last()) {
					s += ","
				}
			}
			s += ")"
			if (t) {
				s += ";"
			}
			return s
		}
	
	}

	// methods for statement
	def generateBlockExpression(BlockExpression exp, String scope) {
		'''
			{
				«FOR element : exp.expressions» 
					«generateExpression(element,scope)»
				«ENDFOR» 
			}
		'''
	}

	def generateFunctionReturn(FunctionReturn return1, String scope) {
		'''
			return «generateArithmeticExpression(return1.expression,scope)»;
		'''
	}

	def generateLocalFunctionCall(LocalFunctionCall call, String scope) {
		var s = call.target.name + "("
		if (call.input != null) {
			for (input : call.input.inputs) {
				s += generateArithmeticExpression(input, scope)
				if (input != call.input.inputs.last) {
					s += ","
				}
			}
		}
		s += ");"
		return s
	}

	def generateFlyFunctionCall(FlyFunctionCall call, String scope) {
		var env = ((call.environment.right as DeclarationObject).features.get(0)).value_s
		switch env {
			case "smp": return generateLocalFlyFunction(call, scope)
			case "aws": return generateAWSFlyFunctionCall(call, scope)
			case "aws-debug": return generateAWSFlyFunctionCall(call, scope)
			case "azure": return generateAzureFlyFunctionCall(call, scope)
			case "vm-cluster": return generateVMFlyFunction(call, scope)
		}
	}
	
	def generateVMFlyFunction(FlyFunctionCall call, String scope) {
		
		var local_env = res.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
			filter[(right as DeclarationObject).features.get(0).value_s.equals("smp")].get(0)
		var local = local_env.name
		
		var s = ''''''
		if ((call.input as FunctionInput).is_for_index) { // 'for 'keyword 
			s = '''
				final List<Future<Object>> «call.target.name»_«func_ID»_return = new ArrayList<Future<Object>>();
			'''
			if (call.isIsAsync && call.isIs_thenall) { // asynchronous call with thenall
				s += '''
					final AtomicInteger __count = new AtomicInteger(0);
				'''
			}

			if ((call.input as FunctionInput).f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name) !=
					null &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name).
					equals("HashMap")) { // f_index is a reference to an object
				if (call.isIsAsync && call.isIs_thenall) {
					s += '''
						final int __numThread = «generateArithmeticExpression((call.input as FunctionInput).f_index,scope)».keySet().size()-1;
					'''
				}
				s += '''
					for(Object key: «generateArithmeticExpression((call.input as FunctionInput).f_index,scope)».keySet()){
						final Object _el = «generateArithmeticExpression((call.input as FunctionInput).f_index,scope)».get(key);
						Future<Object> _f = __thread_pool_«call.environment.name».submit(new Callable<Object>(){
							
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								
								Object __ret = «call.target.name»(«IF call.target.parameters.length==1»_el«ENDIF»);
								«IF call.isIs_then»
									«call.then.name»();
								«ENDIF» 					
								«IF call.isIsAsync && call.isIs_thenall»
									if(__count.getAndIncrement()==__numThread){
											__asyncTermination.put("Termination");
									}
								«ENDIF» 	
								return __ret;
								}
							});
						«call.target.name»_«func_ID»_return.add(_f);
					}
				'''
			} else if ((call.input as FunctionInput).f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name) !=
					null &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name).
					equals("Table")) { // f_index is a reference to a Table
				s += '''
					final int __numThread = Runtime.getRuntime().availableProcessors();
					ArrayList<Table> __list_data_«call.target.name» = new ArrayList<Table>();
					for (int __i = 0; __i < __numThread; __i++) {
						__list_data_«call.target.name».add(«((call.input as FunctionInput).f_index as VariableLiteral).variable.name».emptyCopy());
					}
					for(int __i=0; __i<«generateArithmeticExpression((call.input as FunctionInput).f_index,scope)».rowCount();__i++) {
						__list_data_«call.target.name».get(__i%__numThread).addRow(__i,«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»);
					}
					«IF (local_env.right as DeclarationObject).features.length==3»
						final ServerSocket __server_«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»_data = new ServerSocket(9091,100);
					«ENDIF»					for(int __i=0; __i<__numThread;__i++) {
					    final int __index=__i;
					    «IF (local_env.right as DeclarationObject).features.length==3»
					    	final String __«((call.input as FunctionInput).f_index as VariableLiteral).variable.name» = __generateString(__list_data_«call.target.name».get(__index));
					    «ELSE»
					    	 final Table __«((call.input as FunctionInput).f_index as VariableLiteral).variable.name» =__list_data_«call.target.name».get(__index);
					    «ENDIF»
					    Future<Object> __f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
							public Object call() throws Exception {
								«IF (local_env.right as DeclarationObject).features.length==3»
									«IF (local_env.right as DeclarationObject).features.get(2).value_s.contains("python")»
										ProcessBuilder __processBuilder = new ProcessBuilder("python",new File("src-gen/«call.target.name».py").getAbsolutePath()«IF call.target.parameters.length==1»,__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»«ENDIF»); //for the moment listen on 9090	
									«ELSEIF (local_env.right as DeclarationObject).features.get(2).value_s.contains("nodejs") »
										ProcessBuilder __processBuilder = new ProcessBuilder("nodejs",new File("src-gen/«call.target.name».js").getAbsolutePath(),«IF call.target.parameters.length==1»,__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»«ENDIF»); //for the moment listen on 9090
									«ENDIF»
									Process __p;
									try {
										__p = __processBuilder.start();
										Socket __socket_data = __server_«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»_data.accept() ;
										OutputStreamWriter __socket_data_output = new OutputStreamWriter(__socket_data.getOutputStream());
										__socket_data_output.write(__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»);
										__socket_data_output.flush();
										__socket_data.close();
										__p.waitFor();
										if(__p.exitValue()!=0){
											System.out.println("Error in local execution of «call.target.name»");
											System.exit(1);
										}
									} catch (Exception e) {
										e.printStackTrace();
									}
									return null;
								«ELSE»
								Object __ret = «call.target.name»(«IF call.target.parameters.length==1»__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»«ENDIF»);
								«IF call.isIs_then»
									«call.then.name»();
								«ENDIF»  		
								«IF call.isIsAsync && call.isIs_thenall»
									if(__count.getAndIncrement()==__numThread){
										__asyncTermination.put("Termination");
									}
								«ENDIF» 				
								return __ret;
								«ENDIF»
							}
							  			
						});
						«call.target.name»_«func_ID»_return.add(__f);
					}
				'''
			} else if ((call.input as FunctionInput).f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name) !=
					null &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name).
					equals("File")) { // f_index is a txt file	
					s+='''
						final int __numThread = Runtime.getRuntime().availableProcessors();
						ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name» = new ArrayList<StringBuilder>();
						«IF (local_env.right as DeclarationObject).features.length==3»
							final ServerSocket __server_«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»_data = new ServerSocket(9091,100);
						«ENDIF»
						int __temp_i_«(call.input.f_index as VariableLiteral).variable.name» = 0;
						Scanner __scanner_«(call.input.f_index as VariableLiteral).variable.name» = new Scanner(«(call.input.f_index as VariableLiteral).variable.name»);
						while(__scanner_«(call.input.f_index as VariableLiteral).variable.name».hasNextLine()){
							String __tmp_line = __scanner_«(call.input.f_index as VariableLiteral).variable.name».nextLine();
							try{
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append(__tmp_line);
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append("\n");
							}catch(Exception e){
								__temp_«(call.input.f_index as VariableLiteral).variable.name».add(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread,new StringBuilder());
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append(__tmp_line);
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append("\n");
							}
							__temp_i_«(call.input.f_index as VariableLiteral).variable.name»++;
						}
						for(int __i=0; __i<__numThread;__i++) {
						    final int __index=__i;
						    «IF (local_env.right as DeclarationObject).features.length==3»
						    	final String __«((call.input as FunctionInput).f_index as VariableLiteral).variable.name» = __generateString(__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__index).toString());
						    «ELSE»
						    	 final File __«((call.input as FunctionInput).f_index as VariableLiteral).variable.name» = new File("tmp"+__index);
						    	 FileUtils.writeStringToFile(__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»,__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__index).toString(),"UTF-8");
						    «ENDIF»
						    Future<Object> __f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
								public Object call() throws Exception {
									«IF (local_env.right as DeclarationObject).features.length==3»
										«IF (local_env.right as DeclarationObject).features.get(2).value_s.contains("python")»
											ProcessBuilder __processBuilder = new ProcessBuilder("python3",new File("src-gen/«call.target.name».py").getAbsolutePath()); //for the moment listen on 9090	
											__processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
										«ELSEIF (local_env.right as DeclarationObject).features.get(2).value_s.contains("nodejs") »
											ProcessBuilder __processBuilder = new ProcessBuilder("nodejs",new File("src-gen/«call.target.name».js").getAbsolutePath()); //for the moment listen on 9090
											__processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
										«ENDIF»
										Process __p;
										try {
											__p = __processBuilder.start();
											Socket __socket_data = __server_«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»_data.accept() ;
											OutputStreamWriter __socket_data_output = new OutputStreamWriter(__socket_data.getOutputStream());
											__socket_data_output.write(__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»);
											__socket_data_output.flush();
											__socket_data.close();
											__p.waitFor();
											if(__p.exitValue()!=0){
												System.out.println("Error in local execution of «call.target.name»");
												System.exit(1);
											}
										} catch (Exception e) {
											e.printStackTrace();
										}
										return null;
									«ELSE»
									Object __ret = «call.target.name»(«IF call.target.parameters.length==1»__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»«ENDIF»);
									«IF call.isIs_then»
										«call.then.name»();
									«ENDIF»  		
									«IF call.isIsAsync && call.isIs_thenall»
										if(__count.getAndIncrement()==__numThread){
											__asyncTermination.put("Termination");
										}
									«ENDIF» 				
									return __ret;
									«ENDIF»
								}
								  			
							});
							«call.target.name»_«func_ID»_return.add(__f);
						}
					'''
						
					} else if(call.input.f_index instanceof VariableLiteral &&
						typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).contains("Directory")){
						s+='''
						final int __numThread = Runtime.getRuntime().availableProcessors();
						ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name» = new ArrayList<StringBuilder>();
						«IF (local_env.right as DeclarationObject).features.length==3»
							final ServerSocket __server_«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»_data = new ServerSocket(9091,100);
						«ENDIF»						int __temp_i_«(call.input.f_index as VariableLiteral).variable.name» = 0;
						for(String s: «(call.input.f_index as VariableLiteral).variable.name».list()){
							try{
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append(«(call.input.f_index as VariableLiteral).variable.name».getAbsolutePath()+"/"+s);
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append("\n");
							}catch(Exception e){
								__temp_«(call.input.f_index as VariableLiteral).variable.name».add(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread,new StringBuilder());
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append(«(call.input.f_index as VariableLiteral).variable.name».getAbsolutePath()+"/"+s);
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append("\n");
							}
							__temp_i_«(call.input.f_index as VariableLiteral).variable.name»++;
						}
						for(int __i=0; __i<__numThread;__i++) {
							final int __index=__i;
							final String[] __«((call.input as FunctionInput).f_index as VariableLiteral).variable.name» = __temp_«(call.input.f_index as VariableLiteral).variable.name».get(__index).toString().split("\n");
							Future<Object> __f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
								public Object call() throws Exception {
									Object __ret = «call.target.name»(«IF call.target.parameters.length==1»__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»«ENDIF»);
									«IF call.isIs_then»
										«call.then.name»();
									«ENDIF»  		
									«IF call.isIsAsync && call.isIs_thenall»
										if(__count.getAndIncrement()==__numThread){
											__asyncTermination.put("Termination");
										}
									«ENDIF» 				
									return __ret;
								}
								  			
							});
							«call.target.name»_«func_ID»_return.add(__f);
						}
						'''
					} else if(call.input.f_index instanceof VariableLiteral &&
						typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).contains("Matrix")){
							if(call.input.split.equals("row")){ 
								s+='''
								int __num_proc_«call.target.name»_«func_ID»= Runtime.getRuntime().availableProcessors();
								ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new ArrayList<StringBuilder>();
								int __current_row_«(call.input.f_index as VariableLiteral).variable.name» = 0;
								int __rows = «(call.input.f_index as VariableLiteral).variable.name».length;
								for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
									int __n_rows =  __rows/__num_proc_«call.target.name»_«func_ID»;
									if(__rows%__num_proc_«call.target.name»_«func_ID» !=0 && __i< __rows%__num_proc_«call.target.name»_«func_ID» ){
										__n_rows++;
									}
									__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».add(__i,new StringBuilder());
									__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).append("{\"rows\":"+__n_rows+",\"cols\":"+«(call.input.f_index as VariableLiteral).variable.name»[0].length+",\"values\":[");
									for(int __j=__current_row_«(call.input.f_index as VariableLiteral).variable.name»; __j<__current_row_«(call.input.f_index as VariableLiteral).variable.name»+__n_rows;__j++){
										for(int __z = 0; __z<«(call.input.f_index as VariableLiteral).variable.name»[__j].length;__z++){
											__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).append("{\"x\":"+__j+",\"y\":"+__z+",\"value\":"+«(call.input.f_index as VariableLiteral).variable.name»[__j][__z]+"},");
										}
										if(__j == __current_row_«(call.input.f_index as VariableLiteral).variable.name» + __n_rows-1) {
											__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).deleteCharAt(__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).length()-1);
											__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).append("]}");
										}
									}
									__current_row_«(call.input.f_index as VariableLiteral).variable.name»+=__n_rows;
								}
								'''
						}
					} else { // f_index is a range
				if (call.isIsAsync && call.isIs_thenall) {
					s += '''
						final int __numThread = «((call.input as FunctionInput).f_index as RangeLiteral ).value2 - ((call.input as FunctionInput).f_index as RangeLiteral ).value1» - 1;
					'''
				}
				
				var value1 = if ((((call.input as FunctionInput).f_index as RangeLiteral ).value_l1) != null) ((call.input as FunctionInput).f_index as RangeLiteral ).value_l1.name  else ((call.input as FunctionInput).f_index as RangeLiteral ).value1  ;
				var value2 = if ((((call.input as FunctionInput).f_index as RangeLiteral ).value_l2) != null) ((call.input as FunctionInput).f_index as RangeLiteral ).value_l2.name  else ((call.input as FunctionInput).f_index as RangeLiteral ).value2  ;

				s += '''
					int dimPortion = Integer.parseInt(args[0]); //dimPortion
					// args[1], start index -- in range literal could be not used
					
					for(int _i=«value1»;_i<dimPortion;_i++){
						final int __i = _i;
						Future<Object> _f = __thread_pool_«call.environment.name».submit(new Callable<Object>(){
							
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								
								Object __ret = «call.target.name»(«IF call.target.parameters.length==1»__i«ENDIF»);
								«IF call.isIs_then»
									«call.then.name»();
								«ENDIF»

								«IF call.isIsAsync && call.isIs_thenall»
									if(__count.getAndIncrement()==__numThread){
										__asyncTermination.put("Termination");
									}
								«ENDIF»   						
								return __ret;
							}
						});
						«call.target.name»_«func_ID»_return.add(_f);
					}
				'''
			}
			last_func_result = call.target.name + "_" + func_ID + "_return"

			if (!call.isAsync) {
				s += '''
					for(Future _f : «call.target.name»_«func_ID»_return){
						try{
							_f.get();
						} catch(Exception e){
							e.printStackTrace();
						}
					}
					
				'''
			}

			if (call.isIsAsync && call.isIs_thenall) {
				s += '''
					Future<Object> __call = __thread_pool_«call.environment.name».submit(new Callable<Object>(){
											
							public Object call() throws Exception {
								//TODO Auto-generated method stub
										__asyncTermination.take();	
										«call.thenall.name»();
								return null;
							}
						});
						
				'''
			}

		} else { // no 'in' keyword
			var par_id = 0
			var par_1 = ''' 
			''' // parameter declaration
			var par_2 = '''
			''' // passing parameter 
			for (el : call.input.expressions) {
				par_1 += '''
					final Object _par_«par_id» = «generateArithmeticExpression(el,scope)»;
				'''
				par_2 += ''' _par_«par_id»	'''
				if (el != call.input.expressions.last) {
					par_2 += ''','''
				}
				par_id++
			}
			s += '''
				«par_1»
				Future<Object> _f_«func_ID» = __thread_pool_«call.environment.name».submit(new Callable<Object>(){
					
					public Object call() throws Exception {
						// TODO Auto-generated method stub
											
						return «call.target.name»(«par_2»);
					}
				});
			'''
			if (!call.isIsAsync) {
				s += '''
					try{
						_f_«func_ID».get();
						«IF call.is_then »
							«call.then.name»();
						«ENDIF»
					} catch(Exception e){
						e.printStackTrace();
					}
				'''
			}
		}
		func_ID++
		return s
	}

	def generateLocalFlyFunction(FlyFunctionCall call, String scope) {
		var s = ''''''
		if ((call.input as FunctionInput).is_for_index) { // 'for 'keyword 
			s = '''
				final List<Future<Object>> «call.target.name»_«func_ID»_return = new ArrayList<Future<Object>>();
			'''
			if (call.isIsAsync && call.isIs_thenall) { // asynchronous call with thenall
				s += '''
					final AtomicInteger __count = new AtomicInteger(0);
				'''
			}

			if ((call.input as FunctionInput).f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name) !=
					null &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name).
					equals("HashMap")) { // f_index is a reference to an object
				if (call.isIsAsync && call.isIs_thenall) {
					s += '''
						final int __numThread = «generateArithmeticExpression((call.input as FunctionInput).f_index,scope)».keySet().size()-1;
					'''
				}
				s += '''
					for(Object key: «generateArithmeticExpression((call.input as FunctionInput).f_index,scope)».keySet()){
						final Object _el = «generateArithmeticExpression((call.input as FunctionInput).f_index,scope)».get(key);
						Future<Object> _f = __thread_pool_«call.environment.name».submit(new Callable<Object>(){
							
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								
								Object __ret = «call.target.name»(«IF call.target.parameters.length==1»_el«ENDIF»);
								«IF call.isIs_then»
									«call.then.name»();
								«ENDIF» 					
								«IF call.isIsAsync && call.isIs_thenall»
									if(__count.getAndIncrement()==__numThread){
											__asyncTermination.put("Termination");
									}
								«ENDIF» 	
								return __ret;
								}
							});
						«call.target.name»_«func_ID»_return.add(_f);
					}
				'''
			} else if ((call.input as FunctionInput).f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name) !=
					null &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name).
					equals("Table")) { // f_index is a reference to a Table
				s += '''
					final int __numThread = (Integer) __fly_environment.get("«call.environment.name»").get("nthread");
					ArrayList<Table> __list_data_«call.target.name» = new ArrayList<Table>();
					for (int __i = 0; __i < __numThread; __i++) {
						__list_data_«call.target.name».add(«((call.input as FunctionInput).f_index as VariableLiteral).variable.name».emptyCopy());
					}
					for(int __i=0; __i<«generateArithmeticExpression((call.input as FunctionInput).f_index,scope)».rowCount();__i++) {
						__list_data_«call.target.name».get(__i%__numThread).addRow(__i,«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»);
					}
					«IF (call.environment.right as DeclarationObject).features.length==3»
						final ServerSocket __server_«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»_data = new ServerSocket(9091,100);
					«ENDIF»					for(int __i=0; __i<__numThread;__i++) {
					    final int __index=__i;
					    «IF (call.environment.right as DeclarationObject).features.length==3»
					    	final String __«((call.input as FunctionInput).f_index as VariableLiteral).variable.name» = __generateString(__list_data_«call.target.name».get(__index));
					    «ELSE»
					    	 final Table __«((call.input as FunctionInput).f_index as VariableLiteral).variable.name» =__list_data_«call.target.name».get(__index);
					    «ENDIF»
					    Future<Object> __f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
							public Object call() throws Exception {
								«IF (call.environment.right as DeclarationObject).features.length==3»
									«IF (call.environment.right as DeclarationObject).features.get(2).value_s.contains("python")»
										ProcessBuilder __processBuilder = new ProcessBuilder("python",new File("src-gen/«call.target.name».py").getAbsolutePath()«IF call.target.parameters.length==1»,__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»«ENDIF»); //for the moment listen on 9090	
									«ELSEIF (call.environment.right as DeclarationObject).features.get(2).value_s.contains("nodejs") »
										ProcessBuilder __processBuilder = new ProcessBuilder("nodejs",new File("src-gen/«call.target.name».js").getAbsolutePath(),«IF call.target.parameters.length==1»,__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»«ENDIF»); //for the moment listen on 9090
									«ENDIF»
									Process __p;
									try {
										__p = __processBuilder.start();
										Socket __socket_data = __server_«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»_data.accept() ;
										OutputStreamWriter __socket_data_output = new OutputStreamWriter(__socket_data.getOutputStream());
										__socket_data_output.write(__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»);
										__socket_data_output.flush();
										__socket_data.close();
										__p.waitFor();
										if(__p.exitValue()!=0){
											System.out.println("Error in local execution of «call.target.name»");
											System.exit(1);
										}
									} catch (Exception e) {
										e.printStackTrace();
									}
									return null;
								«ELSE»
								Object __ret = «call.target.name»(«IF call.target.parameters.length==1»__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»«ENDIF»);
								«IF call.isIs_then»
									«call.then.name»();
								«ENDIF»  		
								«IF call.isIsAsync && call.isIs_thenall»
									if(__count.getAndIncrement()==__numThread){
										__asyncTermination.put("Termination");
									}
								«ENDIF» 				
								return __ret;
								«ENDIF»
							}
							  			
						});
						«call.target.name»_«func_ID»_return.add(__f);
					}
				'''
			} else if ((call.input as FunctionInput).f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name) !=
					null &&
				typeSystem.get(scope).get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name).
					equals("File")) { // f_index is a txt file	
					s+='''
						final int __numThread = (Integer) __fly_environment.get("«call.environment.name»").get("nthread");
						ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name» = new ArrayList<StringBuilder>();
						«IF (call.environment.right as DeclarationObject).features.length==3»
							final ServerSocket __server_«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»_data = new ServerSocket(9091,100);
						«ENDIF»
						int __temp_i_«(call.input.f_index as VariableLiteral).variable.name» = 0;
						Scanner __scanner_«(call.input.f_index as VariableLiteral).variable.name» = new Scanner(«(call.input.f_index as VariableLiteral).variable.name»);
						while(__scanner_«(call.input.f_index as VariableLiteral).variable.name».hasNextLine()){
							String __tmp_line = __scanner_«(call.input.f_index as VariableLiteral).variable.name».nextLine();
							try{
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append(__tmp_line);
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append("\n");
							}catch(Exception e){
								__temp_«(call.input.f_index as VariableLiteral).variable.name».add(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread,new StringBuilder());
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append(__tmp_line);
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append("\n");
							}
							__temp_i_«(call.input.f_index as VariableLiteral).variable.name»++;
						}
						for(int __i=0; __i<__numThread;__i++) {
						    final int __index=__i;
						    «IF (call.environment.right as DeclarationObject).features.length==3»
						    	final String __«((call.input as FunctionInput).f_index as VariableLiteral).variable.name» = __generateString(__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__index).toString());
						    «ELSE»
						    	 final File __«((call.input as FunctionInput).f_index as VariableLiteral).variable.name» = new File("tmp"+__index);
						    	 FileUtils.writeStringToFile(__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»,__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__index).toString(),"UTF-8");
						    «ENDIF»
						    Future<Object> __f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
								public Object call() throws Exception {
									«IF (call.environment.right as DeclarationObject).features.length==3»
										«IF (call.environment.right as DeclarationObject).features.get(2).value_s.contains("python")»
											ProcessBuilder __processBuilder = new ProcessBuilder("python3",new File("src-gen/«call.target.name».py").getAbsolutePath()); //for the moment listen on 9090	
											__processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
										«ELSEIF (call.environment.right as DeclarationObject).features.get(2).value_s.contains("nodejs") »
											ProcessBuilder __processBuilder = new ProcessBuilder("nodejs",new File("src-gen/«call.target.name».js").getAbsolutePath()); //for the moment listen on 9090
											__processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
										«ENDIF»
										Process __p;
										try {
											__p = __processBuilder.start();
											Socket __socket_data = __server_«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»_data.accept() ;
											OutputStreamWriter __socket_data_output = new OutputStreamWriter(__socket_data.getOutputStream());
											__socket_data_output.write(__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»);
											__socket_data_output.flush();
											__socket_data.close();
											__p.waitFor();
											if(__p.exitValue()!=0){
												System.out.println("Error in local execution of «call.target.name»");
												System.exit(1);
											}
										} catch (Exception e) {
											e.printStackTrace();
										}
										return null;
									«ELSE»
									Object __ret = «call.target.name»(«IF call.target.parameters.length==1»__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»«ENDIF»);
									«IF call.isIs_then»
										«call.then.name»();
									«ENDIF»  		
									«IF call.isIsAsync && call.isIs_thenall»
										if(__count.getAndIncrement()==__numThread){
											__asyncTermination.put("Termination");
										}
									«ENDIF» 				
									return __ret;
									«ENDIF»
								}
								  			
							});
							«call.target.name»_«func_ID»_return.add(__f);
						}
					'''
						
					} else if(call.input.f_index instanceof VariableLiteral &&
						typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).contains("Directory")){
						s+='''
						final int __numThread = (Integer) __fly_environment.get("«call.environment.name»").get("nthread");
						ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name» = new ArrayList<StringBuilder>();
						«IF (call.environment.right as DeclarationObject).features.length==3»
							final ServerSocket __server_«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»_data = new ServerSocket(9091,100);
						«ENDIF»						int __temp_i_«(call.input.f_index as VariableLiteral).variable.name» = 0;
						for(String s: «(call.input.f_index as VariableLiteral).variable.name».list()){
							try{
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append(«(call.input.f_index as VariableLiteral).variable.name».getAbsolutePath()+"/"+s);
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append("\n");
							}catch(Exception e){
								__temp_«(call.input.f_index as VariableLiteral).variable.name».add(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread,new StringBuilder());
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append(«(call.input.f_index as VariableLiteral).variable.name».getAbsolutePath()+"/"+s);
								__temp_«(call.input.f_index as VariableLiteral).variable.name».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name» % __numThread).append("\n");
							}
							__temp_i_«(call.input.f_index as VariableLiteral).variable.name»++;
						}
						for(int __i=0; __i<__numThread;__i++) {
							final int __index=__i;
							final String[] __«((call.input as FunctionInput).f_index as VariableLiteral).variable.name» = __temp_«(call.input.f_index as VariableLiteral).variable.name».get(__index).toString().split("\n");
							Future<Object> __f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
								public Object call() throws Exception {
									Object __ret = «call.target.name»(«IF call.target.parameters.length==1»__«((call.input as FunctionInput).f_index as VariableLiteral).variable.name»«ENDIF»);
									«IF call.isIs_then»
										«call.then.name»();
									«ENDIF»  		
									«IF call.isIsAsync && call.isIs_thenall»
										if(__count.getAndIncrement()==__numThread){
											__asyncTermination.put("Termination");
										}
									«ENDIF» 				
									return __ret;
								}
								  			
							});
							«call.target.name»_«func_ID»_return.add(__f);
						}
						'''
					} else if(call.input.f_index instanceof VariableLiteral &&
						typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).contains("Array")){
							// array variable handling
							   s += '''
								int __num_proc_«call.target.name»_«func_ID»= (int) __fly_environment.get("«call.environment.name»").get("nthread");
								ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new ArrayList<StringBuilder>();
								int __arr_length = «(call.input.f_index as VariableLiteral).variable.name».length;
								
								int[] dimPortions = new int[__num_proc_«call.target.name»_«func_ID»]; 
								int[] displ = new int[__num_proc_«call.target.name»_«func_ID»]; 
								int offset = 0;
								
								for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
									dimPortions[__i] = (__arr_length / __num_proc_«call.target.name»_«func_ID») +
										((__i < (__arr_length % __num_proc_«call.target.name»_«func_ID»)) ? 1 : 0);
									displ[__i] = offset;								
									offset += dimPortions[__i];

									final int i = __i;
									Future<Object> _f = __thread_pool_«call.environment.name».submit(new Callable<Object>(){
												
										public Object call() throws Exception {
											
											Object __ret = «call.target.name»(Arrays.copyOfRange(«(call.input.f_index as VariableLiteral).variable.name»,displ[i], displ[i]+dimPortions[i] ));
											«IF call.isIs_then»
												«call.then.name»();
											«ENDIF»					
											return __ret;
										}
									});
									«call.target.name»_«func_ID»_return.add(_f);
								}								
							'''
					} else if(call.input.f_index instanceof VariableLiteral &&
						typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).contains("Matrix")){
							if(call.input.split.equals("row")){ 
								s+='''
									int __num_proc_«call.target.name»_«func_ID»= (int) __fly_environment.get("«call.environment.name»").get("nthread");
									ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new ArrayList<StringBuilder>();
									int __rows = «(call.input.f_index as VariableLiteral).variable.name».length;
									
									int[] dimPortions = new int[__num_proc_«call.target.name»_«func_ID»]; 
									int[] displ = new int[__num_proc_«call.target.name»_«func_ID»]; 
									int offset = 0;
									
									for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){

										dimPortions[__i] = (__rows / __num_proc_«call.target.name»_«func_ID») +
											((__i < (__rows % __num_proc_«call.target.name»_«func_ID»)) ? 1 : 0);
										displ[__i] = offset;
										offset += dimPortions[__i];
										
										//Get the type of element inside the matrix and generate the submatrix
										«typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name)
											.substring(typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).indexOf("_") + 1,
											typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).lastIndexOf("_")
											)»[][] subMatrix = new «typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name)
															.substring(typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).indexOf("_") + 1,
																typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).lastIndexOf("_")
															)»[dimPortions[__i]][];
														
										for (int i = 0, k = displ[__i]; k < (displ[__i] + dimPortions[__i]); i++, k++) {
											subMatrix[i] = new «typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name)
																										.substring(typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).indexOf("_") + 1,
																											typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).lastIndexOf("_")
																										)»[«(call.input.f_index as VariableLiteral).variable.name»[i].length];
										    System.arraycopy(«(call.input.f_index as VariableLiteral).variable.name»[k], 0, subMatrix[i], 0, subMatrix[i].length);
										}
										Future<Object> _f = __thread_pool_«call.environment.name».submit(new Callable<Object>(){
													
											public Object call() throws Exception {
												
												Object __ret = «call.target.name»(subMatrix);
												«IF call.isIs_then»
													«call.then.name»();
												«ENDIF»					
												return __ret;
											}
										});
										«call.target.name»_«func_ID»_return.add(_f);				
									}
								'''
						}
					} else { // f_index is a range
				if (call.isIsAsync && call.isIs_thenall) {
					s += '''
						final int __numThread = «((call.input as FunctionInput).f_index as RangeLiteral ).value2 - ((call.input as FunctionInput).f_index as RangeLiteral ).value1» - 1;
					'''
				}
				
				var value1 = if ((((call.input as FunctionInput).f_index as RangeLiteral ).value_l1) != null) ((call.input as FunctionInput).f_index as RangeLiteral ).value_l1.name  else ((call.input as FunctionInput).f_index as RangeLiteral ).value1  ;
				var value2 = if ((((call.input as FunctionInput).f_index as RangeLiteral ).value_l2) != null) ((call.input as FunctionInput).f_index as RangeLiteral ).value_l2.name  else ((call.input as FunctionInput).f_index as RangeLiteral ).value2  ;

				s += '''
					for(int _i=«value1»;_i<«value2»;_i++){
						final int __i = _i;
						Future<Object> _f = __thread_pool_«call.environment.name».submit(new Callable<Object>(){
							
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								
								Object __ret = «call.target.name»(«IF call.target.parameters.length==1»__i«ENDIF»);
								«IF call.isIs_then»
									«call.then.name»();
								«ENDIF»
								«IF call.isIsAsync && call.isIs_thenall»
									if(__count.getAndIncrement()==__numThread){
										__asyncTermination.put("Termination");
									}
								«ENDIF»   						
								return __ret;
							}
						});
						«call.target.name»_«func_ID»_return.add(_f);
					}
				'''
			}
			last_func_result = call.target.name + "_" + func_ID + "_return"

			if (!call.isAsync) {
				s += '''
					for(Future _f : «call.target.name»_«func_ID»_return){
						try{
							_f.get();
						} catch(Exception e){
							e.printStackTrace();
						}
					}
					
					«IF call.isIs_thenall»
						«call.thenall.name»();
					«ENDIF»
				'''
			}

			if (call.isIsAsync && call.isIs_thenall) {
				s += '''
					Future<Object> __call = __thread_pool_«call.environment.name».submit(new Callable<Object>(){
											
							public Object call() throws Exception {
								//TODO Auto-generated method stub
										__asyncTermination.take();	
										«call.thenall.name»();
								return null;
							}
						});
						
				'''
			}

		} else { // no 'in' keyword
			var par_id = 0
			var par_1 = ''' 
			''' // parameter declaration
			var par_2 = '''
			''' // passing parameter 
			for (el : call.input.expressions) {
				par_1 += '''
					final Object _par_«par_id» = «generateArithmeticExpression(el,scope)»;
				'''
				par_2 += ''' _par_«par_id»	'''
				if (el != call.input.expressions.last) {
					par_2 += ''','''
				}
				par_id++
			}
			s += '''
				«par_1»
				Future<Object> _f_«func_ID» = __thread_pool_«call.environment.name».submit(new Callable<Object>(){
					
					public Object call() throws Exception {
						// TODO Auto-generated method stub
											
						return «call.target.name»(«par_2»);
					}
				});
			'''
			if (!call.isIsAsync) {
				s += '''
					try{
						_f_«func_ID».get();
						«IF call.is_then »
							«call.then.name»();
						«ENDIF»
					} catch(Exception e){
						e.printStackTrace();
					}
				'''
			}
		}
		func_ID++
		return s
	}

	def generateAWSFlyFunctionCall(FlyFunctionCall call, String scope) {
		// generate the aws lambda function
		var async = call.isIsAsync
		var cred = call.environment.name
		var region = ((call.environment.right as DeclarationObject).features.get(4) as DeclarationFeature).value_s
		var function = call.target.name
		var ret = ''''''
		if (call.input.isIs_for_index) {
			
			ret+='''
				ArrayList<Future<Object>> __sync_list_«call.target.name»_«func_ID» = new ArrayList<Future<Object>>();
			'''
			
			if (call.input.f_index instanceof RangeLiteral) {
				ret += '''
					int __num_proc_«call.target.name»_«func_ID» = «(call.input.f_index as RangeLiteral).value2 - (call.input.f_index as RangeLiteral).value1 » ;
					for(int ___i=«(call.input.f_index as RangeLiteral).value1»;___i<«(call.input.f_index as RangeLiteral).value2»;___i++){
						final String __s_temp = "{\"id\": «func_ID»,\"data\":"+String.valueOf(___i)+"}";
						Future<Object> f = __thread_pool_«cred».submit(new Callable<Object>() {
							@Override
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								__lambda_«cred».invoke(new InvokeRequest()
									.withInvocationType("Event")
									.withFunctionName("«call.target.name»_"+__id_execution)
									.withPayload(__s_temp));
								return null;
							}
						});
					__sync_list_«call.target.name»_«func_ID».add(f);
					}
				'''
			} else if (call.input.f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).equals("Table")) {
				 ret+='''
					int __num_row_«call.target.name»_«func_ID»=«(call.input.f_index as VariableLiteral).variable.name».rowCount();
					int __initial_«call.target.name»_«func_ID»=0;
					int __num_proc_«call.target.name»_«func_ID» = (int) __fly_environment.get("«cred»").get("nthread");
					ArrayList<Integer> __splits_«call.target.name»_«func_ID» = new ArrayList<Integer>();
					for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++) {
						if(__i<(__num_row_«call.target.name»_«func_ID»%__num_proc_«call.target.name»_«func_ID»)) {
							__splits_«call.target.name»_«func_ID».add( __initial_«call.target.name»_«func_ID»+((__num_row_«call.target.name»_«func_ID»/__num_proc_«call.target.name»_«func_ID»)+1));
							__initial_«call.target.name»_«func_ID»+=(__num_row_«call.target.name»_«func_ID»/__num_proc_«call.target.name»_«func_ID»)+1;
						}else{
							__splits_«call.target.name»_«func_ID».add( __initial_«call.target.name»_«func_ID»+((__num_row_«call.target.name»_«func_ID»/__num_proc_«call.target.name»_«func_ID»)));
							__initial_«call.target.name»_«func_ID»+=(__num_row_«call.target.name»_«func_ID»/__num_proc_«call.target.name»_«func_ID»);
						}
					}				 
					
					for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
						final int __start;
						final int __end;
						if(__i==0) {
							__start=0;
						}else{
							__start=__splits_«call.target.name»_«func_ID».get(__i-1);
						}
						__end = __splits_«call.target.name»_«func_ID».get(__i);
						Future<Object> f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
							@Override
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								//creare la stringa 
								String __s_temp= __generateString( «(call.input.f_index as VariableLiteral).variable.name».where(Selection.withRange(__start, __end)),«func_ID»);
								__lambda_«cred».invoke(new InvokeRequest()
									.withInvocationType("Event")
									.withFunctionName("«call.target.name»_"+__id_execution)
									.withPayload(__s_temp));
								return null;
							}
						});
					__sync_list_«call.target.name»_«func_ID».add(f);
					}
				 '''
			}else if (call.input.f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).equals("File")){
				ret+='''
					int __num_proc_«call.target.name»_«func_ID»= (int) __fly_environment.get("«cred»").get("nthread");
					ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new ArrayList<StringBuilder>();
					int __temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = 0;
					Scanner __scanner_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new Scanner(«(call.input.f_index as VariableLiteral).variable.name»);
					while(__scanner_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».hasNextLine()){
						String __tmp_line = __scanner_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».nextLine();
						try{
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append(__tmp_line);
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append("\n");
						}catch(Exception e){
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».add(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»,new StringBuilder());
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append(__tmp_line);
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append("\n");
						}
						__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID»++;
					}
					__scanner_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».close();
					for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
						final int __i_f = __i;
						Future<Object> f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
							@Override
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								//creare la stringa 
								String __s_temp= __generateString(__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i_f).toString(),«func_ID»);
								__lambda_«cred».invoke(new InvokeRequest()
									.withInvocationType("Event") 
									.withFunctionName("«call.target.name»_"+__id_execution)
									.withPayload(__s_temp));
								return null;
							}
						});
					__sync_list_«call.target.name»_«func_ID».add(f);
					}
				'''
			}else if(call.input.f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).equals("Directory")){
				ret+='''
					int __num_proc_«call.target.name»_«func_ID»= (int) __fly_environment.get("«cred»").get("nthread");
					ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new ArrayList<StringBuilder>();
					int __temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = 0;
					for(String __tmp_line: «(call.input.f_index as VariableLiteral).variable.name».list()){
						__tmp_line="http://bucket-"+__id_execution+".s3."+__fly_environment.get("«cred»").get("region")+".amazonaws.com/"+__tmp_line;
						try{
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append(__tmp_line);
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append("\n");
						}catch(Exception e){
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».add(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»,new StringBuilder());
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append(__tmp_line);
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append("\n");
						}
						__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID»++;
					}
					for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
						final int __i_f = __i;
						Future<Object> f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
							@Override
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								//creare la stringa 
								String __s_temp= __generateString(__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i_f).toString(),«func_ID»);
								__lambda_«cred».invoke(new InvokeRequest()
									.withInvocationType("Event") 
									.withFunctionName("«call.target.name»_"+__id_execution)
									.withPayload(__s_temp));
								return null;
							}
						});
					__sync_list_«call.target.name»_«func_ID».add(f);
					}
				'''	
				
			}else if (call.input.f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).contains("Array")){
					ret+='''
						int __num_proc_«call.target.name»_«func_ID»= (int) __fly_environment.get("«cred»").get("nthread");
						ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new ArrayList<StringBuilder>();
						int __arr_length = «(call.input.f_index as VariableLiteral).variable.name».length;
						
						int[] dimPortions = new int[__num_proc_«call.target.name»_«func_ID»]; 
						int[] displ = new int[__num_proc_«call.target.name»_«func_ID»]; 
						int offset = 0;
						
						for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
							dimPortions[__i] = (__arr_length / __num_proc_«call.target.name»_«func_ID») +
								((__i < (__arr_length % __num_proc_«call.target.name»_«func_ID»)) ? 1 : 0);
							displ[__i] = offset;								
							offset += dimPortions[__i];

							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».add(__i,new StringBuilder());
							String myArrayPortionString = Arrays.toString(Arrays.copyOfRange(«(call.input.f_index as VariableLiteral).variable.name»,displ[__i], displ[__i]+dimPortions[__i] ));
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).append("{\"myArrayPortion\":"+myArrayPortionString+"}");
						}
						for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
							final int __i_f = __i;
							Future<Object> f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
								@Override
								public Object call() throws Exception {
									// TODO Auto-generated method stub
									//creare la stringa 
									String __s_temp= __generateString(__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i_f).toString(),«func_ID»);
									__lambda_«cred».invoke(new InvokeRequest()
										.withInvocationType("Event") 
										.withFunctionName("«call.target.name»_"+__id_execution)
										.withPayload(__s_temp));
									return null;
								}
							});
						__sync_list_«call.target.name»_«func_ID».add(f);
						}								
					'''	
			}else if (call.input.f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).contains("Matrix")){
					if(call.input.split.equals("row")){ //row
						ret+='''
							int __num_proc_«call.target.name»_«func_ID»= (int) __fly_environment.get("«cred»").get("nthread");
							ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new ArrayList<StringBuilder>();
							int __current_row_«(call.input.f_index as VariableLiteral).variable.name» = 0;
							int __rows = «(call.input.f_index as VariableLiteral).variable.name».length;
							for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
								int __n_rows =  __rows/__num_proc_«call.target.name»_«func_ID»;
								if(__rows%__num_proc_«call.target.name»_«func_ID» !=0 && __i< __rows%__num_proc_«call.target.name»_«func_ID» ){
									__n_rows++;
								}
								__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».add(__i,new StringBuilder());
								__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).append("{\"rows\":"+__n_rows+",\"cols\":"+«(call.input.f_index as VariableLiteral).variable.name»[0].length+",\"submatrixIndex\":"+__i+",\"values\":[");
								for(int __j=__current_row_«(call.input.f_index as VariableLiteral).variable.name»; __j<__current_row_«(call.input.f_index as VariableLiteral).variable.name»+__n_rows;__j++){
									for(int __z = 0; __z<«(call.input.f_index as VariableLiteral).variable.name»[__j].length;__z++){
										__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).append("{\"x\":"+__j+",\"y\":"+__z+",\"value\":"+«(call.input.f_index as VariableLiteral).variable.name»[__j][__z]+"},");
									}
									if(__j == __current_row_«(call.input.f_index as VariableLiteral).variable.name» + __n_rows-1) {
										__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).deleteCharAt(__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).length()-1);
										__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).append("]}");
									}
								}
								__current_row_«(call.input.f_index as VariableLiteral).variable.name»+=__n_rows;
							}
							for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
									final int __i_f = __i;
									Future<Object> f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
										@Override
										public Object call() throws Exception {
											// TODO Auto-generated method stub
											//creare la stringa 
											String __s_temp= __generateString(__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i_f).toString(),«func_ID»);
											__lambda_«cred».invoke(new InvokeRequest()
												.withInvocationType("Event") 
												.withFunctionName("«call.target.name»_"+__id_execution)
												.withPayload(__s_temp));
											return null;
										}
									});
								__sync_list_«call.target.name»_«func_ID».add(f);
								}
						'''
					}else if(call.input.split.equals("col")){ //col
						ret+='''
							int __num_proc_«call.target.name»_«func_ID»= (int) __fly_environment.get("«cred»").get("nthread");
							ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new ArrayList<StringBuilder>();

						'''	
					}else{ //square TODO: implement square partition
						
					}
				}
		}
		
		ret+='''
			for (Future<Object> f: __sync_list_«call.target.name»_«func_ID»){
				try {
					f.get();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (ExecutionException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		'''
		
		if(!async){ 
			ret+='''
				int __messagges_«call.target.name»_«func_ID» = 0;
				while(__messagges_«call.target.name»_«func_ID»!=__num_proc_«call.target.name»_«func_ID») {
					__termination_«call.target.name»_ch.poll();
					__messagges_«call.target.name»_«func_ID»++;
				}
				__wait_on_termination_«call.target.name»=false;
			'''
		}
		// manage the callback
		if (call.isIs_thenall) {
			ret +='''
				«call.thenall.name»();
			'''
		}
		func_ID++
		return ret
	}
	
	
	def generateAzureFlyFunctionCall(FlyFunctionCall call, String scope) {
		// generate the aws lambda function
		var async = call.isIsAsync
		var cred = call.environment.name
		var region = ((call.environment.right as DeclarationObject).features.get(5) as DeclarationFeature).value_s
		var function = call.target.name
		var ret = ''''''
		if (call.input.isIs_for_index) {
			
			//create the termination queue 
			ret+='''
				ArrayList<Future<Object>> __sync_list_«call.target.name»_«func_ID» = new ArrayList<Future<Object>>();
			'''
			if (call.input.f_index instanceof RangeLiteral) {
				ret += '''
					int __num_proc_«call.target.name»_«func_ID» = «(call.input.f_index as RangeLiteral).value2 - (call.input.f_index as RangeLiteral).value1 » ;
					for(int ___i=«(call.input.f_index as RangeLiteral).value1»;___i<«(call.input.f_index as RangeLiteral).value2»;___i++){
						final String __s_temp = "{\"id\": «func_ID»,\"data\":"+String.valueOf(___i)+"}";
						Future<Object> f = __thread_pool_«cred».submit(new Callable<Object>() {
							@Override
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								«cred».invokeFunction("«call.target.name»",__s_temp);
								return null;
							}
						});
					__sync_list_«call.target.name»_«func_ID».add(f);
					}
				'''
			} else if (call.input.f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).equals("Table")) {
				 ret+='''
					int __num_row_«call.target.name»_«func_ID»=«(call.input.f_index as VariableLiteral).variable.name».rowCount();
					int __initial_«call.target.name»_«func_ID»=0;
					int __num_proc_«call.target.name»_«func_ID» = (int) __fly_environment.get("«cred»").get("nthread");
					ArrayList<Integer> __splits_«call.target.name»_«func_ID» = new ArrayList<Integer>();
					for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++) {
						if(__i<(__num_row_«call.target.name»_«func_ID»%__num_proc_«call.target.name»_«func_ID»)) {
							__splits_«call.target.name»_«func_ID».add( __initial_«call.target.name»_«func_ID»+((__num_row_«call.target.name»_«func_ID»/__num_proc_«call.target.name»_«func_ID»)+1));
							__initial_«call.target.name»_«func_ID»+=(__num_row_«call.target.name»_«func_ID»/__num_proc_«call.target.name»_«func_ID»)+1;
						}else{
							__splits_«call.target.name»_«func_ID».add( __initial_«call.target.name»_«func_ID»+((__num_row_«call.target.name»_«func_ID»/__num_proc_«call.target.name»_«func_ID»)));
							__initial_«call.target.name»_«func_ID»+=(__num_row_«call.target.name»_«func_ID»/__num_proc_«call.target.name»_«func_ID»);
						}
					}				 
					
					for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
						final int __start;
						final int __end;
						if(__i==0) {
							__start=0;
						}else{
							__start=__splits_«call.target.name»_«func_ID».get(__i-1);
						}
						__end = __splits_«call.target.name»_«func_ID».get(__i);
						Future<Object> f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
							@Override
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								//creare la stringa 
								String __s_temp= __generateString( «(call.input.f_index as VariableLiteral).variable.name».where(Selection.withRange(__start, __end)),«func_ID»);
								«cred».invokeFunction("«call.target.name»",__s_temp);
								return null;
							}
						});
					__sync_list_«call.target.name»_«func_ID».add(f);
					}
				 '''
			}else if (call.input.f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).equals("File")){
				ret+='''
					int __num_proc_«call.target.name»_«func_ID»= (int) __fly_environment.get("«cred»").get("nthread");
					ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new ArrayList<StringBuilder>();
					int __temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = 0;
					Scanner __scanner_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new Scanner(«(call.input.f_index as VariableLiteral).variable.name»);
					while(__scanner_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».hasNextLine()){
						String __tmp_line = __scanner_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».nextLine();
						try{
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append(__tmp_line);
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append("\n");
						}catch(Exception e){
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».add(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»,new StringBuilder());
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append(__tmp_line);
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append("\n");
						}
						__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID»++;
					}
					__scanner_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».close();
					for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
						final int __i_f = __i;
						Future<Object> f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
							@Override
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								//creare la stringa 
								String __s_temp= __generateString(__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i_f).toString(),«func_ID»);
								«cred».invokeFunction("«call.target.name»",__s_temp);
								return null;
							}
						});
					__sync_list_«call.target.name»_«func_ID».add(f);
					}
				'''
			}else if(call.input.f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).equals("Directory")){
				ret+='''
					int __num_proc_«call.target.name»_«func_ID»= (int) __fly_environment.get("«cred»").get("nthread");
					ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new ArrayList<StringBuilder>();
					int __temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = 0;
					for(String __tmp_line: «(call.input.f_index as VariableLiteral).variable.name».list()){
						//__tmp_line="https://flysa+"+__id_execution+".blob.core.windows.net/bucket-"+__id_execution+"/"+__tmp_line;
						try{
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append(__tmp_line);
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append("\n");
						}catch(Exception e){
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».add(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»,new StringBuilder());
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append(__tmp_line);
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» % __num_proc_«call.target.name»_«func_ID»).append("\n");
						}
						__temp_i_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID»++;
					}
					for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
						final int __i_f = __i;
						Future<Object> f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
							@Override
							public Object call() throws Exception {
								String __s_temp= __generateString(__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i_f).toString(),«func_ID»);
								«cred».invokeFunction("«call.target.name»",__s_temp);
								return null;
							}
						});
					__sync_list_«call.target.name»_«func_ID».add(f);
					}
				'''	
			}else if(call.input.f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).contains("Array")){
					ret+='''
						int __num_proc_«call.target.name»_«func_ID»= (int) __fly_environment.get("«cred»").get("nthread");
						ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new ArrayList<StringBuilder>();
						int __arr_length = «(call.input.f_index as VariableLiteral).variable.name».length;
						
						int[] dimPortions = new int[__num_proc_«call.target.name»_«func_ID»]; 
						int[] displ = new int[__num_proc_«call.target.name»_«func_ID»]; 
						int offset = 0;
						
						for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
							dimPortions[__i] = (__arr_length / __num_proc_«call.target.name»_«func_ID») +
								((__i < (__arr_length % __num_proc_«call.target.name»_«func_ID»)) ? 1 : 0);
							displ[__i] = offset;								
							offset += dimPortions[__i];

							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».add(__i,new StringBuilder());
							String myArrayPortionString = Arrays.toString(Arrays.copyOfRange(«(call.input.f_index as VariableLiteral).variable.name»,displ[__i], displ[__i]+dimPortions[__i] ));
							__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).append("{\"myArrayPortion\":"+myArrayPortionString+"}");
						}
						for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
							final int __i_f = __i;
							Future<Object> f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
								@Override
								public Object call() throws Exception {
									// TODO Auto-generated method stub
									//creare la stringa 
									String __s_temp= __generateString(__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i_f).toString(),«func_ID»);
									«cred».invokeFunction("«call.target.name»",__s_temp);
									return null;
								}
							});
						__sync_list_«call.target.name»_«func_ID».add(f);
						}								
					'''	
			}else if(call.input.f_index instanceof VariableLiteral &&
				typeSystem.get(scope).get((call.input.f_index as VariableLiteral).variable.name).contains("Matrix")){
					if(call.input.split.equals("row")){ //row
						ret+='''
							int __num_proc_«call.target.name»_«func_ID»= (int) __fly_environment.get("«cred»").get("nthread");
							ArrayList<StringBuilder> __temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID» = new ArrayList<StringBuilder>();
							int __current_row_«(call.input.f_index as VariableLiteral).variable.name» = 0;
							int __rows = «(call.input.f_index as VariableLiteral).variable.name».length;
							for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
								int __n_rows =  __rows/__num_proc_«call.target.name»_«func_ID»;
								if(__rows%__num_proc_«call.target.name»_«func_ID» !=0 && __i< __rows%__num_proc_«call.target.name»_«func_ID» ){
									__n_rows++;
								}
								__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».add(__i,new StringBuilder());
								__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).append("{\"rows\":"+__n_rows+",\"cols\":"+«(call.input.f_index as VariableLiteral).variable.name»[0].length+",\"submatrixIndex\":"+__i+",\"values\":[");
								for(int __j=__current_row_«(call.input.f_index as VariableLiteral).variable.name»; __j<__current_row_«(call.input.f_index as VariableLiteral).variable.name»+__n_rows;__j++){
									for(int __z = 0; __z<«(call.input.f_index as VariableLiteral).variable.name»[__j].length;__z++){
										__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).append("{\"x\":"+__j+",\"y\":"+__z+",\"value\":"+«(call.input.f_index as VariableLiteral).variable.name»[__j][__z]+"},");
									}
									if(__j == __current_row_«(call.input.f_index as VariableLiteral).variable.name» + __n_rows-1) {
										__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).deleteCharAt(__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).length()-1);
										__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i).append("]}");
									}
								}
								__current_row_«(call.input.f_index as VariableLiteral).variable.name»+=__n_rows;
							}
							for(int __i=0;__i<__num_proc_«call.target.name»_«func_ID»;__i++){
									final int __i_f = __i;
									Future<Object> f = __thread_pool_«call.environment.name».submit(new Callable<Object>() {
										@Override
										public Object call() throws Exception {
											// TODO Auto-generated method stub
											//creare la stringa 
											String __s_temp= __generateString(__temp_«(call.input.f_index as VariableLiteral).variable.name»_«func_ID».get(__i_f).toString(),«func_ID»);
											«cred».invokeFunction("«call.target.name»",__s_temp);
											return null;
										}
									});
								__sync_list_«call.target.name»_«func_ID».add(f);
								}
						'''
						}
			}
		}
		
		ret+='''
			for (Future<Object> f: __sync_list_«call.target.name»_«func_ID»){
				try {
					f.get();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (ExecutionException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		'''
		
		if(!async){ 
			ret+='''
				int __messagges_«call.target.name»_«func_ID» = 0;
				while(__messagges_«call.target.name»_«func_ID»!=__num_proc_«call.target.name»_«func_ID») {
					__termination_«call.target.name»_ch.poll();
					__messagges_«call.target.name»_«func_ID»++;
				}
				__wait_on_termination_«call.target.name»=false;
			'''
		}
		// manage the callback
		if (call.isIs_thenall) {
			ret +='''
				«call.thenall.name»();
			'''
		}
		func_ID++
		return ret
	}
	
	

	def generateChannelReceive(ChannelReceive receive, String scope) {
		return '''«(receive.target as VariableDeclaration).name».take()'''
//		var env = (((receive.target.environment.right as DeclarationObject).features.get(0)) as DeclarationFeature).
//			value_s
//		if (env.equals("smp")) {
//			return '''«(receive.target as VariableDeclaration).name».take()'''
//		} else if (env.equals("aws")) {
//			return '''
//			«(receive.target as VariableDeclaration).name».take()'''
//		}

	}

	def generateChannelSend(ChannelSend send, String scope) {
		var env = (((send.target.environment.get(0).right as DeclarationObject).features.get(0)) as DeclarationFeature).value_s
		var env_name = send.target.environment.get(0).name
		switch env {
			case "smp":
				return '''«(send.target as VariableDeclaration).name».add(«generateArithmeticExpression(send.expression,scope)»)'''
			case "aws":
				return '''__sqs_«env_name».sendMessage(new SendMessageRequest(__sqs_«env_name».getQueueUrl("«send.target.name»-"+__id_execution).getQueueUrl(), String.valueOf(«generateArithmeticExpression(send.expression,scope)»)));'''
			case "aws-debug":
				return '''__sqs_«env_name».sendMessage(new SendMessageRequest(__sqs_«env_name».getQueueUrl("«send.target.name»-"+__id_execution).getQueueUrl(), String.valueOf(«generateArithmeticExpression(send.expression,scope)»)));'''
			case "azure":
				return '''«env_name».addToQueue("«send.target.name»-"+__id_execution,String.valueOf(«generateArithmeticExpression(send.expression,scope)»))'''
		}
	}

	def generateWhileExpression(WhileExpression expression, String scope) {
		'''
			while(«generateArithmeticExpression(expression.cond,scope)»)
				«generateExpression(expression.body,scope)»
		'''
	}

	def generateForExpression(ForExpression exp, String scope) {
		if (exp.object instanceof ParenthesizedExpression) {
			return generateFor(exp.index, (exp.object as ParenthesizedExpression).expression, exp.body, scope)
		} else {
			return generateFor(exp.index, exp.object, exp.body, scope)
		}

	}

	def generateFor(ForIndex indexes, ArithmeticExpression object, Expression body, String scope) {
		if (object instanceof CastExpression) {
			if ((object as CastExpression).type.equals("Dat")) { // dat
				var name = ((object as CastExpression).target as VariableLiteral).variable.name
				if (indexes.indices.length == 1 ){
					typeSystem.get(scope).put((indexes.indices.get(0) as VariableDeclaration).name,name);
					return '''
						for(int _«name»=0; _«name»<((Table) «name»).rowCount();_«name»++){
							
							«IF body instanceof BlockExpression»
								«FOR exp : body.expressions »
									«generateExpression(exp,scope)»
								«ENDFOR»
							«ELSE»
								«generateExpression(body,scope)»
							«ENDIF»
						}
					'''	
				}
			} else if ((object as CastExpression).type.equals("Object")) { // object
				if(indexes.indices.length==1){
					return '''
					for(Object _«(indexes.indices.get(0) as VariableDeclaration).name» : ( (HashMap<Object,Object>) «((object as CastExpression).target as VariableLiteral).variable.name»).keySet() ){
							HashMap<Object, Object> «(indexes.indices.get(0) as VariableDeclaration).name» = new HashMap<Object,Object>();
							«(indexes.indices.get(0) as VariableDeclaration).name».put("k",_«(indexes.indices.get(0) as VariableDeclaration).name»);
							«(indexes.indices.get(0) as VariableDeclaration).name».put("v",((HashMap<Object,Object>) «((object as CastExpression).target as VariableLiteral).variable.name»).get(_«(indexes.indices.get(0) as VariableDeclaration).name»));
						«IF body instanceof BlockExpression»
							«FOR exp : body.expressions »
								«generateExpression(exp,scope)»
							«ENDFOR»
						«ELSE»
							«generateExpression(body,scope)»
						«ENDIF»
					}
				'''
				}
			}
		} else if (object instanceof RangeLiteral) {
			var value1 = if (object.value_l1 != null) object.value_l1.name  else  object.value1  ;
			var value2 = if (object.value_l2 != null) object.value_l2.name  else  object.value2  ;
			return '''
				for(int «(indexes.indices.get(0) as VariableDeclaration).name»=«value1»;«(indexes.indices.get(0) as VariableDeclaration).name»<«value2»;«(indexes.indices.get(0) as VariableDeclaration).name»++){
					«generateExpression(body,scope)»
				}
			'''
		} else if (object instanceof VariableLiteral) {
			println("for :" +(object as VariableLiteral).variable.name)
			if (((object as VariableLiteral).variable.typeobject.equals('var') &&
				((object as VariableLiteral).variable.right instanceof NameObjectDef) ) ||
				typeSystem.get(scope).get((object as VariableLiteral).variable.name).equals("HashMap")) {
				return '''
					
					for(Object _«(indexes.indices.get(0) as VariableDeclaration).name» : «(object as VariableLiteral).variable.name».keySet() ){
						HashMap<Object, Object> «(indexes.indices.get(0) as VariableDeclaration).name» = new HashMap<Object,Object>();
						«(indexes.indices.get(0) as VariableDeclaration).name».put("k",_«(indexes.indices.get(0) as VariableDeclaration).name»);
						«(indexes.indices.get(0) as VariableDeclaration).name».put("v",«(object as VariableLiteral).variable.name».get(_«(indexes.indices.get(0) as VariableDeclaration).name»));
						«IF body instanceof BlockExpression»
							«FOR exp : body.expressions »
								«generateExpression(exp,scope)»
							«ENDFOR»
						«ELSE»
							«generateExpression(body,scope)»
						«ENDIF»
					}
				'''
			} else if(typeSystem.get(scope).get((object as VariableLiteral).variable.name).equals("File")){
				var name = (object as VariableLiteral).variable.name;
				(indexes.indices.get(0) as VariableDeclaration).typeobject='var'
				var index_name = (indexes.indices.get(0) as VariableDeclaration).name
				typeSystem.get(scope).put(index_name,name); 
					return '''
						Scanner __scanner_«name» = new Scanner(«name»);
						while(__scanner_«name».hasNextLine()){
							String «index_name» = __scanner_«name».nextLine();
							«IF body instanceof BlockExpression»
								«FOR exp : body.expressions »
									«generateExpression(exp,scope)»
								«ENDFOR»
							«ELSE»
								«generateExpression(body,scope)»
							«ENDIF»
						}
						__scanner_«name».close();
					'''
			}else if(typeSystem.get(scope).get((object as VariableLiteral).variable.name).equals("Directory")){ //TO-DO: add support directory
					return '''
						for (String __«(indexes.indices.get(0) as VariableDeclaration).name» : «(object as VariableLiteral).variable.name».list()) {
							String «(indexes.indices.get(0) as VariableDeclaration).name» = «(object as VariableLiteral).variable.name».getAbsolutePath()+"/"+ __«(indexes.indices.get(0) as VariableDeclaration).name»;
							«IF body instanceof BlockExpression»
								«FOR exp : body.expressions »
									«generateExpression(exp,scope)»
								«ENDFOR»
							«ELSE»
								«generateExpression(body,scope)»
							«ENDIF»
						}
					'''
				}else if(typeSystem.get(scope).get((object as VariableLiteral).variable.name).equals("String[]")){
					return '''
						for (String «(indexes.indices.get(0) as VariableDeclaration).name» : «(object as VariableLiteral).variable.name») {
							«IF body instanceof BlockExpression»
								«FOR exp : body.expressions »
									«generateExpression(exp,scope)»
								«ENDFOR»
							«ELSE»
								«generateExpression(body,scope)»
							«ENDIF»
						}
					'''
				}else if (typeSystem.get(scope).get((object as VariableLiteral).variable.name).equals("Table")){
				var name = (object as VariableLiteral).variable.name;
				var index_name = (indexes.indices.get(0) as VariableDeclaration).name
				typeSystem.get(scope).put(index_name,name);
				
					return '''
						for(int _«name»=0; _«name»< «name».rowCount();_«name»++){
							«IF body instanceof BlockExpression»
								«FOR exp : body.expressions »
									«generateExpression(exp,scope)»
								«ENDFOR»
							«ELSE»
								«generateExpression(body,scope)»
							«ENDIF»
						}
					'''
				
			}else if(typeSystem.get(scope).get((object as VariableLiteral).variable.name).contains("Array")){
					var name = (object as VariableLiteral).variable.name;
				
					return '''
						for(int «(indexes.indices.get(0) as VariableDeclaration).name» = 0;«(indexes.indices.get(0) as VariableDeclaration).name» < «name».length;«(indexes.indices.get(0) as VariableDeclaration).name»++){
							«generateExpression(body,scope)»
						}
					'''
			}else if(typeSystem.get(scope).get((object as VariableLiteral).variable.name).contains("Matrix")){
				var name = (object as VariableLiteral).variable.name;
				var index_row = (indexes.indices.get(0) as VariableDeclaration).name
				var index_col = (indexes.indices.get(1) as VariableDeclaration).name
				typeSystem.get(scope).put(index_col,name); 
				typeSystem.get(scope).put(index_row,name); 
				return  '''
				for(int «index_row»=0;«index_row»<«name».length;«index_row»++){
					for(int «index_col»=0;«index_col»<«name»[0].length;«index_col»++){
						«IF body instanceof BlockExpression»
							«FOR exp : body.expressions »
								«generateExpression(exp,scope)»
							«ENDFOR»
						«ELSE»
							«generateExpression(body,scope)»
						«ENDIF»
					}
				}
				'''
			} 
		} else if (object instanceof VariableFunction) { //TODO: check the implementation
			return '''
			«generateVariableFunction(object as VariableFunction,false,scope)»
			for(HashMap<String,Object> «(indexes.indices.get(0) as VariableDeclaration).name» : __«(object as VariableFunction).target.name»_rows.values()){
				«IF body instanceof BlockExpression»
					«FOR exp : body.expressions »
						«generateExpression(exp,scope)»
					«ENDFOR»
				«ELSE»
					«generateExpression(body,scope)»
				«ENDIF»
			}'''
		} else if(object instanceof IndexObject){ // if  it's a sub-array or a sub-matrix
			
		} 
	}

	def generateIfExpression(IfExpression expression, String scope) {
		'''
			if(«generateArithmeticExpression(expression.cond,scope)»)
				«generateExpression(expression.then,scope)»
				«IF expression.^else !== null»
					else «generateExpression(expression.^else,scope)»
				«ENDIF» 
		'''
	}

	def generatePrintExpression(PrintExpression expression, String scope) {
		if (expression.print instanceof ChannelReceive) {
			return '''
				try{
					System.out.println(«generateArithmeticExpression(expression.print,scope)»);
				}catch(Exception e){
					e.printStackTrace();
				}
			'''
		} else
			return '''System.out.println(«generateArithmeticExpression(expression.print,scope)»);'''
	}

	def generateAssignment(Assignment assignment, String scope) {
		if (assignment.feature != null) {
			if (assignment.value instanceof CastExpression &&
				((assignment.value as CastExpression).target instanceof ChannelReceive)) {
				if (!(((assignment.value as CastExpression).target as ChannelReceive).target.environment.
					get(0).right as DeclarationObject).features.get(0).value_s.equals("smp")) { // aws environment
					if ((assignment.value as CastExpression).type.equals("Integer")) {
						return '''
							«generateArithmeticExpression(assignment.feature,scope)» «assignment.op» Integer.parseInt(«((assignment.value as CastExpression).target as ChannelReceive).target.name».take().toString());
						'''
					} else if((assignment.value as CastExpression).type.equals("Object")){
						return '''
							String __res_«((assignment.value as CastExpression).target as ChannelReceive).target.name» = «((assignment.value as CastExpression).target as ChannelReceive).target.name».take().toString();
							HashMap «generateArithmeticExpression(assignment.feature,scope)» «assignment.op» new Gson().fromJson(__res_«((assignment.value as CastExpression).target as ChannelReceive).target.name»,new TypeToken<HashMap<String, String>>() {}.getType();)
						'''
					} else if ((assignment.value as CastExpression).type.equals("Double")) {
						return '''
							«generateArithmeticExpression(assignment.feature,scope)» «assignment.op» Double.parseDouble («((assignment.value as CastExpression).target as ChannelReceive).target.name».take().toString());
						'''
					}
				} else { // local environment
					if ((assignment.value as CastExpression).type.equals("Integer")) { 
						return '''
							try{
								«generateArithmeticExpression(assignment.feature,scope)» «assignment.op» Integer.parseInt(«((assignment.value as CastExpression).target as ChannelReceive).target.name».take().toString());
							}catch(InterruptedException e1){
								e1.printStackTrace();
							}
						'''
					} else if ((assignment.value as CastExpression).type.equals("Double")) {
						return '''
							try{
								«generateArithmeticExpression(assignment.feature,scope)» «assignment.op» Double.parseDouble(«((assignment.value as CastExpression).target as ChannelReceive).target.name».take().toString());
								e1.printStackTrace();
							}
						'''
					}

				}

			} else if (assignment.value instanceof ChannelReceive) {
				if (!((assignment.value as ChannelReceive).target.environment.get(0).right as DeclarationObject).features.
					get(0).value_s.equals("smp")) { // aws environment
					return '''
						try{
							«generateArithmeticExpression(assignment.feature,scope)» «assignment.op» «generateArithmeticExpression(assignment.value as ChannelReceive,scope)»
						}catch(InterruptedException e1){
							e1.printStackTrace();
						}
					'''
				} else { // local environment
					return '''
						try{
							«generateArithmeticExpression(assignment.feature,scope)» «assignment.op» «generateArithmeticExpression(assignment.value as ChannelReceive,scope)»
						}catch(InterruptedException e1){
							e1.printStackTrace();
						}
					'''
				}
			} else {
				return '''
					«generateArithmeticExpression(assignment.feature,scope)» «assignment.op» «generateArithmeticExpression(assignment.value,scope)»;
				'''
			}
		}
		if (assignment.feature_obj !== null) {
			if (assignment.feature_obj instanceof NameObject) {
				typeSystem.get(scope).put(
					((assignment.feature_obj as NameObject).name as VariableDeclaration).name + "." +
						(assignment.feature_obj as NameObject).value,
					valuateArithmeticExpression(assignment.value, scope))
				return '''
					«((assignment.feature_obj as NameObject).name as VariableDeclaration).name».put("«(assignment.feature_obj as NameObject).value»",«generateArithmeticExpression(assignment.value,scope)»);
				'''
			}
			if (assignment.feature_obj instanceof IndexObject) {

				if(typeSystem.get(scope).get((assignment.feature_obj as IndexObject).name.name).contains("Array")){
					return '''«generateArithmeticExpression(assignment.feature_obj,scope)» = «generateArithmeticExpression(assignment.value,scope)»;'''
				} else if(typeSystem.get(scope).get((assignment.feature_obj as IndexObject).name.name).contains("Matrix")){
					return '''«generateArithmeticExpression(assignment.feature_obj,scope)» =  «generateArithmeticExpression(assignment.value,scope)»;'''
				} else { 
					typeSystem.get(scope).put(
						((assignment.feature_obj as IndexObject).name as VariableDeclaration).name + "[" +
							generateArithmeticExpression((assignment.feature_obj as IndexObject).indexes.get(0).value,scope) + "]",
						valuateArithmeticExpression(assignment.value, scope))
					return '''
						«((assignment.feature_obj as IndexObject).name as VariableDeclaration).name».put(«generateArithmeticExpression((assignment.feature_obj as IndexObject).indexes.get(0).value,scope)»,«generateArithmeticExpression(assignment.value,scope)»);
					'''
				} 

			}
		}
	}

	def generateFunctionDefinition(FunctionDefinition definition) {
		typeSystem.put(definition.name, new HashMap<String, String>())
		for (exp : res.allContents.toIterable.filter(ConstantDeclaration)) {
			typeSystem.get(definition.name).put(exp.name,typeSystem.get("main").get( exp.name))
		}
		
		var returnExp = checkReturn(definition.body) 
		
		var s = '''
			protected static «IF returnExp != null» «valuateArithmeticExpression(returnExp.expression,definition.name)»«ELSE» Object«ENDIF» «definition.name»(«FOR params : definition.parameters»«getParameterType(definition.name,params,definition.parameters.indexOf(params))» «(params as VariableDeclaration).name»«IF(!params.equals(definition.parameters.last))», «ENDIF»«ENDFOR»)throws Exception{
			«FOR el : definition.body.expressions»
			«generateExpression(el,definition.name)»
			«ENDFOR»
			«IF returnExp == null»
			return null;
			«ENDIF»
			}
				
		'''
		println("generate function "+ definition.name)
		println("typesystem :")
		println (typeSystem.get(definition.name))
		println(definition.name)
		if (definition.body.expressions.filter(NativeExpression).length !=0)
			s = '''
				protected static «IF returnExp != null» «valuateArithmeticExpression(returnExp.expression,definition.name)»«ELSE» Object«ENDIF» «definition.name»(«FOR params : definition.parameters»«getParameterType(definition.name,params,definition.parameters.indexOf(params))» «(params as VariableDeclaration).name»«IF(!params.equals(definition.parameters.last))», «ENDIF»«ENDFOR»)throws Exception{
				
				return null;
				
				} 
			'''
		return s
	}
	
	

	def getParameterType(String name, Expression param, int pos) {
		println("getParameterType "+name+ " params "+ param+ "pos "+ pos)
		for (exp : res.allContents.toIterable.filter(Expression)) {
			if (exp instanceof LocalFunctionCall && ((exp as LocalFunctionCall).target.name == name)) {
				var typeobject = valuateArithmeticExpression(
					((exp as LocalFunctionCall).input as LocalFunctionInput).inputs.get(pos), "main")
				println("params: "+param+" ----- type object "+ typeobject)
				if (typeobject == "Table") {
					(param as VariableDeclaration).typeobject = "dat"
					typeSystem.get(name).put((param as VariableDeclaration).name, "Table");
				} else {
					(param as VariableDeclaration).typeobject = "var"
					if (typeobject == "HashMap") {
						typeSystem.get(name).put((param as VariableDeclaration).name, "HashMap");
						//println(typeSystem.get(name))
						for (String key : typeSystem.get("main").keySet()) {
							if (key.contains(
								(((exp as LocalFunctionCall).input as LocalFunctionInput).inputs.get(
									pos) as VariableLiteral).variable.name + ".")) {
								//println(key.indexOf("."))
								var tmp = key.substring(key.indexOf(".") + 1, key.length);
								typeSystem.get(name).put((param as VariableDeclaration).name + "." + tmp,
									typeSystem.get("main").get(key));
							}
						}
					} else if (typeobject.contains("Array")) {
						typeSystem.get(name).put((param as VariableDeclaration).name, typeobject);
						var tmp =  typeobject.split("_")
						typeobject=tmp.get(1)+"[]"
					} else if(typeobject.contains("Matrix")){
						typeSystem.get(name).put((param as VariableDeclaration).name, typeobject);
						var tmp =  typeobject.split("_")
						if(tmp.length == 3){
							typeobject=tmp.get(1)+"[][]"
						}else if (tmp.length ==4){
							typeobject=tmp.get(1)+"[][][]"
						}
					} else{
						typeSystem.get(name).put((param as VariableDeclaration).name, typeobject);

					}
				}
				return typeobject
			} else if (exp instanceof FlyFunctionCall && ((exp as FlyFunctionCall).target.name == name)) {
				if ((exp as FlyFunctionCall).input.isIs_for_index) {
					if ((exp as FlyFunctionCall).input.f_index instanceof RangeLiteral){
						typeSystem.get(name).put((param as VariableDeclaration).name,"Integer")
						return "Integer"
					}else if ((exp as FlyFunctionCall).input.f_index instanceof VariableLiteral) {
						var typeobject = valuateArithmeticExpression(
							(exp as FlyFunctionCall).input.f_index as VariableLiteral, "main");
						if (typeobject == "Table") {
							(param as VariableDeclaration).typeobject = "dat"
							typeSystem.get(name).put((param as VariableDeclaration).name, "Table");

						} else {
							(param as VariableDeclaration).typeobject = "var"
							if (typeobject == "HashMap") {
								typeSystem.get(name).put((param as VariableDeclaration).name, "HashMap");
								for (String key : typeSystem.get("main").keySet()) {
									if (key.contains(
										(((exp as LocalFunctionCall).input as LocalFunctionInput).inputs.get(
											pos) as VariableLiteral).variable.name + ".")) {
										//println(key.indexOf("."))
										var tmp = key.substring(key.indexOf(".") + 1, key.length);
										typeSystem.get(name).put((param as VariableDeclaration).name + "." + tmp,
											typeSystem.get("main").get(key));
									}
								}
							}else if(typeobject.contains("Array")){
								typeSystem.get(name).put((param as VariableDeclaration).name, typeobject);
								var tmp =  typeobject.split("_")
								typeobject=tmp.get(1)+"[]"
							}else if(typeobject.contains("Matrix")){
								typeSystem.get(name).put((param as VariableDeclaration).name, typeobject);
								var tmp =  typeobject.split("_")
								if(tmp.length == 3){
									typeobject=tmp.get(1)+"[][]"
								}else if (tmp.length ==4){
									typeobject=tmp.get(1)+"[][][]"
								}
							}else { //TODO support to array and matrices
								typeSystem.get(name).put((param as VariableDeclaration).name, typeobject);
							}

						}
						return typeobject
					}
				} else {
					var typeobject = valuateArithmeticExpression(
						((exp as FlyFunctionCall).input as FunctionInput).expressions.get(pos), "main");
					if (typeobject == "Table") {
						(param as VariableDeclaration).typeobject = "dat"
						typeSystem.get(name).put((param as VariableDeclaration).name, "Table");
					} else {
						(param as VariableDeclaration).typeobject = "var"
						if (typeobject == "HashMap") {
							typeSystem.get(name).put((param as VariableDeclaration).name, "HashMap");
							for (String key : typeSystem.get("main").keySet()) {
								if (key.contains(
									(((exp as LocalFunctionCall).input as LocalFunctionInput).inputs.get(
										pos) as VariableLiteral).variable.name + ".")) {
									//println(key.indexOf("."))
									var tmp = key.substring(key.indexOf(".") + 1, key.length);
									typeSystem.get(name).put((param as VariableDeclaration).name + "." + tmp,
										typeSystem.get("main").get(key));
								}
							}
						} else {
							typeSystem.get(name).put((param as VariableDeclaration).name, typeobject);

						}
					}
					return typeobject
				}
			}
		}
	}

	def String valuateArithmeticExpression(ArithmeticExpression exp, String scope) {
		println(typeSystem.get(scope))
		if (exp instanceof NumberLiteral) {
			return "Integer"
		} else if (exp instanceof BooleanLiteral) {
			return "Boolean"
		} else if (exp instanceof StringLiteral) {
			return "String"
		} else if (exp instanceof FloatLiteral) {
			return "Double"
		} else if (exp instanceof VariableLiteral) {
			val variable = exp.variable
		if (variable.typeobject.equals("var")) {
			if (variable.right instanceof DeclarationObject) {
				var type = (variable.right as DeclarationObject).features.get(0).value_s
				switch (type) {
					case "dataframe": {
						return "Table"
					}
					case "channel":{
						return "channel"
					}
					case "random":{
						return "Random"
					}
					case "file":{
						if((variable.right as DeclarationObject).features.get(1).value_s != null){
							var path = (variable.right as DeclarationObject).features.get(1).value_s.split("/")
							var filename = path.get(path.length-1)
							if (filename.split(".").length != 2)
								return "String[]"
							else
								return "File"
						}else
						return "File"
						
					}
					default: {
						return "variable"
					}
				}
			} else if (variable.right instanceof NameObjectDef) {
				return "HashMap"
			} else if (variable.right instanceof ArithmeticExpression) {
				return valuateArithmeticExpression(variable.right as ArithmeticExpression, scope)
			}else{
				return typeSystem.get(scope).get(variable.name) // if it's a parameter of a FunctionDefinition
			}
		}
		return "variable"
		} else if (exp instanceof NameObject) {
			return typeSystem.get(scope).get(exp.name.name + "." + exp.value)
		} else if (exp instanceof IndexObject) {
			if (typeSystem.get(scope).get(exp.name.name).contains("Array")  ){
				var type = typeSystem.get(scope).get(exp.name.name).split('_')
				if(exp.indexes.get(0).value2===null){
					return type.get(1)
				}else{
					if(type.get(1).equals("Integer")){
						return "Integer[]"
					}else if(type.get(1).equals("Double")){
						return "Double[]"
					}else if(type.get(1).equals("String")){
						return "String[]"
					}
				}
				
			}else if(typeSystem.get(scope).get(exp.name.name).contains("Matrix")){
				var type = typeSystem.get(scope).get(exp.name.name).split('_')
				return type.get(1)
			} else {
				return typeSystem.get(scope).get(exp.name.name + "[" + generateArithmeticExpression(exp.indexes.get(0).value,scope) + "]")
			}
		} else if (exp instanceof DatTableObject) {
			return "Table"
		}
		if (exp instanceof UnaryOperation) {
			if (exp.feature.equals("!"))
				return "Boolean"
			return valuateArithmeticExpression(exp.operand, scope)
		}
		if (exp instanceof BinaryOperation) {
			var left = valuateArithmeticExpression(exp.left, scope)
			var right = valuateArithmeticExpression(exp.right, scope)
			if (exp.feature.equals("+") || exp.feature.equals("-") || exp.feature.equals("*") ||
				exp.feature.equals("/")) {
				if (left.equals("String") || right.equals("String"))
					return "String"
				else if (left.equals("Double") || right.equals("Double"))
					return "Double"
				else
					return "Integer"
			} else
				return "Boolean"
		} else if (exp instanceof CastExpression) {
			if (exp.type.equals("Object")) {
				return "HashMap"
			}
			if (exp.type.equals("String")) {
				return "String"
			}
			if (exp.type.equals("Integer")) {
				return "Integer"
			}
			if (exp.type.equals("Float")) {
				return "Double"
			}
			if (exp.type.equals("Dataframe")) {
				return "Table"
			}
			if (exp.type.equals("Date")) {
				return "LocalDate"
			}
		} else if (exp instanceof ParenthesizedExpression) {
			return valuateArithmeticExpression(exp.expression, scope)
		}
		if (exp instanceof MathFunction) {
			if (exp.feature.equals("round")) {
				return "Integer"
			} else {
				for (el : exp.expressions) {
					if (valuateArithmeticExpression(el, scope).equals("Double")) {
						return "Double"
					}
				}
				return "Integer"
			}
		} else if (exp instanceof TimeFunction){
			return "Long"
		}else if (exp instanceof VariableFunction) {
			if (exp.target.typeobject.equals("var")) {
				if (exp.target.right instanceof DeclarationObject){
					var type = (exp.target.right as DeclarationObject).features.get(0).value_s
					if (type.equals("random")){
						if (exp.feature.equals("nextBoolean")) {
							return "Boolean"
						} else if (exp.feature.equals("nextDouble")) {
							return "Double"
						} else if (exp.feature.equals("nextInt")) {
							return "Integer"
						}
					} else if (type.equals("query")){
						var queryType = (exp.target.right as DeclarationObject).features.get(1).value_s
						if (queryType.equals("update")){
							return "int"
						} else if(queryType.equals("value")){
							return "String"
						} else {
							return "Table"
						}
					}
				} else if (exp.feature.equals("split")) { 
					return "String[]"
				} else if (exp.feature.contains("indexOf") || exp.feature.equals("length")) {
					return "Integer"
				} else if (exp.feature.equals("concat") || exp.feature.equals("substring")||
					exp.feature.equals("toLowerCase") || exp.feature.equals("toUpperCase")) {
					return "String"
				} if(exp.feature.equals("charAt")){
					return "char"
				}else {
					return "Boolean"
				}
			}
		} else {
			return "Object"
		}
	}

	def checkReturn(EObject el) {
		if (el instanceof BlockExpression) {
			for (element : (el as BlockExpression).expressions) {
				if (element instanceof FunctionReturn) {
					return element
				}
			}
			return null
		}
	}
	
	def Boolean checkAWS(){
		for(VariableDeclaration env: res.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
			filter[list_environment.contains((right as DeclarationObject).features.get(0).value_s)]
		){
			if ((env.right as DeclarationObject).features.get(0).value_s.equals("aws"))
				return true
		}
		return false
	}
	
	def Boolean checkAWSDebug(){
		for(VariableDeclaration env: res.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
			filter[list_environment.contains((right as DeclarationObject).features.get(0).value_s)]
		){
			if ((env.right as DeclarationObject).features.get(0).value_s.equals("aws-debug")){
				return true
			}
			
				
		}
		return false
	}
	
	def Boolean checkAzure(){
		for(VariableDeclaration env: res.allContents.toIterable.filter(VariableDeclaration).filter[right instanceof DeclarationObject].
			filter[list_environment.contains((right as DeclarationObject).features.get(0).value_s)]
		){
			if ((env.right as DeclarationObject).features.get(0).value_s.equals("azure"))
				return true
		}
		return false
	}

	def checkBlock(EObject el) {
		if (el instanceof FunctionDefinition) {
			return true
		}
		if (el instanceof WhileExpression) {
			return true
		}
		if (el instanceof ForExpression) {
			return true
		}
		if (el instanceof IfExpression) {
			return true
		}
		if (el instanceof BlockExpression) {
			return true
		}
		if (el instanceof Fly) {
			return false
		}
		if (el instanceof VariableDeclaration) {
			return true
		}
		if (el instanceof PrintExpression) {
			return true
		} else {
			return checkBlock(el.eContainer)
		}
	}
}