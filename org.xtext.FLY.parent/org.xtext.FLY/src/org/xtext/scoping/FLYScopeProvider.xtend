/*
 * generated by Xtext 2.13.0
 */
package org.xtext.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.fLY.BlockExpression
import org.xtext.fLY.VariableDeclaration
import org.xtext.fLY.FunctionDefinition
import org.xtext.fLY.ChannelDeclaration
import org.xtext.fLY.Fly
import static extension org.eclipse.xtext.EcoreUtil2.*
import java.util.List
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.xtext.fLY.ForExpression
import org.xtext.fLY.DatDeclaration
import org.xtext.fLY.RandomDeclaration

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class FLYScopeProvider extends AbstractFLYScopeProvider {

	override getScope(EObject context, EReference reference) {

		val pBlock = getParentBlock(context)
		if (pBlock instanceof BlockExpression) {
			return generateScopeForBlock(pBlock)
		}
		// return Scopes.scopeFor(getVariableDeclarations(context))
		return super.getScope(context, reference)
	}

	def IScope generateScopeForBlock(BlockExpression expression) {
		val parentScope = getParentScope(expression)
		val element = newArrayList()
		for (el : expression.expressions) {
			if (el instanceof VariableDeclaration) {
				element.add(el)
			}
			if (el instanceof DatDeclaration) {
				element.add(el)
			}
			if (el instanceof RandomDeclaration) {
				element.add(el)
			}
			if (el instanceof ChannelDeclaration) {
				element.add(el)
			}}
		return Scopes.scopeFor(element, parentScope)
	}

	def IScope getParentScope(EObject exp) {
		val parent = exp.eContainer;
		if (parent instanceof BlockExpression) {
			return generateScopeForBlock(parent)
		}
		if (parent instanceof Fly) {
			return Scopes.scopeFor(getVariableDeclarations(exp))
		}
		if (parent instanceof ForExpression) {
			val parentScope = getParentScope(parent)
			val elements = newArrayList(parent.index)
			return Scopes.scopeFor(elements, parentScope)
		}
		if (parent instanceof FunctionDefinition) {
			val elements = newArrayList();
			// channel declaration are visible in function --------------------
			val allElements = exp.getContainerOfType(typeof(Fly)).elements
			val containingElement = allElements.findFirst[isAncestor(it, exp)]
			for (element : allElements.subList(0, allElements.indexOf(containingElement)).typeSelect(
				typeof(ChannelDeclaration))) {
				elements.add(element)
			}
			// ----------------------------
			for (el : parent.parameters) {
				elements.add(el)
			}
			return Scopes.scopeFor(elements)
		}
		val parentScopes = getParentScope(parent)
		val elements = newArrayList()
		return Scopes.scopeFor(elements, parentScopes)
	}

	def List<EObject> getVariableDeclarations(EObject exp) {

		val allElements = exp.getContainerOfType(typeof(Fly)).elements
		val containingElement = allElements.findFirst[isAncestor(it, exp)]
		println(allElements.indexOf(containingElement) + " ----- " + containingElement + " ------- " + exp)
		val declaration = newArrayList()
		for (element : allElements.subList(0, allElements.indexOf(containingElement) + 1).typeSelect(
			typeof(VariableDeclaration))) {
			declaration.add(element)
		}
		for (element : allElements.subList(0, allElements.indexOf(containingElement) + 1).typeSelect(
			typeof(ChannelDeclaration))) {
			declaration.add(element)
		}
		for (element : allElements.subList(0, allElements.indexOf(containingElement) + 1).typeSelect(
			typeof(FunctionDefinition))) {
			declaration.add(element)
		}
		return declaration
	}

	def getParentBlock(EObject exp) {
		if (exp instanceof BlockExpression || exp instanceof Fly) {
			return exp
		}
		val parent = exp.eContainer
		if (parent instanceof BlockExpression || parent instanceof Fly) {
			return parent
		} else {
			getParentBlock(parent)
		}
	}

}