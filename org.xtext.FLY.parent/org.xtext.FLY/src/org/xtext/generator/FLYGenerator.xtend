/*
 * generated by Xtext 2.13.0
 */
package org.xtext.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.HashMap
import org.xtext.fLY.ChannelDeclaration
import org.xtext.fLY.FunctionDefinition
import org.xtext.fLY.Expression
import org.xtext.fLY.VariableDeclaration
import org.xtext.fLY.RandomDeclaration
import org.xtext.fLY.Assignment
import org.xtext.fLY.PrintExpression
import org.xtext.fLY.IfExpression
import org.xtext.fLY.ForExpression
import org.xtext.fLY.WhileExpression
import org.xtext.fLY.ChannelSend
import org.xtext.fLY.ChannelReceive
import org.xtext.fLY.LocalFunctionCall
import org.xtext.fLY.FunctionReturn
import org.xtext.fLY.BlockExpression
import org.xtext.fLY.ArithmeticExpression
import org.xtext.fLY.BinaryOperation
import org.xtext.fLY.UnaryOperation
import org.xtext.fLY.PostfixOperation
import org.xtext.fLY.ParenthesizedExpression
import org.xtext.fLY.NumberLiteral
import org.xtext.fLY.BooleanLiteral
import org.xtext.fLY.StringLiteral
import org.xtext.fLY.FloatLiteral
import org.xtext.fLY.VariableLiteral
import org.xtext.fLY.NameObject
import org.xtext.fLY.IndexObject
import org.xtext.fLY.DatSingleObject
import org.xtext.fLY.DatTableObject
import org.xtext.fLY.CastExpression
import org.xtext.fLY.MathFunction
import org.xtext.fLY.FunctionInput
import org.xtext.fLY.VariableFor
import org.xtext.fLY.NameObjectDef
import org.eclipse.emf.ecore.EObject
import org.xtext.fLY.Fly
import org.xtext.fLY.DatDeclaration
import org.xtext.fLY.VariableFunction
import org.xtext.fLY.RangeLiteral
import org.xtext.fLY.EnvironmentDeclaration
import org.xtext.fLY.DeclarationObject
import org.xtext.fLY.DeclarationFeature
import org.xtext.fLY.FlyFunctionCall
import org.xtext.fLY.SortExpression
import java.util.EventObject

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FLYGenerator extends AbstractGenerator {

	HashMap<String, String> memory = new HashMap<String, String>(); // memory hash
	var name = ""
	var func_ID = 0
	var last_func_result = null
	var __local = false

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		__local = false
		var name_extension = resource.URI.toString.split('/').last
		name = name_extension.toString.split('.fly').get(0)
		for (element : resource.allContents.toIterable.filter(FlyFunctionCall)) {
			var type_env = ((element.environment.right as DeclarationObject).features.get(0) as DeclarationFeature).value_s;
			if (type_env != "local"){
				
				fsa.generateFile(element.target.name+".js",resource.compileJS(element.target,type_env));
			}
		}
		fsa.generateFile(name + ".java", resource.compileJava)
	}
		

	def CharSequence compileJava(Resource resource) '''
		import java.io.File;
		import java.io.FileInputStream;
		import java.io.FileOutputStream;
		import java.io.IOException;
		import java.nio.ByteBuffer;
		import java.nio.channels.FileChannel;
		import java.nio.file.StandardOpenOption;
		import java.util.ArrayList;
		import java.util.List;
		import java.util.zip.ZipEntry;
		import java.util.zip.ZipOutputStream;
		import java.io.BufferedWriter;
		import java.io.FileWriter;
		import java.io.IOException;
		import java.util.HashMap;
		import java.time.LocalDate;
		import tech.tablesaw.api.Table;
		import tech.tablesaw.columns.ColumnReference;
		import tech.tablesaw.io.csv.CsvReadOptions;
		import tech.tablesaw.columns.Column;
		import static tech.tablesaw.api.QueryHelper.*;
		import java.util.concurrent.LinkedTransferQueue;
		import java.util.concurrent.ExecutorService;
		import java.util.concurrent.Executors;
		import java.util.ArrayList;
		import java.util.List;
		import java.util.concurrent.Callable;
		import java.util.concurrent.Future;
		import java.util.concurrent.atomic.AtomicInteger;
		import java.util.Random;
		import java.util.Collections;
		import java.util.Comparator;
		import java.util.Map.Entry;
		import com.amazonaws.AmazonClientException;
		import com.amazonaws.auth.AWSStaticCredentialsProvider;
		import com.amazonaws.auth.BasicAWSCredentials;
		import com.amazonaws.auth.profile.ProfileCredentialsProvider;
		import com.amazonaws.services.identitymanagement.AmazonIdentityManagement;
		import com.amazonaws.services.identitymanagement.AmazonIdentityManagementClientBuilder;
		import com.amazonaws.services.identitymanagement.model.CreateRoleRequest;
		import com.amazonaws.services.identitymanagement.model.CreateRoleResult;
		import com.amazonaws.services.identitymanagement.model.DeleteRolePolicyRequest;
		import com.amazonaws.services.identitymanagement.model.DeleteRoleRequest;
		import com.amazonaws.services.identitymanagement.model.PutRolePolicyRequest;
		import com.amazonaws.services.lambda.AWSLambda;
		import com.amazonaws.services.lambda.AWSLambdaClientBuilder;
		import com.amazonaws.services.lambda.model.AddPermissionRequest;
		import com.amazonaws.services.lambda.model.AddPermissionResult;
		import com.amazonaws.services.lambda.model.CreateFunctionRequest;
		import com.amazonaws.services.lambda.model.CreateFunctionResult;
		import com.amazonaws.services.lambda.model.DeleteFunctionRequest;
		import com.amazonaws.services.lambda.model.FunctionCode;
		import com.amazonaws.services.lambda.model.Runtime;
		import com.amazonaws.services.sns.AmazonSNS;
		import com.amazonaws.services.sns.AmazonSNSClient;
		import com.amazonaws.services.sns.model.CreateTopicRequest;
		import com.amazonaws.services.sns.model.CreateTopicResult;
		import com.amazonaws.services.sns.model.DeleteTopicRequest;
		import com.amazonaws.services.sns.model.PublishRequest;
		import com.amazonaws.services.sns.model.PublishResult;
		import com.amazonaws.services.sns.model.SubscribeRequest;
		import com.amazonaws.services.sns.model.SubscribeResult;
		import com.amazonaws.services.sns.model.UnsubscribeRequest;
		import com.amazonaws.services.sqs.AmazonSQS;
		import com.amazonaws.services.sqs.AmazonSQSClient;
		import com.amazonaws.services.sqs.model.CreateQueueRequest;
		import com.amazonaws.services.sqs.model.ReceiveMessageRequest;
		import com.amazonaws.services.sqs.model.ReceiveMessageResult;
		import com.amazonaws.services.sqs.model.SendMessageRequest;
		import com.amazonaws.services.identitymanagement.model.GetRoleRequest;
		import com.amazonaws.services.identitymanagement.model.GetRoleResult;
		
		
		public class «name» {
			
			«FOR element : (resource.allContents.toIterable.filter(Expression))»
				«IF element instanceof ChannelDeclaration»
					«generateChannelDeclaration(element)»	
				«ENDIF»
				«IF element instanceof EnvironmentDeclaration»
					«generateEnvironmentDeclarationForCloud(element)»
				«ENDIF»
			«ENDFOR»
			
			«IF __local»
				static LinkedTransferQueue<String> __asyncTermination = new LinkedTransferQueue<String>(); 
			«ENDIF»
			
			public static void main(String[] args) throws Exception{
								
				«FOR element : resource.allContents.toIterable.filter(Expression)»
					«IF checkBlock(element.eContainer)==false»
						«generateExpression(element)»
					«ENDIF»
				«ENDFOR»
				
				«IF __local »
					thread_pool.shutdown();
				«ENDIF»
			}
				
		«FOR element : resource.allContents.toIterable.filter(FunctionDefinition)»
			«IF checkBlock(element.eContainer)==false»
				«generateFunctionDefinition(element)»
										
			«ENDIF»	
		«ENDFOR»	
		
		}
	'''

	def generateExpression(Expression element) {
		'''
			«IF element  instanceof VariableDeclaration»
				«generateVariableDeclaration(element)»
			«ENDIF»
			«IF element instanceof DatDeclaration»
				«generateDatDeclaration(element)»
			«ENDIF»
			«IF element instanceof RandomDeclaration»
				«generateRandomDeclaration(element)»
			«ENDIF»
			«IF element instanceof EnvironmentDeclaration»
				«generateEnvironmentDeclaration(element)»
			«ENDIF»
			«IF element instanceof Assignment»
				«generateAssignment(element)»
			«ENDIF»
			«IF element instanceof PrintExpression»
				«generatePrintExpression(element)»
			«ENDIF»
			«IF element instanceof IfExpression»
				«generateIfExpression(element)»
			«ENDIF»
			«IF element instanceof ForExpression»
				«generateForExpression(element)»
			«ENDIF»
			«IF element instanceof WhileExpression»
				«generateWhileExpression(element)»
			«ENDIF»
			«IF element instanceof ChannelSend»
				«generateChannelSend(element)»;
			«ENDIF»
			«IF element instanceof ChannelReceive»
				«generateChannelReceive(element)»;
			«ENDIF»
			«IF element instanceof FlyFunctionCall»
				«generateFlyFunctionCall(element)»
			«ENDIF»
			«IF element instanceof LocalFunctionCall»
				«generateLocalFunctionCall(element)»
			«ENDIF»
			«IF element instanceof FunctionReturn»
				«generateFunctionReturn(element)»
			«ENDIF»
			«IF element instanceof BlockExpression»
				«generateBlockExpression(element)»
			«ENDIF»
			«IF element instanceof VariableFunction»
				«generateVariableFunction(element,true)»
			«ENDIF»
			«IF element instanceof ChannelDeclaration»
				«generateChanelDeclarationForCloud(element)»
			«ENDIF»
			«IF element instanceof SortExpression»
				«generateSortExpression(element)»
			«ENDIF»
		'''
	}

	def generateSortExpression(SortExpression exp) {
		return '''
			ArrayList<Entry<Object,Object>> __sup = new ArrayList<Entry<Object,Object>>(«exp.target.name».entrySet());
			Collections.sort(__sup, new Comparator<Entry<Object,Object>>() {
			
						public int compare(Entry<Object,Object> o1, Entry<Object,Object> o2) {
							// TODO Auto-generated method stub
							if(o1.getValue() instanceof Integer && o2.getValue() instanceof Integer)
								return Integer.compare((Integer) o1.getValue(),(Integer) o2.getValue());
							else if(o1.getValue() instanceof Double && o2.getValue() instanceof Double)
								return Double.compare((Double) o1.getValue(), (Double) o2.getValue());
							else return 0;
						}
						
					});
					
			«exp.target.name».clear();
			
			«IF exp.type.equals("desc")»
				Collections.reverse(__sup);
			«ENDIF»
			
			for (int __i=0; __i<__sup.size();__i++) {
				«exp.target.name».put(""+__i, __sup.get(__i).getValue());
			}
		'''
	}

	// methods for Variable Delcaration 
	def generateVariableDeclaration(VariableDeclaration dec) {
		if (dec.typeobject.equals('var')) { // var declaration
			if (dec.right instanceof NameObjectDef) { // if is a NameObject
				memory.put(dec.name, "HashMap")
				var s = '''HashMap<Object,Object> «dec.name» = new HashMap<Object,Object>();
				'''
				var i = 0;
				for (f : (dec.right as NameObjectDef).features) {
					if (f.feature != null) {
						memory.put(dec.name + "." + f.feature, valuateArithmeticExpression(f.value))
						s = s + '''«dec.name».put("«f.feature»",«generateArithmeticExpression(f.value)»);
						'''
					} else {
						memory.put(dec.name + "[" + i + "]", valuateArithmeticExpression(f.value))
						s = s + '''«dec.name».put(«i»,«generateArithmeticExpression(f.value)»);
						'''
						i++
					}

				}
				return s
			} else if (dec.right instanceof FlyFunctionCall) {
				var s = '''
					«generateFlyFunctionCall(dec.right as FlyFunctionCall)»
					List<Future<Object>> «dec.name» = «last_func_result»;
				'''
				memory.put(dec.name, "FutureList")
				return s
			} else if (dec.right instanceof ChannelReceive) {
				var s = '''
					Object «dec.name» = null;
					try{
						e = «generateChannelReceive(dec.right as ChannelReceive)»
					}catch(InterruptedException e1){
						e1.printStackTrace();
					}
				'''
				return s
			} else if (dec.right instanceof VariableFunction) {
				if ((dec.right as VariableFunction).feature.equals("split")) {
					memory.put(dec.name, "HashMap")
					return '''
						HashMap<Object,Object> «dec.name» = new HashMap<Object,Object>();
						int _«dec.name»_crt=0;
						for(String _«dec.name» : «(dec.right as VariableFunction).target.name».«(dec.right as VariableFunction).feature»(«generateArithmeticExpression((dec.right as VariableFunction).expressions.get(0))»)){
							«dec.name».put(_«dec.name»_crt++,_«dec.name»);
						}
					'''
				} else {
					memory.put(dec.name, valuateArithmeticExpression(dec.right as VariableFunction))
					return '''
						«valuateArithmeticExpression(dec.right as VariableFunction)» «dec.name» = «generateArithmeticExpression(dec.right as VariableFunction)»;
					'''
				}

			} else { // if is an Expression to evaluate
				memory.put(dec.name, valuateArithmeticExpression(dec.right as ArithmeticExpression))
				println(dec.name + " --- " + memory.get(dec.name));
				return '''«valuateArithmeticExpression(dec.right as ArithmeticExpression)» «dec.name» = «generateArithmeticExpression(dec.right as ArithmeticExpression)»;'''
			}
		}
	}

	def generateEnvironmentDeclaration(EnvironmentDeclaration dec) {
		var env = ((dec.right as DeclarationObject).features.get(0)).value_s
		if (env.equals("local")) {
			__local = true
			return '''
				ExecutorService thread_pool = Executors.newFixedThreadPool(4); //modify
			'''
		}
	}

	def generateEnvironmentDeclarationForCloud(EnvironmentDeclaration dec) {
		var env = ((dec.right as DeclarationObject).features.get(0)).value_s
		if (env.equals("aws")) {
			var access_id_key = ((dec.right as DeclarationObject).features.get(1) as DeclarationFeature).value_s
			var secret_access_key = ((dec.right as DeclarationObject).features.get(2) as DeclarationFeature).value_s
			// var aws_region =(dec.right as DeclarationObject).features.get(3)
			return '''
				static BasicAWSCredentials «dec.name» = new BasicAWSCredentials("«access_id_key»", "«secret_access_key»");
			'''
		}
	}

	def generateChannelDeclaration(ChannelDeclaration declaration) {
		var env = ((declaration.environment.right as DeclarationObject).features.get(0)).value_s
		if (env.equals("aws")) {
			return '''
				static AmazonSQS __sqs  = AmazonSQSClient.builder()
												.withCredentials(new AWSStaticCredentialsProvider(«declaration.environment.name»))
												.withRegion("«((declaration.environment.right as DeclarationObject).features.get(3)).value_s»")
												.build();
			'''
		} else if (env.equals("local")) {
			return '''
				static LinkedTransferQueue<Object> «declaration.name» = new LinkedTransferQueue<Object>();
			'''
		}
	}

	def generateChanelDeclarationForCloud(ChannelDeclaration declaration) { // create a queue on AWS
		var env = ((declaration.environment.right as DeclarationObject).features.get(0)).value_s
		if (env.equals("aws")) {
			return '''
				__sqs.createQueue(new CreateQueueRequest("«declaration.name»"));
			'''
		}
	}

	def generateDatDeclaration(DatDeclaration dec) {
		memory.put(dec.name, "Table")
		if (dec.right instanceof NameObjectDef) {
			return '''
				Table «dec.name» = Table.read().csv(CsvReadOptions
					.builder(«generateArithmeticExpression((dec.right as NameObjectDef).features.get(1).value)»)
					.tableName(«generateArithmeticExpression((dec.right as NameObjectDef).features.get(0).value)»)
					.separator('«(generateArithmeticExpression((dec.right as NameObjectDef).features.get(3).value) as String).charAt(1)»')
				);
			'''
		} else {
			return '''«valuateArithmeticExpression(dec.right as ArithmeticExpression)» «dec.name» = «generateArithmeticExpression(dec.right as ArithmeticExpression)»;'''
		}
	}

	def generateRandomDeclaration(RandomDeclaration declaration) {
		return '''
			Random «declaration.name» = new Random();
		'''
	}

	// methods for ArithmeticExpression
	def generateArithmeticExpression(ArithmeticExpression expression) {
		// println(expression)
		if (expression instanceof BinaryOperation) {
			if (expression.feature.equals("and"))
				return '''«generateArithmeticExpression(expression.left)» && «generateArithmeticExpression(expression.right)»'''
			else if (expression.feature.equals("or"))
				return '''«generateArithmeticExpression(expression.left)» || «generateArithmeticExpression(expression.right)»'''
			else
				return '''«generateArithmeticExpression(expression.left)» «expression.feature» «generateArithmeticExpression(expression.right)»'''
		} else if (expression instanceof UnaryOperation) {
			return '''«expression.feature»«generateArithmeticExpression(expression.operand)»'''
		} else if (expression instanceof PostfixOperation) {
			return '''«generateArithmeticExpression(expression.operand)»«expression.feature»'''
		} else if (expression instanceof ParenthesizedExpression) {
			return '''(«generateArithmeticExpression(expression.expression)»)'''
		} else if (expression instanceof NumberLiteral) {
			return '''«expression.value»'''
		} else if (expression instanceof BooleanLiteral) {
			return '''«expression.value»'''
		} else if (expression instanceof StringLiteral) {
			return '''"«expression.value»"'''
		} else if (expression instanceof FloatLiteral) {
			return '''«expression.value»'''
		} else if (expression instanceof VariableLiteral) {
			return '''«expression.variable.name»'''
		} else if (expression instanceof NameObject) {
			if (memory.get(expression.name.name + "." + expression.value) !== null) {
				return '''(«memory.get(expression.name.name+"."+expression.value)») «expression.name.name».get("«expression.value»")'''
			} else {
				return '''«expression.name.name».get("«expression.value»")'''
			}
		} else if (expression instanceof IndexObject) {
			if (memory.get(expression.name.name + "[" + expression.valuet + "]") !== null) {
				return '''(«memory.get(expression.name.name+"["+expression.valuet+"]")») «expression.name.name».get("«expression.valuet»")'''
			} else {
				return '''«expression.name.name».get("«expression.valuet»")'''
			}
		} else if (expression instanceof DatSingleObject) {
			return '''«expression.name.name».get(«generateArithmeticExpression(expression.value1)»,«generateArithmeticExpression(expression.value2)»)'''
		} else if (expression instanceof DatTableObject) {
		} else if (expression instanceof CastExpression) {
			if (expression.op.equals("as")) { // cast
				if (expression.target instanceof ChannelReceive) {
					if ((((expression.target as ChannelReceive).target.environment as EnvironmentDeclaration).
						right as DeclarationObject).features.get(0).value_s.equals("aws")) {
						if (expression.type.equals("Integer")) {
							return '''
								ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl("«(expression.target as ChannelReceive).target.name»").getQueueUrl());
								ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);
								Integer.parseInt(__res.getMessages().get(0).getBody());
								__sqs.deleteMessage(__sqs.getQueueUrl("«(expression.target as ChannelReceive).target.name»").getQueueUrl(),__res.getMessages().get(0).getReceiptHandle());
							'''
						} else if (expression.type.equals("Float")) {
							return '''
								ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl("«(expression.target as ChannelReceive).target.name»").getQueueUrl());
								ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);
								Double.parseDouble(__res.getMessages().get(0).getBody());
								__sqs.deleteMessage(__sqs.getQueueUrl("«(expression.target as ChannelReceive).target.name»").getQueueUrl(),__res.getMessages().get(0).getReceiptHandle());
							'''
						}
					}
				}
				if (expression.type.equals("String")) {
					return '''(String) «generateArithmeticExpression(expression.target)»'''
				}
				if (expression.type.equals("Integer")) {

					return '''(Integer) «generateArithmeticExpression(expression.target)»'''

				}
				if (expression.type.equals("Float")) {

					return '''(Double) «generateArithmeticExpression(expression.target)»'''
				}
				if (expression.type.equals("Dat")) {
					return '''(Table) «generateArithmeticExpression(expression.target)»'''
				}
				if (expression.type.equals("Date")) {
					return '''LocalDate.parse(«generateArithmeticExpression(expression.target)»)'''
				}
				if (expression.type.equals("Object")) {
					return '''((HashMap<Object,Object>) «generateArithmeticExpression(expression.target)»)'''
				}
			} else { // parsing
				if (expression.type.equals("Integer")) {
					return '''Integer.parseInt((String) «generateArithmeticExpression(expression.target)»)'''

				}
				if (expression.type.equals("Float")) {

					return '''Double.parseDouble((String) «generateArithmeticExpression(expression.target)»)'''
				}
			}

		} else if (expression instanceof MathFunction) {
			var s = ""
			if (expression.feature.equals("round")) {
				s += "(int) "
			}
			s += "Math." + expression.feature + "("
			for (exp : expression.expressions) {
				s += generateArithmeticExpression(exp)
				if (exp != expression.expressions.last()) {
					s += ","
				}
			}
			s += ")"
			return s
		} else if (expression instanceof VariableFunction) {
			return generateVariableFunction(expression, false)
		} else if (expression instanceof ChannelReceive) {
			return generateChannelReceive(expression)
		} else if (expression instanceof ChannelSend) {
			return generateChannelSend(expression)
		} else if (expression instanceof LocalFunctionCall) {
			var s = generateLocalFunctionCall(expression)
			return s.substring(0, s.length - 1)
		}
	}

	def generateVariableFunction(VariableFunction expression, Boolean t) {
		if (expression.target.right instanceof FlyFunctionCall) {
			var s = ""
			s += "for(Future _el :" + last_func_result + "){
						_el." + expression.feature + "("
			for (exp : expression.expressions) {
				s += generateArithmeticExpression(exp)
				if (exp != expression.expressions.last()) {
					s += ","
				}
			}
			s += ");
					}"
			return s
		}
		if (expression.target.typeobject.equals("dat") && expression.feature.equals("rows")) {
			return '''
				HashMap<Integer, HashMap<String,Object> > __«expression.target.name»_rows = new HashMap<Integer, HashMap<String,Object>>();
				    	for(int __i=0; __i<«expression.target.name».rowCount();__i++) {
				    		HashMap<String, Object> __tmp = new HashMap<String, Object>();
				    		for (String __col : «expression.target.name».columnNames()) {
				    			__tmp.put(__col,«expression.target.name».get(__i, «expression.target.name».columnIndex(__col)));
							}
							 		__«expression.target.name»_rows.put(__i,__tmp);
							 	}
			'''
		} else {
			var s = expression.target.name + "." + expression.feature + "("
			for (exp : expression.expressions) {
				s += generateArithmeticExpression(exp)
				if (exp != expression.expressions.last()) {
					s += ","
				}
			}
			s += ")"
			if (t) {
				s += ";"
			}
			return s
		}
	}

	// methods for statement
	def generateBlockExpression(BlockExpression exp) {
		'''
			{
				«FOR element : exp.expressions» 
					«generateExpression(element)»
				«ENDFOR» 
			}
		'''
	}

	def generateFunctionReturn(FunctionReturn return1) {
		'''
			return «generateArithmeticExpression(return1.expression)»;
		'''
	}

	def generateLocalFunctionCall(LocalFunctionCall call) {
		var s = call.target.name + "("
		if (call.input != null) {
			for (input : call.input.inputs) {
				s += generateArithmeticExpression(input)
				if (input != call.input.inputs.last) {
					s += ","
				}
			}
		}
		s += ");"
		return s
	}

	def generateFlyFunctionCall(FlyFunctionCall call) {
		var env = ((call.environment.right as DeclarationObject).features.get(0)).value_s
		if (env.equals("local")) {
			return generateLocalFlyFunction(call)
		} else if (env.equals("aws")) {
			return generateAWSFlyFunctionCall(call)
		}

	}

	def generateLocalFlyFunction(FlyFunctionCall call) {
		var s = ''''''
		if ((call.input as FunctionInput).is_for_index) { // 'for 'keyword 
			s = '''
				final List<Future<Object>> «call.target.name»_«func_ID»_return = new ArrayList<Future<Object>>();
			'''
			if (call.isIsAsync && call.isIs_thenall) { // chiamata asincrona con thenall
				s += '''
					final AtomicInteger __count = new AtomicInteger(0);
				'''
			}

			if ((call.input as FunctionInput).f_index instanceof VariableLiteral &&
				memory.get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name) != null &&
				memory.get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name).equals(
					"HashMap")) { // f_index is a reference to an object
				if (call.isIsAsync && call.isIs_thenall) {
					s += '''
						final int __numThread = «generateArithmeticExpression((call.input as FunctionInput).f_index)».keySet().size()-1;
					'''
				}
				s += '''
					for(Object key: «generateArithmeticExpression((call.input as FunctionInput).f_index)».keySet()){
						final Object _el = «generateArithmeticExpression((call.input as FunctionInput).f_index)».get(key);
						Future<Object> _f = thread_pool.submit(new Callable<Object>(){
							
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								
								Object __ret = «call.target.name»();
								«IF call.isIs_then»
									«call.then.name»();
								«ENDIF» 					
								«IF call.isIsAsync && call.isIs_thenall»
									if(__count.getAndIncrement()==__numThread){
											__asyncTermination.put("Termination");
									}
								«ENDIF» 	
								return __ret;
								}
							});
						«call.target.name»_«func_ID»_return.add(_f);
					}
				'''
			} else if ((call.input as FunctionInput).f_index instanceof VariableLiteral &&
				memory.get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name) != null &&
				memory.get(((call.input as FunctionInput).f_index as VariableLiteral).variable.name).equals("Table")) { // f_index is a reference to a Table
			// if (call.isIsAsync && call.isIs_thenall) {
			// //modify with the number of processor or the limit of «generateArithmeticExpression((call.input as FunctionInput).f_index)».rowCount() * «generateArithmeticExpression((call.input as FunctionInput).f_index)».columns().size();
				s += '''
					final int __numThread = 4; //modify;
				'''
				// }
//				s += '''
//					for(int _i=0; _i < «generateArithmeticExpression((call.input as FunctionInput).f_index)».rowCount();_i++){
//						for(String _column: «generateArithmeticExpression((call.input as FunctionInput).f_index)».columnNames()){
//							final Object _el =«generateArithmeticExpression((call.input as FunctionInput).f_index)».get(_i,«generateArithmeticExpression((call.input as FunctionInput).f_index)».columnIndex(_column)) ;
//							Future<Object> _f = thread_pool.submit(new Callable<Object>(){
//														
//								public Object call() throws Exception {
//									// TODO Auto-generated method stub
//															
//									Object __ret = «call.target.name»(_el);
//									«IF call.isIs_then»
//										«call.then.name»(__ret);
//									«ENDIF»  		
//									«IF call.isIsAsync && call.isIs_thenall»
//										if(__count.getAndIncrement()==__numThread){
//											__asyncTermination.put("Termination");
//										}
//									«ENDIF» 				
//									return __ret;
//								}
//							});
//							«call.target.name»_«func_ID»_return.add(_f);
//						}
//					}
//				'''
				s += '''
					final ArrayList<HashMap<Integer, HashMap<String,Object>>> __list_data_«call.target.name» = new ArrayList<HashMap<Integer, HashMap<String,Object>>>();
					for (int __i = 0; __i < __numThread; __i++) {
						__list_data_«call.target.name».add(new HashMap<Integer, HashMap<String,Object>>());
					}
					for(int __i=0; __i<«generateArithmeticExpression((call.input as FunctionInput).f_index)».rowCount();__i++) {
						HashMap<String, Object> __tmp = new HashMap<String, Object>();
						for (String __col : «generateArithmeticExpression((call.input as FunctionInput).f_index)».columnNames()) {
							__tmp.put(__col,«generateArithmeticExpression((call.input as FunctionInput).f_index)».get(__i, «generateArithmeticExpression((call.input as FunctionInput).f_index)».columnIndex(__col)));
						}
						__list_data_«call.target.name».get(__i%__numThread).put(__i, __tmp);
					}
					for(int __i=0; __i<__numThread;__i++) {
					    final int __index=__i;
					    Future<Object> __f = thread_pool.submit(new Callable<Object>() {
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								Object __ret = «call.target.name»();
								«IF call.isIs_then»
									«call.then.name»();
								«ENDIF»  		
								«IF call.isIsAsync && call.isIs_thenall»
									if(__count.getAndIncrement()==__numThread){
										__asyncTermination.put("Termination");
									}
								«ENDIF» 				
								return __ret;
							}
							  			
						});
						«call.target.name»_«func_ID»_return.add(__f);
					}
				'''
			} else { // f_index is a range
				if (call.isIsAsync && call.isIs_thenall) {
					s += '''
						final int __numThread = «((call.input as FunctionInput).f_index as RangeLiteral ).value2 - ((call.input as FunctionInput).f_index as RangeLiteral ).value1» - 1;
					'''
				}
				s += '''
					for(int _i=«((call.input as FunctionInput).f_index as RangeLiteral ).value1»;_i<«((call.input as FunctionInput).f_index as RangeLiteral ).value2»;_i++){
						final int __i = _i;
						Future<Object> _f = thread_pool.submit(new Callable<Object>(){
							
							public Object call() throws Exception {
								// TODO Auto-generated method stub
								
								Object __ret = «call.target.name»();
								«IF call.isIs_then»
									«call.then.name»();
								«ENDIF»
								«IF call.isIsAsync && call.isIs_thenall»
									if(__count.getAndIncrement()==__numThread){
										__asyncTermination.put("Termination");
									}
								«ENDIF»   						
								return __ret;
							}
						});
						«call.target.name»_«func_ID»_return.add(_f);
					}
				'''
			}
			last_func_result = call.target.name + "_" + func_ID + "_return"

			if (!call.isAsync) {
				s += '''
					for(Future _f : «call.target.name»_«func_ID»_return){
						try{
							_f.get();
						} catch(Exception e){
							e.printStackTrace();
						}
					}
					«IF call.isIs_thenall»
						«call.thenall.name»();
					«ENDIF»
				'''
			}

			if (call.isIsAsync && call.isIs_thenall) {
				s += '''
					Future<Object> __call = thread_pool.submit(new Callable<Object>(){
											
							public Object call() throws Exception {
								//TODO Auto-generated method stub
					«««							for(Future _f : «call.target.name»_«func_ID»_return){
«««									try{
«««										_f.get();
«««									} catch(Exception e){
«««										e.printStackTrace();
«««									}
«««							}

										__asyncTermination.take();	
										«call.thenall.name»();
								return null;
							}
						});
						
				'''
			}

		} else { // no 'for' keyword
			var par_id = 0
			var par_1 = ''' 
			''' // parameter declaration
			var par_2 = '''
			''' // passing parameter 
			for (el : call.input.expressions) {
				par_1 += '''
					final Object _par_«par_id» = «generateArithmeticExpression(el)»;
				'''
				par_2 += ''' _par_«par_id»	'''
				if (el != call.input.expressions.last) {
					par_2 += ''','''
				}
				par_id++
			}
			s += '''
				«par_1»
				Future<Object> _f_«func_ID» = thread_pool.submit(new Callable<Object>(){
					
					public Object call() throws Exception {
						// TODO Auto-generated method stub
											
						return «call.target.name»(«par_2»);
					}
				});
			'''
			if (!call.isIsAsync) {
				s += '''
					try{
						_f_«func_ID».get();
						«IF call.is_then »
							«call.then.name»();
						«ENDIF»
					} catch(Exception e){
						e.printStackTrace();
					}
				'''
			}
		}
		func_ID++
		return s
	}

	def generateAWSFlyFunctionCall(FlyFunctionCall call) {
		// generate the aws lambda function
		var cred = call.environment.name
		var region = ((call.environment.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s
		var function = call.target.name
		var ret = '''
			//create the AWS SNS 
			final AmazonSNS __sns = AmazonSNSClient.builder()
				.withRegion("«region»")
				.withCredentials(new AWSStaticCredentialsProvider(«cred»))
				.build();
			
			//create the topic to publish the input for lambda function
			CreateTopicRequest __createTopicRequest = new CreateTopicRequest("«function»_simulation_input");
			CreateTopicResult __createTopicResult = __sns.createTopic(__createTopicRequest);
			final String __topicArn = __createTopicResult.getTopicArn();
						
			// AWS IAM
			AmazonIdentityManagement __iam = AmazonIdentityManagementClientBuilder.standard()
				.withCredentials(new AWSStaticCredentialsProvider(«cred»))
				.withRegion("«region»")
				.build();
						
			//create the policy for the lambda function
			final String __POLICY_DOCUMENT =		"{" +
									"  \"Version\": \"2012-10-17\"," +
									"  \"Statement\": [" +
									"    {" +
									"        \"Effect\": \"Allow\"," +
									"        \"Action\": ["+
									"			\"sqs:*\""
									+ 		 "]," +
									"        \"Resource\": \"*\"" +
									"    }," +
									"    {" +
									"        \"Effect\": \"Allow\"," +
									"        \"Action\": [" +
									"            \"logs:CreateLogGroup\"," +
									"            \"logs:CreateLogStream\"," +
									"            \"logs:PutLogEvents\"" +
									"       ]," +
									"       \"Resource\": \"*\"" +
									"    }" +
									"   ]" +
									"}";
			
			
					//create the role for the lambda function
					CreateRoleRequest __request_role = new CreateRoleRequest().withRoleName("«function»-lambda-sqs-execution")
							.withAssumeRolePolicyDocument(""
								+"{"
								+"	  \"Version\": \"2012-10-17\","
								+"	  \"Statement\": ["
								+"	    {"
								+"	      \"Effect\": \"Allow\","
								+"	      \"Principal\": {"
								+"	        \"Service\": \"lambda.amazonaws.com\" "
								+"	      },"
								+"	      \"Action\": \"sts:AssumeRole\" "
								+"	    }"
								+"	  ]"
								+"	}"
							);
			
					CreateRoleResult __roleResult = __iam.createRole(__request_role);
			
					PutRolePolicyRequest __putRolePolicyRequest = new PutRolePolicyRequest()
							.withPolicyName("«function»-lambda-sqs-policy-rule")
							.withPolicyDocument(__POLICY_DOCUMENT)
							.withRoleName("«function»-lambda-sqs-execution");
			
					__iam.putRolePolicy(__putRolePolicyRequest);
								
					««« String __body=«generateBodyJs(call.target.body,call.target.name)»;
					try {
						BufferedWriter __out = new BufferedWriter(new FileWriter("«call.target.name».js"));
						__out.write(__body);
						__out.close();
					
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					String __sourceFile = "«call.target.name».js";
					FileOutputStream __fos = new FileOutputStream("«call.target.name».zip");
					ZipOutputStream __zipOut = new ZipOutputStream(__fos);
					File __fileToZip = new File(__sourceFile);
					FileInputStream __fis = new FileInputStream(__fileToZip);
					ZipEntry __zipEntry = new ZipEntry(__fileToZip.getName());
					__zipOut.putNextEntry(__zipEntry);
					final byte[] __bytes = new byte[1024];
					int __length;
					while((__length = __fis.read(__bytes)) >= 0) {
						__zipOut.write(__bytes, 0, __length);
					}
					__zipOut.close();
					__fis.close();
					__fos.close();
					
					final File __zipfile = new File("«call.target.name».zip");
					final ByteBuffer __zipbuf;
					try (FileChannel __zipch = FileChannel.open(__zipfile.toPath(), StandardOpenOption.READ)) {
						final int __jarsz = (int) __zipch.size();
						__zipbuf = ByteBuffer.allocate(__jarsz);
						while (__zipbuf.remaining() > 0) {
							__zipch.read(__zipbuf);
						}
						__zipbuf.flip();
					} catch (final IOException iox) {
						throw new RuntimeException("cannot load zip", iox);
					}
					AWSLambda __lambda = AWSLambdaClientBuilder.standard()
						.withCredentials(new AWSStaticCredentialsProvider(«call.environment.name»))
						.withRegion("«((call.environment.right as DeclarationObject).features.get(3) as DeclarationFeature).value_s»")
						.build();
					
					GetRoleRequest __getRoleRequest = new GetRoleRequest().withRoleName(__roleResult.getRole().getRoleName());
					GetRoleResult __getRoleResult = __iam.getRole(__getRoleRequest);
							
					String __functionName = "lambda_«call.target.name»_"+System.currentTimeMillis();
					CreateFunctionRequest __lambdaRequest = new CreateFunctionRequest()
									.withFunctionName(__functionName)
									.withRuntime(Runtime.Nodejs43)
									.withRole(__getRoleResult.getRole().getArn())
									.withDescription("lambda function automatically deployed")
									.withHandler("«call.target.name».handler").withCode(new FunctionCode().withZipFile(__zipbuf));
					CreateFunctionResult __lambdaResponse = null;
					boolean __create_function = false;
					while(!__create_function){
						try{
								__lambdaResponse =__lambda.createFunction(__lambdaRequest);
								__create_function= true;
							}catch(Exception e){
								
							}
					}
					//add the trigger for AWS SNS service
					AddPermissionRequest __request_permission = new AddPermissionRequest()
							.withAction("lambda:InvokeFunction")
							.withStatementId("allow_sns_to_call_lambda")
							.withPrincipal("sns.amazonaws.com")
							.withSourceArn(__topicArn)
							.withFunctionName(__functionName);
					
					AddPermissionResult __response_permission = __lambda.addPermission(__request_permission);
					
					SubscribeResult __subscribeResult = __sns.subscribe(new SubscribeRequest().withTopicArn(__topicArn)
							        .withProtocol("lambda").withEndpoint(__lambdaResponse.getFunctionArn()));
					ExecutorService __poolAWS = Executors.newFixedThreadPool(4);
		'''
		// send message on sns to invoke the required 
		if (call.input.isIs_for_index) {
			if (call.input.f_index instanceof RangeLiteral) {
				ret += '''
					for(int __«call.target.name»_i=«(call.input.f_index as RangeLiteral).value1»;__«call.target.name»_i<«(call.input.f_index as RangeLiteral).value2»;__«call.target.name»_i++){
						final String __s_temp = String.valueOf(__«call.target.name»_i);
									Future<Object> f = __poolAWS.submit(new Callable<Object>() {
										@Override
										public Object call() throws Exception {
											// TODO Auto-generated method stub
											__sns.publish(new PublishRequest()
													.withMessage(__s_temp)
													.withTopicArn(__topicArn));
											return null;
										}
						});
					}
				'''
			} else if(call.input.f_index instanceof VariableLiteral && memory.get((call.input.f_index as VariableLiteral).variable.name).equals("Table")){
				
			}
		}
		// manage the callback
		if (call.isIs_thenall) {
			ret += '''
				«call.thenall.name»(null);
			'''
		}
		// clean the aws environtment
		ret += '''
			//delete the subscription to the topic and the top
			__sns.unsubscribe(new UnsubscribeRequest(__subscribeResult.getSubscriptionArn()));
			__sns.deleteTopic(__createTopicResult.getTopicArn());
			//delete the policy and the role
			__iam.deleteRolePolicy(new DeleteRolePolicyRequest().withPolicyName(__putRolePolicyRequest.getPolicyName()).withRoleName(__putRolePolicyRequest.getRoleName()));
			__iam.deleteRole(new DeleteRoleRequest().withRoleName(__roleResult.getRole().getRoleName()));
			//delete the function
			__lambda.deleteFunction(new DeleteFunctionRequest().withFunctionName(__functionName));
		'''
		return ret
	}

	def generateChannelReceive(ChannelReceive receive) {
		var env = (((receive.target.environment.right as DeclarationObject).features.get(0)) as DeclarationFeature).
			value_s
		if (env.equals("local")) {
			return '''«(receive.target as ChannelDeclaration).name».take()'''
		} else if (env.equals("aws")) {
			return '''
				ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl("«receive.target.name»").getQueueUrl());
				ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);
				__res.getMessages().get(0).getBody();
				__sqs.deleteMessage(__sqs.getQueueUrl("«receive.target.name»").getQueueUrl(),__res.getMessages().get(0).getReceiptHandle())
			'''
		}

	}

	def generateChannelSend(ChannelSend send) {
		var env = (((send.target.environment.right as DeclarationObject).features.get(0)) as DeclarationFeature).value_s
		if (env.equals("local")) {
			return '''«(send.target as ChannelDeclaration).name».add(«generateArithmeticExpression(send.expression)»)'''
		} else if (env.equals("aws")) {
			return '''
				SendMessageRequest __sndmsg = new SendMessageRequest(__sqs.getQueueUrl("«send.target.name»").getQueueUrl(), «generateArithmeticExpression(send.expression)»);
				__sqs.sendMessage(__sndmsg)
			'''
		}

	}

	def generateWhileExpression(WhileExpression expression) {
		'''
			while(«generateArithmeticExpression(expression.cond)»)
				«generateExpression(expression.body)»
		'''
	}

	def generateForExpression(ForExpression exp) {
		if (exp.object instanceof ParenthesizedExpression) {
			return generateFor(exp.index, (exp.object as ParenthesizedExpression).expression, exp.body)
		} else {
			return generateFor(exp.index, exp.object, exp.body)
		}

	}

	def generateFor(VariableFor index, ArithmeticExpression object, Expression body) {
		if (object instanceof CastExpression) {
			if ((object as CastExpression).type.equals("Dat")) { // dat
				return '''
					for(int _i=0; _i<((Table) «((object as CastExpression).target as VariableLiteral).variable.name»).rowCount();_i++){
						HashMap<Object,Object>«(index as VariableDeclaration).name» = new HashMap<Object,Object>();
						for(String _column:((Table) «((object as CastExpression).target as VariableLiteral).variable.name»).columnNames()){
							«(index as VariableDeclaration).name».put(_column,«((object as CastExpression).target as VariableLiteral).variable.name».get(_i,«((object as CastExpression).target as VariableLiteral).variable.name».columnIndex(_column)));
						}
						«IF body instanceof BlockExpression»
							«FOR exp : body.expressions »
								«generateExpression(exp)»
							«ENDFOR»
						«ELSE»
							«generateExpression(body)»
						«ENDIF»
					}
				'''
//				return '''
//					HashMap<Object,Object>«(index as VariableDeclaration).name» = new HashMap<Object,Object>();
//					for(int _i=0; _i<((Table) «((object as CastExpression).target as VariableLiteral).variable.name»).rowCount();_i++){
//						for(String _column:((Table) «((object as CastExpression).target as VariableLiteral).variable.name»).columnNames()){
//							«(index as VariableDeclaration).name».put("col",_column);
//							«(index as VariableDeclaration).name».put("v",((Table)«((object as CastExpression).target as VariableLiteral).variable.name»).get(_i,((Table)«((object as CastExpression).target as VariableLiteral).variable.name»).columnIndex(_column)));
//							«(index as VariableDeclaration).name».put("row",_i);
//						«IF body instanceof BlockExpression»
//							«FOR exp : body.expressions »
//								«generateExpression(exp)»
//							«ENDFOR»
//						«ELSE»
//							«generateExpression(body)»
//						«ENDIF»
//						}
//					}
//				'''
			} else if ((object as CastExpression).type.equals("Object")) { // object
				return '''
					HashMap<Object, Object> «(index as VariableDeclaration).name» = new HashMap<Object,Object>();
					for(Object _«(index as VariableDeclaration).name» : ( (HashMap<Object,Object>) «((object as CastExpression).target as VariableLiteral).variable.name»).keySet() ){
							«(index as VariableDeclaration).name».put("k",_«(index as VariableDeclaration).name»);
							«(index as VariableDeclaration).name».put("v",((HashMap<Object,Object>) «((object as CastExpression).target as VariableLiteral).variable.name»).get(_«(index as VariableDeclaration).name»));
						«IF body instanceof BlockExpression»
							«FOR exp : body.expressions »
								«generateExpression(exp)»
							«ENDFOR»
						«ELSE»
							«generateExpression(body)»
						«ENDIF»
					}
				'''

			}
		} else if (object instanceof RangeLiteral) {
			return '''
				for(int «(index as VariableDeclaration).name»=«object.value1»;«(index as VariableDeclaration).name»<«object.value2»;«(index as VariableDeclaration).name»++){
					«generateExpression(body)»
				}
			'''
		} else if (object instanceof VariableLiteral) {

			if (((object as VariableLiteral).variable.typeobject.equals('var') &&
				((object as VariableLiteral).variable.right instanceof NameObjectDef) ) ||
				memory.get((object as VariableLiteral).variable.name).equals("HashMap")) {
				return '''
					HashMap<Object, Object> «(index as VariableDeclaration).name» = new HashMap<Object,Object>();
					for(Object _«(index as VariableDeclaration).name» : «(object as VariableLiteral).variable.name».keySet() ){
							«(index as VariableDeclaration).name».put("k",_«(index as VariableDeclaration).name»);
							«(index as VariableDeclaration).name».put("v",«(object as VariableLiteral).variable.name».get(_«(index as VariableDeclaration).name»));
							«IF body instanceof BlockExpression»
								«FOR exp : body.expressions »
									«generateExpression(exp)»
								«ENDFOR»
							«ELSE»
								«generateExpression(body)»
							«ENDIF»
					}
				'''
			} else if ((object as VariableLiteral).variable.typeobject.equals('dat') ||
				memory.get((object as VariableLiteral).variable.name).equals("Table")) {
				return '''
					for(int _i=0; _i< «(object as VariableLiteral).variable.name».rowCount();_i++){
						HashMap<Object,Object>«(index as VariableDeclaration).name» = new HashMap<Object,Object>();
						for(String _column:«(object as VariableLiteral).variable.name».columnNames()){
							«(index as VariableDeclaration).name».put(_column,«(object as VariableLiteral).variable.name».get(_i,«(object as VariableLiteral).variable.name».columnIndex(_column)));
						}
						«IF body instanceof BlockExpression»
							«FOR exp : body.expressions »
								«generateExpression(exp)»
							«ENDFOR»
						«ELSE»
							«generateExpression(body)»
						«ENDIF»
					}
				'''

//				'''
//					HashMap<Object,Object>«(index as VariableDeclaration).name» = new HashMap<Object,Object>();
//					for(int _i=0; _i<«(object as VariableLiteral).variable.name».rowCount();_i++){
//						for(String _column: «(object as VariableLiteral).variable.name».columnNames()){
//							«(index as VariableDeclaration).name».put("col",_column);
//							«(index as VariableDeclaration).name».put("v",«(object as VariableLiteral).variable.name».get(_i,«(object as VariableLiteral).variable.name».columnIndex(_column)));
//							«(index as VariableDeclaration).name».put("row",_i);
//							«IF body instanceof BlockExpression»
//								«FOR exp : body.expressions »
//									«generateExpression(exp)»
//								«ENDFOR»
//							«ELSE»
//								«generateExpression(body)»
//							«ENDIF»
//						}
//					}
//				'''
			}
		} else if (object instanceof VariableFunction) {
			return '''
			«generateVariableFunction(object as VariableFunction,false)»
			for(HashMap<String,Object> «(index as VariableDeclaration).name» : __«(object as VariableFunction).target.name»_rows.values()){
				«IF body instanceof BlockExpression»
					«FOR exp : body.expressions »
						«generateExpression(exp)»
					«ENDFOR»
				«ELSE»
					«generateExpression(body)»
				«ENDIF»
			}'''
		}
	}

	def generateIfExpression(IfExpression expression) {
		'''
			if(«generateArithmeticExpression(expression.cond)»)
				«generateExpression(expression.then)»
				«IF expression.^else !== null»
					else «generateExpression(expression.^else)»
				«ENDIF»
		'''
	}

	def generatePrintExpression(PrintExpression expression) {
		if (expression.print instanceof ChannelReceive) {
			return '''
				try{
					System.out.println(«generateArithmeticExpression(expression.print)»);
				}catch(Exception e){
					e.printStackTrace();
				}
			'''
		} else
			return '''System.out.println(«generateArithmeticExpression(expression.print)»);'''
	}

	def generateAssignment(Assignment assignment) {
		if (assignment.feature != null) {
			if (assignment.value instanceof CastExpression &&
				((assignment.value as CastExpression).target instanceof ChannelReceive)) {
				if ((((assignment.value as CastExpression).target as ChannelReceive).target.environment.
					right as DeclarationObject).features.get(0).value_s.equals("aws")) { // aws environment
					if ((assignment.value as CastExpression).type.equals("Integer")) {
						return '''
							ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl("«((assignment.value as CastExpression).target as ChannelReceive).target.name»").getQueueUrl());
							ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);
							«generateArithmeticExpression(assignment.feature)» «assignment.op» Integer.parseInt(__res.getMessages().get(0).getBody());
							__sqs.deleteMessage(__sqs.getQueueUrl("«((assignment.value as CastExpression).target as ChannelReceive).target.name»").getQueueUrl(),__res.getMessages().get(0).getReceiptHandle());
						'''
					} else if ((assignment.value as CastExpression).type.equals("Double")) {
						return '''
							ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl("«((assignment.value as CastExpression).target as ChannelReceive).target.name»").getQueueUrl());
							ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);
							«generateArithmeticExpression(assignment.feature)» «assignment.op» Double.parseDouble(__res.getMessages().get(0).getBody());
							__sqs.deleteMessage(__sqs.getQueueUrl("«((assignment.value as CastExpression).target as ChannelReceive).target.name»").getQueueUrl(),__res.getMessages().get(0).getReceiptHandle());
						'''
					}
				} else { // local environment
					if ((assignment.value as CastExpression).type.equals("Integer")) {
						return '''
							try{
								«generateArithmeticExpression(assignment.feature)» «assignment.op» Integer.parseInt(«((assignment.value as CastExpression).target as ChannelReceive).target.name».take());
							}catch(InterruptedException e1){
								e1.printStackTrace();
							}
						'''
					} else if ((assignment.value as CastExpression).type.equals("Double")) {
						return '''
							try{
								«generateArithmeticExpression(assignment.feature)» «assignment.op» Double.parseDouble(«((assignment.value as CastExpression).target as ChannelReceive).target.name».take());
								e1.printStackTrace();
							}
						'''
					}

				}

			} else if (assignment.value instanceof ChannelReceive) {
				if (((assignment.value as ChannelReceive).target.environment.right as DeclarationObject).features.
					get(0).value_s.equals("aws")) { // aws environment
					return '''
						ReceiveMessageRequest __recmsg = new ReceiveMessageRequest(__sqs.getQueueUrl("«(assignment.value as ChannelReceive).target.name»").getQueueUrl());
						ReceiveMessageResult __res = __sqs.receiveMessage(__recmsg);
						«generateArithmeticExpression(assignment.feature)» «assignment.op» Integer.parseInt(__res.getMessages().get(0).getBody());
						__sqs.deleteMessage(__sqs.getQueueUrl("«(assignment.value as ChannelReceive).target.name»").getQueueUrl(),__res.getMessages().get(0).getReceiptHandle());
					'''
				} else { // local environment
					return '''
						try{
							«generateArithmeticExpression(assignment.feature)» «assignment.op» «generateArithmeticExpression(assignment.value as ChannelReceive)»
						}catch(InterruptedException e1){
							e1.printStackTrace();
						}
					'''
				}
			} else {
				return '''
					«generateArithmeticExpression(assignment.feature)» «assignment.op» «generateArithmeticExpression(assignment.value)»;
				'''
			}
		}
		if (assignment.feature_obj !== null) {
			if (assignment.feature_obj instanceof NameObject) {
				memory.put(((assignment.feature_obj as NameObject).name as VariableDeclaration).name + "." +
					(assignment.feature_obj as NameObject).value, valuateArithmeticExpression(assignment.value))
				return '''
					«((assignment.feature_obj as NameObject).name as VariableDeclaration).name».put("«(assignment.feature_obj as NameObject).value»",«generateArithmeticExpression(assignment.value)»);
				'''
			}
			if (assignment.feature_obj instanceof IndexObject) {
				if ((assignment.feature_obj as IndexObject).value != null) {
					memory.put(((assignment.feature_obj as IndexObject).name as VariableDeclaration).name + "[" +
						(assignment.feature_obj as IndexObject).value.name + "]",
						valuateArithmeticExpression(assignment.value))
					return '''
						«((assignment.feature_obj as IndexObject).name as VariableDeclaration).name».put(«(assignment.feature_obj as IndexObject).value.name»,«generateArithmeticExpression(assignment.value)»);
					'''
				} else {
					memory.put(((assignment.feature_obj as IndexObject).name as VariableDeclaration).name + "[" +
						(assignment.feature_obj as IndexObject).valuet + "]",
						valuateArithmeticExpression(assignment.value))
					return '''
						«((assignment.feature_obj as IndexObject).name as VariableDeclaration).name».put("«(assignment.feature_obj as IndexObject).valuet»",«generateArithmeticExpression(assignment.value)»);
					'''
				}
			}
		}
	}

	def generateFunctionDefinition(FunctionDefinition definition) {
		'''
			protected static Object «definition.name»(«FOR params : definition.parameters»Object «(params as VariableDeclaration).name»«IF(!params.equals(definition.parameters.last))», «ENDIF»«ENDFOR»)throws Exception{
				«FOR el : definition.body.expressions»
					«generateExpression(el)»
				«ENDFOR»
				«IF !checkReturn(definition.body)»
					return null;
				«ENDIF»
				}
		'''
	}

	def String valuateArithmeticExpression(ArithmeticExpression exp) {
		if (exp instanceof NumberLiteral) {
			return "Integer"
		} else if (exp instanceof BooleanLiteral) {
			return "Boolean"
		} else if (exp instanceof StringLiteral) {
			return "String"
		} else if (exp instanceof FloatLiteral) {
			return "Double"
		} else if (exp instanceof VariableLiteral) {
			val variable = exp.variable
			if (variable.typeobject.equals("dat")) {
				return "Table"
			} else if (variable.typeobject.equals("channel")) {
				return "Channel"
			} else if (variable.typeobject.equals("var")) {
				if (variable.right instanceof NameObjectDef) {
					return "HashMap"
				} else if (variable.right instanceof ArithmeticExpression) {
					return valuateArithmeticExpression(variable.right as ArithmeticExpression)
				}
			}
			return "variable"
		} else if (exp instanceof NameObject) {
			return memory.get(exp.name.name + "." + exp.value)
		} else if (exp instanceof IndexObject) {
			return memory.get(exp.name.name + "[" + exp.valuet + "]")
		} else if (exp instanceof DatTableObject) {
			return "Table"
		}
		if (exp instanceof UnaryOperation) {
			if (exp.feature.equals("!"))
				return "Boolean"
			return valuateArithmeticExpression(exp.operand)
		}
		if (exp instanceof BinaryOperation) {
			var left = valuateArithmeticExpression(exp.left)
			var right = valuateArithmeticExpression(exp.right)
			if (exp.feature.equals("+") || exp.feature.equals("-") || exp.feature.equals("*") ||
				exp.feature.equals("/")) {
				if (left.equals("String") || right.equals("String"))
					return "String"
				else if (left.equals("Double") || right.equals("Double"))
					return "Double"
				else
					return "Integer"
			} else
				return "Boolean"
		} else if (exp instanceof PostfixOperation) {
			return valuateArithmeticExpression(exp.operand)
		} else if (exp instanceof CastExpression) {
			if (exp.type.equals("Object")) {
				return "HashMap"
			}
			if (exp.type.equals("String")) {
				return "String"
			}
			if (exp.type.equals("Integer")) {
				return "Integer"
			}
			if (exp.type.equals("Float")) {
				return "Double"
			}
			if (exp.type.equals("Dat")) {
				return "Table"
			}
			if (exp.type.equals("Date")) {
				return "LocalDate"
			}
		} else if (exp instanceof ParenthesizedExpression) {
			return valuateArithmeticExpression(exp.expression)
		}
		if (exp instanceof MathFunction) {
			if (exp.feature.equals("round")) {
				return "Integer"
			} else {
				for (el : exp.expressions) {
					if (valuateArithmeticExpression(el).equals("Double")) {
						return "Double"
					}
				}
				return "Integer"
			}
		} else if (exp instanceof VariableFunction) {
			if (exp.target.typeobject.equals("var")) {
				if (exp.feature.equals("split")) {
					return "HashMap"
				} else if (exp.feature.contains("indexOf") || exp.feature.equals("length")) {
					return "Integer"
				} else if (exp.feature.equals("concat") || exp.feature.equals("substring") ||
					exp.feature.equals("toLowerCase") || exp.feature.equals("toUpperCase")) {
					return "String"
				} else {
					return "Boolean"
				}
			} else if (exp.target.typeobject.equals("random")) {
				if (exp.feature.equals("nextBoolean")) {
					return "Boolean"
				} else if (exp.feature.equals("nextDouble")) {
					return "Double"
				} else if (exp.feature.equals("nextInt")) {
					return "Integer"
				}
			}
		} else {
			return "Object"
		}
	}

	def checkReturn(EObject el) {
		if (el instanceof BlockExpression) {
			for (element : (el as BlockExpression).expressions) {
				if (element instanceof FunctionReturn) {
					return true
				}
			}
			return false
		}
	}

	def checkBlock(EObject el) {
		if (el instanceof FunctionDefinition) {
			return true
		}
		if (el instanceof WhileExpression) {
			return true
		}
		if (el instanceof ForExpression) {
			return true
		}
		if (el instanceof IfExpression) {
			return true
		}
		if (el instanceof BlockExpression) {
			return true
		}
		if (el instanceof Fly) {
			return false
		}
		if (el instanceof VariableDeclaration) {
			return true
		}
		if (el instanceof PrintExpression) {
			return true
		} else {
			return checkBlock(el.eContainer)
		}
	}

	// ----------------------------- GENERATE JavaScript CODE -----------------------------------
	
	def CharSequence compileJS(Resource resource,FunctionDefinition func,String env)'''
		«generateBodyJs(func.body,func.name,env)»
	'''
	
	
	def generateBodyJs(BlockExpression exps,String name,String env) {
	'''
		«IF env == "aws"»
			var AWS = require('aws-sdk');
			var sqs = new AWS.SQS();
		«ENDIF»
		var dataframe = require('dataframe-js').DataFrame
		
		exports.handler = async function(context,event){
			«FOR exp : exps.expressions»
				«generateJsExpression(exp)»
			«ENDFOR»
		}
		'''
	}

	def generateJsExpression(Expression exp) {
		var s = ''''''
		if (exp instanceof ChannelSend) {
			s += '''	
				var params = {
					QueueName : "«exp.target.name»" 
				};
				sqs.getQueueUrl(params, function(err,data){
					if(err){
						console.log(\"Error\", err);
					}else{
						var params2= {
						MessageBody : «generateJsArithmeticExpression(exp.expression)»,
						QueueUrl : data.QueueUrl
						}
						sqs.sendMessage(params2, function(err,data){
							if(err){
								console.log("Error",err);"
							}else{
								console.log("Send Success");
							}
						});
					}
				});
			'''
		} else if (exp instanceof VariableDeclaration) {
			if (exp.typeobject.equals("var")) {
				if(exp.right instanceof NameObjectDef){
					memory.put(exp.name, "HashMap")
				 s += '''var «exp.name» = {'''
				var i = 0;
				for (f : (exp.right as NameObjectDef).features) {
					if (f.feature != null) {
						memory.put(exp.name + "." + f.feature, valuateArithmeticExpression(f.value))
						s = s + '''«f.feature»:«generateJsArithmeticExpression(f.value)»'''
					} else {
						memory.put(exp.name + "[" + i + "]", valuateArithmeticExpression(f.value))
						s = s + '''«i»:«generateJsArithmeticExpression(f.value)»'''
						i++
					}
					if(f!=(exp.right as NameObjectDef).features.last){
						s += ''','''
					}
				}
				s+='''}'''
				
			} else{
				s += '''
					var «exp.name» = «generateJsArithmeticExpression(exp.right as ArithmeticExpression)»;
				'''
			}
			
			}else
			if (exp.typeobject.equals("dat")) {
				memory.put(exp.name,"Table")
				s += '''
					var «exp.name» = await dataframe.fromCSV(«generateJsArithmeticExpression((exp.right as NameObjectDef).features.get(1).value)»)
				'''
			}
		} else if (exp instanceof IfExpression) {
			s += '''
				if(«generateJsArithmeticExpression(exp.cond)»)
					«generateJsExpression(exp.then)» 
				«IF exp.^else != null»
				else
					«generateJsExpression(exp.^else)»
				«ENDIF»
			'''
		} else if (exp instanceof ForExpression) {
			s += '''
				«generateJsForExpression(exp)»
			'''
		} else if (exp instanceof WhileExpression) {
			s += '''
				«generateJsWhileExpression(exp)»
			'''
		} else if (exp instanceof BlockExpression) {
			s += 
			'''
				«generateJsBlockExpression(exp)»
			'''
		} else if (exp instanceof Assignment) {
			s+='''
				«generateJsAssignmentExpression(exp)»
			'''
		} else if (exp instanceof PrintExpression){
			s+='''
				console.log(«generateJsArithmeticExpression(exp.print)») 
			'''
		}
		return s
	}

	def generateJsAssignmentExpression(Assignment assignment){
	if (assignment.feature != null) {
			if (assignment.value instanceof CastExpression &&
				((assignment.value as CastExpression).target instanceof ChannelReceive)) {
				if ((((assignment.value as CastExpression).target as ChannelReceive).target.environment.
					right as DeclarationObject).features.get(0).value_s.equals("aws")) { // aws environment
					if ((assignment.value as CastExpression).type.equals("Integer")) {
						return '''
							
						'''
					} else if ((assignment.value as CastExpression).type.equals("Double")) {
						return '''
							
						'''
					}
				} else { // other environment
					if ((assignment.value as CastExpression).type.equals("Integer")) {
						return '''
							
						'''
					} else if ((assignment.value as CastExpression).type.equals("Double")) {
						return '''
							
						'''
					}

				}

			} else if (assignment.value instanceof ChannelReceive) {
				if (((assignment.value as ChannelReceive).target.environment.right as DeclarationObject).features.
					get(0).value_s.equals("aws")) { // aws environment
					return '''
					'''
				} else { // other environment
					return '''
						
					'''
				}
			} else {
				return '''
					«generateJsArithmeticExpression(assignment.feature)» «assignment.op» «generateJsArithmeticExpression(assignment.value)» 
				'''
			}
		}
		if (assignment.feature_obj !== null) {
			if (assignment.feature_obj instanceof NameObject) {
				memory.put(((assignment.feature_obj as NameObject).name as VariableDeclaration).name + "." +
					(assignment.feature_obj as NameObject).value, valuateArithmeticExpression(assignment.value))
				return '''
					«((assignment.feature_obj as NameObject).name as VariableDeclaration).name»[\"«(assignment.feature_obj as NameObject).value»\"] = «generateJsArithmeticExpression(assignment.value)» 
				'''
			}
			if (assignment.feature_obj instanceof IndexObject) {
				if ((assignment.feature_obj as IndexObject).value != null) {
					memory.put(((assignment.feature_obj as IndexObject).name as VariableDeclaration).name + "[" + (assignment.feature_obj as IndexObject).value.name + "]", valuateArithmeticExpression(assignment.value))
					return '''
						«((assignment.feature_obj as IndexObject).name as VariableDeclaration).name»[«(assignment.feature_obj as IndexObject).value.name»] = «generateJsArithmeticExpression(assignment.value)» 
					'''
				} else {
					memory.put(((assignment.feature_obj as IndexObject).name as VariableDeclaration).name + "[" +
						(assignment.feature_obj as IndexObject).valuet + "]",
						valuateArithmeticExpression(assignment.value))
					return '''
						«((assignment.feature_obj as IndexObject).name as VariableDeclaration).name»[«(assignment.feature_obj as IndexObject).valuet»] = «generateJsArithmeticExpression(assignment.value)» 
					'''
				}
			}
		}	
	}
	
	def generateJsWhileExpression(WhileExpression exp) {
		'''
			while(«generateJsArithmeticExpression(exp.cond)»)
				«generateJsExpression(exp.body)»
		'''
	}

	def generateJsForExpression(ForExpression exp) {
		if (exp.object instanceof CastExpression) {
			if((exp.object as CastExpression).type.equals("Dat")){
				return '''
				«((exp.object as CastExpression).target as VariableLiteral).variable.name».toCollection().forEach(function(«(exp.index as VariableDeclaration).name»,__item,__array){
				«IF exp.body instanceof BlockExpression»
					«FOR e: (exp.body as BlockExpression).expressions»
						«generateJsExpression(e)»
					«ENDFOR»
				«ELSE»
					«generateJsExpression(exp.body)»
				«ENDIF»
				})
				'''
			}else if((exp.object as CastExpression).type.equals("Object")){
				return '''
					for(__key in « ((exp.object as CastExpression).target as VariableLiteral).variable.name » ){
						var «(exp.index as VariableDeclaration).name» = {k:__key, v:«((exp.object as CastExpression).target as VariableLiteral).variable.name»[__key]} 
						«IF exp.body instanceof BlockExpression»
							«FOR e: (exp.body as BlockExpression).expressions»
							«generateJsExpression(e)»
							«ENDFOR»
						«ELSE»
							«generateJsExpression(exp.body)»	
						«ENDIF»
					}
				'''
			}
		} else if (exp.object instanceof RangeLiteral) {
			return '''
				var «(exp.index as VariableDeclaration).name»;
				for(«(exp.index as VariableDeclaration).name» = «(exp.object as RangeLiteral).value1» ;«(exp.index as VariableDeclaration).name» < «(exp.object as RangeLiteral).value2»; «(exp.index as VariableDeclaration).name»++)
				«IF exp.body instanceof BlockExpression»
					«generateJsBlockExpression(exp.body as BlockExpression)»
				«ELSE»
					«generateJsExpression(exp.body)»
				«ENDIF»
			'''
		} else if (exp.object instanceof VariableLiteral) {
			if (((exp.object as VariableLiteral).variable.typeobject.equals('var') &&
				((exp.object as VariableLiteral).variable.right instanceof NameObjectDef) ) ||
				memory.get((exp.object as VariableLiteral).variable.name).equals("HashMap")) {
				return '''
					for(__key in « (exp.object as VariableLiteral).variable.name » ){
						var «(exp.index as VariableDeclaration).name» = {k:__key, v:«(exp.object as VariableLiteral).variable.name»[__key]}
						«IF exp.body instanceof BlockExpression»
							«FOR e: (exp.body as BlockExpression).expressions»
							«generateJsExpression(e)»
							«ENDFOR»
						«ELSE»
							«generateJsExpression(exp.body)»	
						«ENDIF»
					}
				'''
			} else if ((exp.object as VariableLiteral).variable.typeobject.equals('dat') ||
				memory.get((exp.object as VariableLiteral).variable.name).equals("Table")) {
				return '''
				«(exp.object as VariableLiteral).variable.name».toCollection().forEach(function(«(exp.index as VariableDeclaration).name»,__item,__array){ 
				«IF exp.body instanceof BlockExpression»
					«FOR e: (exp.body as BlockExpression).expressions»
							«generateJsExpression(e)»
					«ENDFOR»
				«ELSE»
						«generateJsExpression(exp.body)»
				«ENDIF»
				});
				'''
			}
		}
	}	


	def generateJsBlockExpression(BlockExpression block) {
		'''
		{
			«FOR exp : block.expressions»
				«generateJsExpression(exp)»
			«ENDFOR»
		}
		'''
	}

	def generateJsArithmeticExpression(ArithmeticExpression exp) {
		if (exp instanceof BinaryOperation) {
			if (exp.feature.equals("and"))
				return '''«generateJsArithmeticExpression(exp.left)» && «generateJsArithmeticExpression(exp.right)»'''
			else if (exp.feature.equals("or"))
				return '''«generateJsArithmeticExpression(exp.left)» || «generateJsArithmeticExpression(exp.right)»'''
			else
				return '''«generateJsArithmeticExpression(exp.left)» «exp.feature» «generateJsArithmeticExpression(exp.right)»'''
		} else if (exp instanceof UnaryOperation) {
			return '''«exp.feature»«generateJsArithmeticExpression(exp.operand)»'''
		} else if (exp instanceof PostfixOperation) {
			return '''«generateJsArithmeticExpression(exp.operand)»«exp.feature»'''
		} else if (exp instanceof ParenthesizedExpression) {
			return '''(«generateJsArithmeticExpression(exp.expression)»)'''
		} else if (exp instanceof NumberLiteral) {
			return '''«exp.value»'''
		} else if (exp instanceof BooleanLiteral) {
			return '''«exp.value»'''
		} else if (exp instanceof FloatLiteral) {
			return '''«exp.value»'''
		}
		if (exp instanceof StringLiteral) {
			return '''\"«exp.value»\"'''
		} else if (exp instanceof VariableLiteral) {
			return '''«exp.variable.name»'''
		} else if (exp instanceof VariableFunction) {
			if (exp.target.typeobject.equals("random")) {
				return '''Math.random()'''
			}
		} else if(exp instanceof NameObject){
			return '''«(exp.name as VariableDeclaration).name».«exp.value»'''
		}else if(exp instanceof IndexObject){
			if (exp.value != null) {
				return '''«(exp.name as VariableDeclaration).name»["«(exp.value.name)»"]'''
			} else{
				return '''«(exp.name as VariableDeclaration).name»[«exp.valuet»]'''
			}
		}else if(exp instanceof CastExpression){
			return '''«generateJsArithmeticExpression(exp.target)»'''
		} else if(exp instanceof MathFunction){
				
		}
	}

}
